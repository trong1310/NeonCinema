// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeonCinema_Infrastructure.Database.AppDbContext;

#nullable disable

namespace NeonCinema_Infrastructure.Migrations
{
    [DbContext(typeof(NeonCinemasContext))]
    [Migration("20241109140233_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Actor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ActorMovies", b =>
                {
                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("MovieID", "ActorID");

                    b.HasIndex("ActorID");

                    b.ToTable("ActorMovies", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Bill", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("FoodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("FoodID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UserID");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.BillTicket", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BillId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("BillTicket", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.CategoryMovies", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("MovieTypeID");

                    b.ToTable("CategoryMovies", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Checkin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TicketsID");

                    b.ToTable("Checkin", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Cinemas", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClosingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cinemas", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            ClosingHours = "10:00 PM",
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(433),
                            Location = "Hà Nội",
                            Name = "Cinema A",
                            OpeningHours = "08:00 AM",
                            PhoneNumber = "0123456789",
                            RoomNumber = 5,
                            WebSite = "www.cinemaa.com"
                        },
                        new
                        {
                            ID = new Guid("55452ef6-6f76-41a1-9b7b-4fd738879c50"),
                            ClosingHours = "11:00 PM",
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(437),
                            Location = "Đà Nẵng",
                            Name = "Cinema B",
                            OpeningHours = "09:00 AM",
                            PhoneNumber = "0987654321",
                            RoomNumber = 7,
                            WebSite = "www.cinemab.com"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Countrys", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countrys", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            CountryName = "Nhật Bản"
                        },
                        new
                        {
                            ID = new Guid("dde94c7d-c1d8-4258-b1a2-c62ea2926634"),
                            CountryName = "Vương Quốc Anh"
                        },
                        new
                        {
                            ID = new Guid("fe46cd3d-4cf1-40a4-bb0b-87c3faa5fa55"),
                            CountryName = "Trung Quốc"
                        },
                        new
                        {
                            ID = new Guid("24de973f-0586-484e-8821-949349632b36"),
                            CountryName = "Việt Nam"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Director", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nchar(256)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Director", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn A",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("379e472e-11d1-48b3-b8a1-d7f41815d440"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn D",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("fcd2982b-92aa-443b-9692-809b36da41cc"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn B",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 5
                        },
                        new
                        {
                            ID = new Guid("362a9458-0b67-46d2-a838-49dabc64221a"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn C",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 5
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.FoodCombo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ID");

                    b.ToTable("FoodCombo", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Genre", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            GenreName = "Kịch tính"
                        },
                        new
                        {
                            ID = new Guid("7576c501-3833-4058-8567-d022d29b870b"),
                            GenreName = "Tình cảm"
                        },
                        new
                        {
                            ID = new Guid("c31c5cf5-3ec8-4487-9e42-fffd06657728"),
                            GenreName = "2D"
                        },
                        new
                        {
                            ID = new Guid("9b978373-0221-4339-8b9a-a3d1c673c975"),
                            GenreName = "Hoạt hình"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Language", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Lenguage", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            LanguageName = "en"
                        },
                        new
                        {
                            ID = new Guid("6a8a0de2-cb5c-4fed-9378-f1fcb68ae232"),
                            LanguageName = "vi"
                        },
                        new
                        {
                            ID = new Guid("92ac05d5-0b20-4a0c-9b9d-a8fc453d1991"),
                            LanguageName = "ja"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MovieTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("ID");

                    b.ToTable("MovieType", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Movies", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DirectorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LenguageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StarTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("DirectorID");

                    b.HasIndex("GenreID");

                    b.HasIndex("LenguageID");

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            AgeAllowed = 18,
                            CountryID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(580),
                            Description = "An exciting action movie.",
                            DirectorID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Duration = 120,
                            GenreID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Images = "0e9f825c-5346-44f1-a94d-7078909ce83a.png",
                            LenguageID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Name = "Movie A",
                            StarTime = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Trailer = "https://www.youtube.com/watch?v=IkaP0KJWTsQ"
                        },
                        new
                        {
                            ID = new Guid("b3696b37-c96d-434f-afec-32bf491991a3"),
                            AgeAllowed = 16,
                            CountryID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(590),
                            Description = "A thrilling mystery.",
                            DirectorID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Duration = 150,
                            GenreID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Images = "0e9f825c-5346-44f1-a94d-7078909ce83a.png",
                            LenguageID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Name = "Movie B",
                            StarTime = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Trailer = "https://www.youtube.com/watch?v=IkaP0KJWTsQ"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Point", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEarned")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TotalPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .IsFixedLength();

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionUsers", b =>
                {
                    b.Property<Guid>("PromotionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PromotionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("PromotionUsers", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.RankMember", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MinPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0");

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("RankMember", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Roles", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 772, DateTimeKind.Local).AddTicks(9724),
                            RoleName = "Admin",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("ba820c64-1a81-4c44-80ea-47038c930c3b"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 772, DateTimeKind.Local).AddTicks(9746),
                            RoleName = "Client",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("56bece24-ba60-4b2b-801c-b68cfc8ccf9d"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 772, DateTimeKind.Local).AddTicks(9749),
                            RoleName = "Staff",
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CinemasId");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            CinemasId = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            ColumnNumber = 0,
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(459),
                            Name = "Room 1",
                            RowNumber = 0,
                            SeatingCapacity = 100,
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("a17b3885-aab0-4885-996a-9af4a84fe7a9"),
                            CinemasId = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            ColumnNumber = 0,
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(464),
                            Name = "Room 2",
                            RowNumber = 0,
                            SeatingCapacity = 150,
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShowTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Show_ReleaseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.HasIndex("ShowTimeID");

                    b.HasIndex("Show_ReleaseID");

                    b.ToTable("Screening", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("d5bc5a16-d68a-4058-80f7-66d5907a2fc8"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(639),
                            MovieID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            RoomID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            ShowDate = new DateTime(2024, 11, 11, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(637),
                            ShowTimeID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Show_ReleaseID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("0fdf3315-481c-497a-a246-c4d9682758af"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(644),
                            MovieID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            RoomID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            ShowDate = new DateTime(2024, 11, 11, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(643),
                            ShowTimeID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Show_ReleaseID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("SeatTypeID");

                    b.ToTable("Seat", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Column = "1",
                            RoomID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Row = "1",
                            SeatNumber = "1",
                            SeatTypeID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("2cd4a48c-19e9-45ad-9d42-69e8cff2bcba"),
                            Column = "2",
                            RoomID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Row = "2",
                            SeatNumber = "2",
                            SeatTypeID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("6bb4dc4e-6bff-4449-b85e-9616f1394c56"),
                            Column = "2",
                            RoomID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Row = "2",
                            SeatNumber = "2",
                            SeatTypeID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.SeatType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SeatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SeatType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(412),
                            SeatTypeName = "Ghế thường"
                        },
                        new
                        {
                            ID = new Guid("0f7843ba-49f4-460f-a0f9-8bec4172806b"),
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(416),
                            SeatTypeName = "Ghế Vip"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShiftChange", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewShift")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("RequetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkShiftID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("WorkShiftID");

                    b.ToTable("ShiftChange", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShowTime", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ShowTimes");

                    b.HasData(
                        new
                        {
                            ID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            StartTime = new TimeSpan(0, 14, 0, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("4949354d-0a76-460b-95b8-3b32ce9d9183"),
                            EndTime = new TimeSpan(0, 20, 30, 0, 0),
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Show_release", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRelease")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeRelease")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.ToTable("Show_release", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            DateRelease = new DateTime(2024, 11, 10, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(615),
                            MovieID = new Guid("127d38f8-f339-40a6-9626-0dbd122d7f5f"),
                            RoomID = new Guid("8fb86c77-213f-4316-8a7a-43fee795514e"),
                            Status = 1,
                            TimeRelease = new DateTime(2024, 11, 9, 23, 2, 32, 773, DateTimeKind.Local).AddTicks(610)
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScreningID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Show_ReleaseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketPriceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.HasIndex("ScreningID");

                    b.HasIndex("SeatID");

                    b.HasIndex("Show_ReleaseID");

                    b.HasIndex("TicketPriceID");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.TicketPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ScreeningID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ScreeningID");

                    b.HasIndex("SeatID");

                    b.HasIndex("SeatTypeID");

                    b.HasIndex("ShowTimeID");

                    b.ToTable("TicketPrice", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Users", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adderss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrBriht")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<bool>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .IsFixedLength();

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("25dd6469-8120-43a5-ab1a-cf4d361867d2"),
                            Adderss = "Ba Vi",
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 772, DateTimeKind.Local).AddTicks(9823),
                            DateOrBriht = new DateTime(2004, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            Gender = true,
                            Images = "images.jpg",
                            PassWord = "NFntFdqJ8gpEI8PihLzKSQ==",
                            PhoneNumber = "0862774830",
                            RoleID = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("b104e82c-19f4-4930-a3c5-0deec72570d8"),
                            Adderss = "Ba Vi",
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(194),
                            DateOrBriht = new DateTime(2004, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "client@gmail.com",
                            FullName = "Client",
                            Gender = true,
                            Images = "images.jpg",
                            PassWord = "ym4Jwx/bO5i1P+4Xn4PslQ==",
                            PhoneNumber = "0334555555",
                            RoleID = new Guid("ba820c64-1a81-4c44-80ea-47038c930c3b"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("d8e6742b-2ae8-4661-9fa9-666b736aa06a"),
                            Adderss = "Ba Vi",
                            CreatedTime = new DateTime(2024, 11, 9, 21, 2, 32, 773, DateTimeKind.Local).AddTicks(250),
                            DateOrBriht = new DateTime(2004, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@gmail.com",
                            FullName = "Staff",
                            Gender = true,
                            Images = "images.jpg",
                            PassWord = "Cb19hcCaeozLP7MB0dW0fQ==",
                            PhoneNumber = "0987126125",
                            RoleID = new Guid("56bece24-ba60-4b2b-801c-b68cfc8ccf9d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStar")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("WorkShift", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Infrastructure.Database.Configuration.BookTickets", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("TicketID");

                    b.ToTable("BookTicket", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ActorMovies", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movie")
                        .WithMany("ActorMovies")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Bill", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.FoodCombo", "FoodCombos")
                        .WithMany("Bills")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("NeonCinema_Domain.Database.Entities.PaymentMethod", null)
                        .WithMany("BillDetail")
                        .HasForeignKey("PaymentMethodID");

                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("Bills")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FoodCombos");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.BillTicket", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Bill", "Bills")
                        .WithMany("BillTickets")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Tickets")
                        .WithMany("BillTickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bills");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.CategoryMovies", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("CategoryMovies")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.MovieType", "MovieType")
                        .WithMany("CategoryMovies")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MovieType");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Checkin", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.TicketPrice", "Tickets")
                        .WithMany()
                        .HasForeignKey("TicketsID");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Movies", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Countrys", "Countrys")
                        .WithMany("Movies")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Language", "Lenguage")
                        .WithMany("Movies")
                        .HasForeignKey("LenguageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Countrys");

                    b.Navigation("Director");

                    b.Navigation("Genre");

                    b.Navigation("Lenguage");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Point", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("Points")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionUsers", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Promotion", "Promotion")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "User")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.RankMember", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("RankMembers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Cinemas", "Cinemas")
                        .WithMany("Rooms")
                        .HasForeignKey("CinemasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cinemas");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("Screening")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Rooms")
                        .WithMany("Screenings")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.ShowTime", "ShowTime")
                        .WithMany("Screening")
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Show_release", "Show_Release")
                        .WithMany("Screenings")
                        .HasForeignKey("Show_ReleaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Rooms");

                    b.Navigation("ShowTime");

                    b.Navigation("Show_Release");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Rooms")
                        .WithMany("Seats")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.SeatType", "SeatTypes")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rooms");

                    b.Navigation("SeatTypes");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShiftChange", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.WorkShift", "WorkShift")
                        .WithMany("ShiftChanges")
                        .HasForeignKey("WorkShiftID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Show_release", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("Show_Releases")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Room")
                        .WithMany("Show_Releases")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("TicketSeats")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Room")
                        .WithMany("TicketSeats")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Screening", "Screenings")
                        .WithMany("Ticket")
                        .HasForeignKey("ScreningID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", "Seat")
                        .WithMany("TicketSeats")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Show_release", "Show_Release")
                        .WithMany()
                        .HasForeignKey("Show_ReleaseID");

                    b.HasOne("NeonCinema_Domain.Database.Entities.TicketPrice", "TicketPrices")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketPriceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Room");

                    b.Navigation("Screenings");

                    b.Navigation("Seat");

                    b.Navigation("Show_Release");

                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.TicketPrice", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Screening", "Screening")
                        .WithMany("TicketPrice")
                        .HasForeignKey("ScreeningID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", null)
                        .WithMany("Ticket")
                        .HasForeignKey("SeatID");

                    b.HasOne("NeonCinema_Domain.Database.Entities.SeatType", "SeatTypes")
                        .WithMany("TicketPrice")
                        .HasForeignKey("SeatTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.ShowTime", "ShowTimes")
                        .WithMany("TicketPrices")
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("SeatTypes");

                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Users", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("Workshifts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Infrastructure.Database.Configuration.BookTickets", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Customers")
                        .WithMany("BookTickets")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Tickets")
                        .WithMany("BookTickets")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Actor", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Bill", b =>
                {
                    b.Navigation("BillTickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Cinemas", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Countrys", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.FoodCombo", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Language", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieType", b =>
                {
                    b.Navigation("CategoryMovies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Movies", b =>
                {
                    b.Navigation("ActorMovies");

                    b.Navigation("CategoryMovies");

                    b.Navigation("Screening");

                    b.Navigation("Show_Releases");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PaymentMethod", b =>
                {
                    b.Navigation("BillDetail");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.Navigation("PromotionUsers");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.Navigation("Screenings");

                    b.Navigation("Seats");

                    b.Navigation("Show_Releases");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.Navigation("Ticket");

                    b.Navigation("TicketPrice");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.Navigation("Ticket");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.SeatType", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("TicketPrice");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShowTime", b =>
                {
                    b.Navigation("Screening");

                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Show_release", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.Navigation("BillTickets");

                    b.Navigation("BookTickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.TicketPrice", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Users", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("BookTickets");

                    b.Navigation("Points");

                    b.Navigation("PromotionUsers");

                    b.Navigation("RankMembers");

                    b.Navigation("Workshifts");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.Navigation("ShiftChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
