// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeonCinema_Infrastructure.Database.AppDbContext;

#nullable disable

namespace NeonCinema_Infrastructure.Migrations
{
    [DbContext(typeof(NeonCinemasContext))]
    [Migration("20241103021249_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Bill", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("UserID");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.CategoryMovies", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("MovieTypeID");

                    b.ToTable("CategoryMovies", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Checkin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TicketsID");

                    b.ToTable("Checkin", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Cinemas", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClosingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cinemas", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("5d27d680-4a96-4151-8f4e-03b2703e639c"),
                            ClosingHours = "10:00 PM",
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1939),
                            Location = "Hà Nội",
                            Name = "Cinema A",
                            OpeningHours = "08:00 AM",
                            PhoneNumber = "0123456789",
                            RoomNumber = 5,
                            WebSite = "www.cinemaa.com"
                        },
                        new
                        {
                            ID = new Guid("2e30e476-8fa6-4086-aa03-0e3eb0464d99"),
                            ClosingHours = "11:00 PM",
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1943),
                            Location = "Đà Nẵng",
                            Name = "Cinema B",
                            OpeningHours = "09:00 AM",
                            PhoneNumber = "0987654321",
                            RoomNumber = 7,
                            WebSite = "www.cinemab.com"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Countrys", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countrys", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("b7ee1cd8-eba8-4396-a083-fcdf6e1a6753"),
                            CountryName = "Nhật Bản"
                        },
                        new
                        {
                            ID = new Guid("e2b7c40a-30e1-40f6-bddf-392afbe9aae5"),
                            CountryName = "Vương Quốc Anh"
                        },
                        new
                        {
                            ID = new Guid("9d5a991f-ec75-4bb5-9c48-654f624cc8a1"),
                            CountryName = "Trung Quốc"
                        },
                        new
                        {
                            ID = new Guid("a38d9eff-f7d9-4922-ba0b-1387b2af9ccb"),
                            CountryName = "Việt Nam"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Director", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nchar(256)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Director", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("0798e681-7995-4dec-b74b-d966e3b0ee2b"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn A",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("56541556-1802-41f1-8c1a-8e3b1ecee798"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn D",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("946dcaea-c4a0-43fb-8f35-bd5a267d9219"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn B",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 5
                        },
                        new
                        {
                            ID = new Guid("461bf894-5774-4889-9e55-971d4b877f20"),
                            Address = "Hà Nội",
                            Biography = "Có",
                            FullName = "Nguyễn Văn C",
                            Gender = "Nam",
                            Nationality = "Ha Noi",
                            Status = 5
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.FoodCombo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ID");

                    b.HasIndex("BillID");

                    b.HasIndex("ServiceID");

                    b.ToTable("FoodCombo", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Genre", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("7ab949d7-8932-4386-879c-c268af905335"),
                            GenreName = "Kịch tính"
                        },
                        new
                        {
                            ID = new Guid("756cd671-85a4-46be-b1b3-61da486f68d1"),
                            GenreName = "Tình cảm"
                        },
                        new
                        {
                            ID = new Guid("18a88474-afac-45a3-96fe-a6599759fa51"),
                            GenreName = "2D"
                        },
                        new
                        {
                            ID = new Guid("f339a205-0c1f-4e72-bdb0-e86df4ae53a7"),
                            GenreName = "Hoạt hình"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Language", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Lenguage", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("5a47343d-40e3-43ed-a2c5-c706d8f3bceb"),
                            LanguageName = "en"
                        },
                        new
                        {
                            ID = new Guid("e7fc41cc-d8a8-45a3-a125-d44b7bb2d453"),
                            LanguageName = "vi"
                        },
                        new
                        {
                            ID = new Guid("7a4093a6-07dd-44b1-8537-c27fdf9378cd"),
                            LanguageName = "ja"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MovieTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("ID");

                    b.ToTable("MovieType", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Movies", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgeAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DirectorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LenguageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StarTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("DirectorID");

                    b.HasIndex("GenreID");

                    b.HasIndex("LenguageID");

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("b578b7e3-69f7-4bd2-9445-4f865cb98c29"),
                            Actor = "1232",
                            AgeAllowed = 18,
                            CountryID = new Guid("b7ee1cd8-eba8-4396-a083-fcdf6e1a6753"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2123),
                            Description = "An exciting action movie.",
                            DirectorID = new Guid("0798e681-7995-4dec-b74b-d966e3b0ee2b"),
                            Duration = 120,
                            GenreID = new Guid("7ab949d7-8932-4386-879c-c268af905335"),
                            Images = "movieA.jpg",
                            LenguageID = new Guid("5a47343d-40e3-43ed-a2c5-c706d8f3bceb"),
                            Name = "Movie A",
                            StarTime = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Trailer = "trailerA.mp4"
                        },
                        new
                        {
                            ID = new Guid("0d8e4fe6-da30-4ed5-9282-39923334e440"),
                            Actor = "1232",
                            AgeAllowed = 16,
                            CountryID = new Guid("e2b7c40a-30e1-40f6-bddf-392afbe9aae5"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2133),
                            Description = "A thrilling mystery.",
                            DirectorID = new Guid("56541556-1802-41f1-8c1a-8e3b1ecee798"),
                            Duration = 150,
                            GenreID = new Guid("756cd671-85a4-46be-b1b3-61da486f68d1"),
                            Images = "movieB.jpg",
                            LenguageID = new Guid("e7fc41cc-d8a8-45a3-a125-d44b7bb2d453"),
                            Name = "Movie B",
                            StarTime = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Trailer = "trailerB.mp4"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Point", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEarned")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TotalPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .IsFixedLength();

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionUsers", b =>
                {
                    b.Property<Guid>("PromotionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PromotionID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("PromotionUsers", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.RankMember", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MinPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0");

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("RankMember", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Roles", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1042),
                            RoleName = "Admin",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("ba820c64-1a81-4c44-80ea-47038c930c3b"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1074),
                            RoleName = "Client",
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("56bece24-ba60-4b2b-801c-b68cfc8ccf9d"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1078),
                            RoleName = "Staff",
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemasID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CinemasID");

                    b.HasIndex("SeatID");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("91ce73d8-7ec9-4f56-8adc-589ca424f3c8"),
                            CinemasID = new Guid("5d27d680-4a96-4151-8f4e-03b2703e639c"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2049),
                            Name = "Room 1",
                            SeatID = new Guid("8adb013b-3536-4b51-973e-f76d039ef98a"),
                            SeatingCapacity = 100,
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("a5f33945-bee7-4dfc-b2a3-6653cddb14bb"),
                            CinemasID = new Guid("2e30e476-8fa6-4086-aa03-0e3eb0464d99"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2054),
                            Name = "Room 2",
                            SeatID = new Guid("8adb013b-3536-4b51-973e-f76d039ef98a"),
                            SeatingCapacity = 150,
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShowTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.HasIndex("ShowTimeID");

                    b.ToTable("Screening", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("7705fdad-32ed-4590-9af6-7c8f6440868d"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2168),
                            MovieID = new Guid("b578b7e3-69f7-4bd2-9445-4f865cb98c29"),
                            RoomID = new Guid("91ce73d8-7ec9-4f56-8adc-589ca424f3c8"),
                            ShowDate = new DateTime(2024, 11, 5, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2161),
                            ShowTimeID = new Guid("7bc7f8a3-2e29-4cf9-9d7f-dd7b39490c89"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("1f9455a5-2476-41f6-bca1-3073d9555d7e"),
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2173),
                            MovieID = new Guid("0d8e4fe6-da30-4ed5-9282-39923334e440"),
                            RoomID = new Guid("a5f33945-bee7-4dfc-b2a3-6653cddb14bb"),
                            ShowDate = new DateTime(2024, 11, 8, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(2172),
                            ShowTimeID = new Guid("13a2549a-e5c0-4150-be76-0fd67d20190e"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SeatTypeID");

                    b.ToTable("Seat", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("8adb013b-3536-4b51-973e-f76d039ef98a"),
                            Column = "1",
                            Row = "1",
                            SeatNumber = "1",
                            SeatTypeID = new Guid("1068b750-30af-4ed9-83dc-1ca632349d33"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("2b7e7689-6ec5-4be0-a790-2af382325607"),
                            Column = "2",
                            Row = "2",
                            SeatNumber = "2",
                            SeatTypeID = new Guid("83fd5267-421b-4d07-b1c1-cfb51166f362"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("45618606-b773-41a4-ab00-efbb29024055"),
                            Column = "2",
                            Row = "2",
                            SeatNumber = "2",
                            SeatTypeID = new Guid("ab464da2-32db-4a80-b9ea-bbe6e43884f9"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.SeatType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SeatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SeatType", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("1068b750-30af-4ed9-83dc-1ca632349d33"),
                            SeatTypeName = "Ghế Vip"
                        },
                        new
                        {
                            ID = new Guid("83fd5267-421b-4d07-b1c1-cfb51166f362"),
                            SeatTypeName = "Ghế Thường"
                        },
                        new
                        {
                            ID = new Guid("ab464da2-32db-4a80-b9ea-bbe6e43884f9"),
                            SeatTypeName = "Ghế Đôi"
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat_ShowTime_Status", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShowTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SeatID");

                    b.ToTable("Seat_ShowTime_Status", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Service", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShiftChange", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewShift")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("RequetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkShiftID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("WorkShiftID");

                    b.ToTable("ShiftChange", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShowTime", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ShowTimes");

                    b.HasData(
                        new
                        {
                            ID = new Guid("7bc7f8a3-2e29-4cf9-9d7f-dd7b39490c89"),
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            StartTime = new TimeSpan(0, 14, 0, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("13a2549a-e5c0-4150-be76-0fd67d20190e"),
                            EndTime = new TimeSpan(0, 20, 30, 0, 0),
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Show_release", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRelease")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeRelease")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.ToTable("Show_release", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemasID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScreningID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatShowTimeStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Seat_Show_TimeStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Show_ReleaseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketPriceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CinemasID");

                    b.HasIndex("MovieID");

                    b.HasIndex("RoomID");

                    b.HasIndex("ScreningID");

                    b.HasIndex("SeatID");

                    b.HasIndex("Seat_Show_TimeStatusID");

                    b.HasIndex("Show_ReleaseID");

                    b.HasIndex("TicketPriceID");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.TicketPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ScreeningID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsersID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ScreeningID");

                    b.HasIndex("SeatID");

                    b.HasIndex("SeatTypeID");

                    b.HasIndex("ShowTimeID");

                    b.HasIndex("UsersID");

                    b.ToTable("TicketPrice", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Users", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adderss")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrBriht")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<bool>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .IsFixedLength();

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("25b83b3e-6854-42cb-bb70-98498535acc8"),
                            Adderss = "Ba Vi",
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1226),
                            DateOrBriht = new DateTime(2004, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            Gender = true,
                            Images = "images.jpg",
                            PassWord = "NFntFdqJ8gpEI8PihLzKSQ==",
                            PhoneNumber = "0862774830",
                            RoleID = new Guid("25d7afcb-949b-4717-a961-b50f2e18657d"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("5f24359b-a5e1-4c40-8630-d6e239cbc412"),
                            Adderss = "Ba Vi",
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1618),
                            DateOrBriht = new DateTime(2004, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "client@gmail.com",
                            FullName = "Client",
                            Gender = true,
                            Images = "images.jpg",
                            PassWord = "ym4Jwx/bO5i1P+4Xn4PslQ==",
                            PhoneNumber = "0334555555",
                            RoleID = new Guid("ba820c64-1a81-4c44-80ea-47038c930c3b"),
                            Status = 1
                        },
                        new
                        {
                            ID = new Guid("0575f7b2-b44c-4a28-a6f9-b4e90f4597a2"),
                            Adderss = "Ba Vi",
                            CreatedTime = new DateTime(2024, 11, 3, 9, 12, 49, 557, DateTimeKind.Local).AddTicks(1654),
                            DateOrBriht = new DateTime(2004, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@gmail.com",
                            FullName = "Staff",
                            Gender = true,
                            Images = "images.jpg",
                            PassWord = "Cb19hcCaeozLP7MB0dW0fQ==",
                            PhoneNumber = "0987126125",
                            RoleID = new Guid("56bece24-ba60-4b2b-801c-b68cfc8ccf9d"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStar")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("WorkShift", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Infrastructure.Database.Configuration.BookTickets", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("TicketID");

                    b.ToTable("BookTicket", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Bill", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.PaymentMethod", null)
                        .WithMany("BillDetail")
                        .HasForeignKey("PaymentMethodID");

                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("Bills")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.CategoryMovies", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("CategoryMovies")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.MovieType", "MovieType")
                        .WithMany("CategoryMovies")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MovieType");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Checkin", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.TicketPrice", "Tickets")
                        .WithMany()
                        .HasForeignKey("TicketsID");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.FoodCombo", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Bill", "Bills")
                        .WithMany("FoodCombos")
                        .HasForeignKey("BillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Service", "Service")
                        .WithMany("ServiceOders")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bills");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Movies", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Countrys", "Countrys")
                        .WithMany("Movies")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Language", "Lenguage")
                        .WithMany("Movies")
                        .HasForeignKey("LenguageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Countrys");

                    b.Navigation("Director");

                    b.Navigation("Genre");

                    b.Navigation("Lenguage");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Point", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("Points")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionUsers", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Promotion", "Promotion")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "User")
                        .WithMany("PromotionUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.RankMember", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("RankMembers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Cinemas", "Cinemas")
                        .WithMany("Rooms")
                        .HasForeignKey("CinemasID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", "Seats")
                        .WithMany("Rooms")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinemas");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("Screening")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Rooms")
                        .WithMany("Screenings")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.ShowTime", "ShowTime")
                        .WithMany("Screening")
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Rooms");

                    b.Navigation("ShowTime");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.SeatType", "SeatTypes")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SeatTypes");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat_ShowTime_Status", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", "Seat")
                        .WithMany("Seat_ShowTime_Status")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShiftChange", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.WorkShift", "WorkShift")
                        .WithMany("ShiftChanges")
                        .HasForeignKey("WorkShiftID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Show_release", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("Show_Releases")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Room")
                        .WithMany("Show_Releases")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Cinemas", "Cinemas")
                        .WithMany("TicketSeats")
                        .HasForeignKey("CinemasID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Movies", "Movies")
                        .WithMany("TicketSeats")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Room")
                        .WithMany("TicketSeats")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Screening", "Screenings")
                        .WithMany("Ticket")
                        .HasForeignKey("ScreningID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", "Seat")
                        .WithMany("TicketSeats")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat_ShowTime_Status", "Seat_Show_TimeStatus")
                        .WithMany("TicketSeats")
                        .HasForeignKey("Seat_Show_TimeStatusID");

                    b.HasOne("NeonCinema_Domain.Database.Entities.Show_release", "Show_Release")
                        .WithMany("TicketSeats")
                        .HasForeignKey("Show_ReleaseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.TicketPrice", "TicketPrices")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketPriceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cinemas");

                    b.Navigation("Movies");

                    b.Navigation("Room");

                    b.Navigation("Screenings");

                    b.Navigation("Seat");

                    b.Navigation("Seat_Show_TimeStatus");

                    b.Navigation("Show_Release");

                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.TicketPrice", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Screening", "Screening")
                        .WithMany("TicketPrice")
                        .HasForeignKey("ScreeningID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", null)
                        .WithMany("Ticket")
                        .HasForeignKey("SeatID");

                    b.HasOne("NeonCinema_Domain.Database.Entities.SeatType", "SeatTypes")
                        .WithMany("TicketPrice")
                        .HasForeignKey("SeatTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.ShowTime", "ShowTimes")
                        .WithMany("TicketPrices")
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", null)
                        .WithMany("Ticket")
                        .HasForeignKey("UsersID");

                    b.Navigation("Screening");

                    b.Navigation("SeatTypes");

                    b.Navigation("ShowTimes");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Users", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Users")
                        .WithMany("Workshifts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Infrastructure.Database.Configuration.BookTickets", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Users", "Customers")
                        .WithMany("BookTickets")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Tickets")
                        .WithMany("BookTickets")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Bill", b =>
                {
                    b.Navigation("FoodCombos");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Cinemas", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Countrys", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Language", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieType", b =>
                {
                    b.Navigation("CategoryMovies");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Movies", b =>
                {
                    b.Navigation("CategoryMovies");

                    b.Navigation("Screening");

                    b.Navigation("Show_Releases");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PaymentMethod", b =>
                {
                    b.Navigation("BillDetail");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.Navigation("PromotionUsers");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.Navigation("Screenings");

                    b.Navigation("Show_Releases");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.Navigation("Ticket");

                    b.Navigation("TicketPrice");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Seat_ShowTime_Status");

                    b.Navigation("Ticket");

                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.SeatType", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("TicketPrice");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat_ShowTime_Status", b =>
                {
                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Service", b =>
                {
                    b.Navigation("ServiceOders");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShowTime", b =>
                {
                    b.Navigation("Screening");

                    b.Navigation("TicketPrices");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Show_release", b =>
                {
                    b.Navigation("TicketSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.Navigation("BookTickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.TicketPrice", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Users", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("BookTickets");

                    b.Navigation("Points");

                    b.Navigation("PromotionUsers");

                    b.Navigation("RankMembers");

                    b.Navigation("Ticket");

                    b.Navigation("Workshifts");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.Navigation("ShiftChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
