// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeonCinema_Infrastructure.Database.AppDbContext;

#nullable disable

namespace NeonCinema_Infrastructure.Migrations
{
    [DbContext(typeof(NeonCenimaContext))]
    [Migration("20240824180145_Add-new")]
    partial class Addnew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Actor", b =>
                {
                    b.Property<Guid>("ActorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nchar(256)")
                        .IsFixedLength();

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("ActorID");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.BillDetail", b =>
                {
                    b.Property<Guid>("BillDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NumberOfProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .IsFixedLength();

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("PromotionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceOderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SoldDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillDetailID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("PromotionID");

                    b.HasIndex("ServiceOderID");

                    b.HasIndex("TicketID");

                    b.ToTable("BillDetail", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Cinema", b =>
                {
                    b.Property<Guid>("CinemaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClosingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CinemaID");

                    b.ToTable("Cinema", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Countrys", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Customers", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("DateOrBriht")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("SeenTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("CustomerID");

                    b.HasIndex("CreatedBy")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Director", b =>
                {
                    b.Property<Guid>("DirectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nchar(256)")
                        .IsFixedLength();

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("DirectorID");

                    b.ToTable("Director", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Employees", b =>
                {
                    b.Property<Guid>("EmployeesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOrBriht")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("EmployeesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("EmployeesID");

                    b.HasIndex("RoleID")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GenreID");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Lenguage", b =>
                {
                    b.Property<Guid>("LenguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LenguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LenguageID");

                    b.ToTable("Lenguage", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MemberShip", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Endow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0");

                    b.Property<Guid>("MemberShipID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0");

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieDetail", b =>
                {
                    b.Property<Guid>("MovieDetailID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DirectorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LenguageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScreeningID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StarTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieDetailID");

                    b.HasIndex("ActorID");

                    b.HasIndex("CountryID");

                    b.HasIndex("DirectorID");

                    b.HasIndex("GenreID");

                    b.HasIndex("LenguageID");

                    b.HasIndex("MovieTypeID");

                    b.ToTable("MovieDetail", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieType", b =>
                {
                    b.Property<Guid>("MovieTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MovieTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("MovieTypeID");

                    b.ToTable("MovieType", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Point", b =>
                {
                    b.Property<Guid>("PointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEarned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TotalPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .IsFixedLength();

                    b.HasKey("PointID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.Property<Guid>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<Guid>("PromotionTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<DateTime>("StarDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("proviso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("PromotionID");

                    b.HasIndex("PromotionTypeID");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionCustomer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionCustomer", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionType", b =>
                {
                    b.Property<Guid>("PromotionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PromotionTypeID");

                    b.ToTable("PromotionType", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Rating", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ratings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("TicketID");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.Property<Guid>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("SeatingCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.HasKey("RoomID");

                    b.HasIndex("CinemaID");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.RowofSeat", b =>
                {
                    b.Property<Guid>("RowofSeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RowofSeatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RowofSeatID");

                    b.ToTable("RowofSeats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.Property<Guid>("ScreeningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MovieDetailsID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScreeningDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShowTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ScreeningID");

                    b.HasIndex("MovieDetailsID");

                    b.HasIndex("RoomID");

                    b.ToTable("Screening", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.Property<Guid>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RowofSeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeatID");

                    b.HasIndex("RoomID");

                    b.HasIndex("SeatTypeID");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.SeatType", b =>
                {
                    b.Property<Guid>("SeatTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("SeatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatTypeID");

                    b.ToTable("SeatType", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ServiceID");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ServiceOder", b =>
                {
                    b.Property<Guid>("ServiceOderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ServiceOderID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceOder", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShiftChange", b =>
                {
                    b.Property<Guid>("ShiftChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewShift")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("RequetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkShiftID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShiftChangeID");

                    b.HasIndex("WorkShiftID");

                    b.ToTable("ShiftChange", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShowTime", b =>
                {
                    b.Property<Guid>("ShowTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ShowTimeID");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Surcharges", b =>
                {
                    b.Property<Guid>("surchargeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("surchargeID");

                    b.ToTable("Surcharges");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("123");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SeatID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowtimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SurchargesID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("SeatID");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.Property<Guid>("WorkShiftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStar")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkShiftID");

                    b.HasIndex("EmployeesID");

                    b.ToTable("WorkShift", (string)null);
                });

            modelBuilder.Entity("NeonCinema_Infrastructure.Database.Configuration.BookTickets", b =>
                {
                    b.Property<Guid>("BookTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TicketID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookTicketId");

                    b.ToTable("BookTickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.BillDetail", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Customers", "Customers")
                        .WithMany("BillDetail")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Employees", "Employees")
                        .WithMany("BillDetail")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("BillDetail")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Promotion", "Promotion")
                        .WithMany("BillDetail")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.ServiceOder", "ServiceOder")
                        .WithMany("BillDetail")
                        .HasForeignKey("ServiceOderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Ticket")
                        .WithMany("BillDetail")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Promotion");

                    b.Navigation("ServiceOder");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Customers", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.MemberShip", "MemberShips")
                        .WithOne("Customers")
                        .HasForeignKey("NeonCinema_Domain.Database.Entities.Customers", "CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Infrastructure.Database.Configuration.BookTickets", "BookTickets")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookTickets");

                    b.Navigation("MemberShips");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Employees", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Roles", "Roles")
                        .WithOne("Employees")
                        .HasForeignKey("NeonCinema_Domain.Database.Entities.Employees", "RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieDetail", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Actor", "Actor")
                        .WithMany("MovieDetails")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Countrys", "Countrys")
                        .WithMany("Moviesdetail")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Director", "Director")
                        .WithMany("MovieDetails")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Genre", "Genre")
                        .WithMany("MovieDetails")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Lenguage", "Lenguage")
                        .WithMany("MovieDetails")
                        .HasForeignKey("LenguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Employees", "Employees")
                        .WithMany("MovieDetails")
                        .HasForeignKey("MovieDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.MovieType", "MovieType")
                        .WithMany("MovieDetails")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Countrys");

                    b.Navigation("Director");

                    b.Navigation("Employees");

                    b.Navigation("Genre");

                    b.Navigation("Lenguage");

                    b.Navigation("MovieType");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Point", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Customers", "Customers")
                        .WithMany("Points")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.PromotionType", "PromotionType")
                        .WithMany("Promotions")
                        .HasForeignKey("PromotionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionType");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionCustomer", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Customers", "Customers")
                        .WithMany("PromotionCustomers")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("NeonCinema_Domain.Database.Entities.Promotion", "Promotion")
                        .WithMany("PromotionCustomers")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Rating", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Customers", "Customers")
                        .WithMany("Rating")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Ticket")
                        .WithMany("Rating")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Cinema", "Cinema")
                        .WithMany("Rooms")
                        .HasForeignKey("CinemaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.RowofSeat", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", "Seat")
                        .WithMany("RowofSeats")
                        .HasForeignKey("RowofSeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.MovieDetail", "MoviesDetails")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieDetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Room")
                        .WithMany("Screenings")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoviesDetails");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.SeatType", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ServiceOder", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Service", "Service")
                        .WithMany("ServiceOders")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShiftChange", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.WorkShift", "WorkShift")
                        .WithMany("ShiftChanges")
                        .HasForeignKey("WorkShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ShowTime", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Screening", "Screening")
                        .WithMany("ShowTimes")
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Ticket")
                        .WithMany("ShowTimes")
                        .HasForeignKey("ShowTimeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Surcharges", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Ticket", "Ticket")
                        .WithMany("Surcharges")
                        .HasForeignKey("surchargeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Customers", "Customers")
                        .WithMany("Ticket")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Seat", "Seats")
                        .WithMany("Ticket")
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NeonCinema_Infrastructure.Database.Configuration.BookTickets", "BookTickets")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonCinema_Domain.Database.Entities.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTickets");

                    b.Navigation("Customers");

                    b.Navigation("Screening");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.HasOne("NeonCinema_Domain.Database.Entities.Employees", "Employees")
                        .WithMany("WorkShifts")
                        .HasForeignKey("EmployeesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Actor", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Cinema", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Countrys", b =>
                {
                    b.Navigation("Moviesdetail");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Customers", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("Points");

                    b.Navigation("PromotionCustomers");

                    b.Navigation("Rating");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Director", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Employees", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("MovieDetails");

                    b.Navigation("WorkShifts");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Genre", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Lenguage", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MemberShip", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieDetail", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.MovieType", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PaymentMethod", b =>
                {
                    b.Navigation("BillDetail");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Promotion", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("PromotionCustomers");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.PromotionType", b =>
                {
                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Roles", b =>
                {
                    b.Navigation("Employees")
                        .IsRequired();
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Room", b =>
                {
                    b.Navigation("Screenings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Screening", b =>
                {
                    b.Navigation("ShowTimes");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Seat", b =>
                {
                    b.Navigation("RowofSeats");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Service", b =>
                {
                    b.Navigation("ServiceOders");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.ServiceOder", b =>
                {
                    b.Navigation("BillDetail");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.Ticket", b =>
                {
                    b.Navigation("BillDetail");

                    b.Navigation("Rating");

                    b.Navigation("ShowTimes");

                    b.Navigation("Surcharges");
                });

            modelBuilder.Entity("NeonCinema_Domain.Database.Entities.WorkShift", b =>
                {
                    b.Navigation("ShiftChanges");
                });

            modelBuilder.Entity("NeonCinema_Infrastructure.Database.Configuration.BookTickets", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
