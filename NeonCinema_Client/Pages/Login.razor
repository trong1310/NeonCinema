@page "/login"
@using NeonCinema_Application.DataTransferObject.User.Request
@using NeonCinema_Client.Pages.Client
@using System.IdentityModel.Tokens.Jwt
@layout LayoutClient
@inject NavigationManager _navi
@using NeonCinema_Client.Data.IServices.User
@inject IUserServices UserServices
@inject Blazored.LocalStorage.ILocalStorageService _localstorage
<body>
    <div class="background-video">
        <video autoplay muted loop id="bg-video">
            <source src="/images/Ngày 24.... trailer - Phim kinh dị - KC_ 22.04.2022.mp4" type="audio/mp4">
        </video>
    </div>
    <div class="login-container">
        <h1>Đăng Nhập</h1>
        <EditForm Model="@loginModel" OnValidSubmit="LoginAccount">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group">
                <label for="username">Email hoặc số điện thoại</label>
                <InputText id="username" class="form-control rounded" @bind-Value="loginModel.EmailorPhone" required />
            </div>
            <div class="input-group">
                <label for="password">Mật Khẩu</label>
                <InputText id="password" type="password" class="form-control rounded" @bind-Value="loginModel.Password" required />
            </div>
            <div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
            </div>
            <div class="d-flex justify-content-center">
                @if (isProcessing)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                else
                {
                    <button type="submit">Đăng Nhập</button>
                }

            </div>
            <div class="links">
                <div class="links">
                    <button type="button" class="btn btn-link" @onclick="OpenForgotPasswordDialog">Quên Mật Khẩu?</button>
                    <button type="button" class="btn btn-link">Đăng ký</button>
                </div>

            </div>
        </EditForm>
    </div>
    @if (showForgotPasswordDialog)
    {
        <div class="modal show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <EditForm Model="@forgotPassRequest" OnValidSubmit="@SubmitForgotPassword" class="needs-validation">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Quên mật khẩu</h5>
                            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseForgotPasswordDialog"></button>
                        </div>

                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label" style="color: black;">Email khôi phục</label>
                                <input type="email" class="form-control" @bind-value="forgotPassRequest.Email"
                                placeholder="Nhập email của bạn..." style="color:black; background-color: white">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseForgotPasswordDialog">Hủy</button>
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display: @(isLoading ? "inline-block" : "none");"></span>
                                Gửi yêu cầu
                            </button>                              
                        </div>
                        @if (!string.IsNullOrEmpty(responseMessage))
                        {
                            <div class="alert mt-3 alert-@(isSuccess ? "success" : "danger")" style="margin-left: 3px; margin-right: 3px;">
                                @responseMessage
                            </div>
                        }
                    </div>

                </EditForm>

            </div>
        </div>
    }
</body>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isProcessing;
    private string errorMessage;
    private string account;
    private string pass;
    HttpClient _http = new HttpClient();

    public async Task LoginAccount()
    {
        _localstorage.ClearAsync();
        isProcessing = true;
        errorMessage = null;

        try
        {

            var login = await _http.PostAsJsonAsync("https://localhost:7211/api/Login/Login", loginModel);

            if (login.IsSuccessStatusCode)
            {
                var response = await login.Content.ReadFromJsonAsync<LoginResponse>();

                if (response != null && !string.IsNullOrEmpty(response.Token))
                {
                    await _localstorage.SetItemAsync("authToken", response.Token);
                    var handler = new JwtSecurityTokenHandler();
                    var jwtToken = handler.ReadJwtToken(response.Token);
                    var roleName = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
                    if (roleName == "Client")
                    {
                        _navi.NavigateTo("/client-dashboard");
                    }
                    if (roleName == "Admin")
                    {
                        _navi.NavigateTo("/client-dashboard");
                    }
                    if (roleName == "Staff")
                    {
                        _navi.NavigateTo("/client-dashboard");
                    }
                   
                }
                else
                {
                    errorMessage = "Thông tin đăng nhập không chính xác";
                }
            }
            else
            {
                errorMessage = "Thông tin đăng nhập không chính xác";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra: {ex.Message}";
        }
        isProcessing = false;
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
    public class LoginModel
    {
        public string EmailorPhone { get; set; }  
        public string Password { get; set; }      
    }

    private bool showForgotPasswordDialog;
    private Forgotpass forgotPassRequest = new Forgotpass();
    private string responseMessage;
    private bool isLoading = false;
    private bool isSuccess = false;
    private void OpenForgotPasswordDialog()
    {
        showForgotPasswordDialog = true;

    }

    private void CloseForgotPasswordDialog()
    {
        showForgotPasswordDialog = false;
        responseMessage = string.Empty;
    }
    private async Task SubmitForgotPassword()
    {
        isLoading = true;
        responseMessage = string.Empty;
        try
        {
            var response = await UserServices.ForgotPass(forgotPassRequest);

            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                responseMessage = "Mật khẩu mới đã được gửi tới email của bạn. Vui lòng kiểm tra!";
            }
            else
            {
                isSuccess = false;
                responseMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            responseMessage = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

    <style>
        button.btn-link {
            background: none;
            border: none;
            color: #007bff;
            text-decoration: underline;
            cursor: pointer;
            padding: 0;
            font-size: 1rem;
        }

            button.btn-link:hover {
                border: none;
                color: #0056b3;
            }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: none;
            z-index: 1050;
            overflow: hidden;
            outline: 0;
        }

            .modal.show {
                display: block;
            }

    </style>