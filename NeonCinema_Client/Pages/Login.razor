@page "/login"
@using NeonCinema_Client.Pages.Clients
@using System.IdentityModel.Tokens.Jwt
@layout LayoutClient
@inject NavigationManager _navi

@inject Blazored.LocalStorage.ILocalStorageService _localStorage
<body>
    <div class="background-video">
        <video autoplay muted loop id="bg-video">
            <source src="/images/Ngày 24.... trailer - Phim kinh dị - KC_ 22.04.2022.mp4" type="audio/mp4">
        </video>
    </div>
    <div class="login-container">
        <h2>Đăng Nhập</h2>
        <EditForm Model="@loginModel">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group">
                <label for="username">Email hoặc số điện thoại</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.EmailorPhone" required />
            </div>
            <div class="input-group">
                <label for="password">Mật Khẩu</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" required />
            </div>
            <div class="d-flex justify-content-center">
                <button onclick="@LoginAccount()">Đăng Nhập</button>
                
            </div>
            <div class="links">
                <a href="#">Quên Mật Khẩu?</a>
                <a href="#">Đăng ký</a>
            </div>
        </EditForm>
    </div>
</body>

@if (isProcessing)
{
    <p>Processing...</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isProcessing;
    private string errorMessage;
    HttpClient _http = new HttpClient();

    public async Task LoginAccount()
    {
        isProcessing = true;
        errorMessage = null; // Reset error message before processing

        try
        {
            // Gửi yêu cầu POST tới API
            var login = await _http.PostAsJsonAsync("https://localhost:7211/api/Login/Login", loginModel);

            // Kiểm tra mã trạng thái HTTP
            if (login.IsSuccessStatusCode)
            {
                try
                {
                    // Thử đọc phản hồi JSON
                    var result = await login.Content.ReadFromJsonAsync<TokenResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.Token))
                    {
                        var handler = new JwtSecurityTokenHandler().ReadJwtToken(result.Token);

                        // Lưu token vào localStorage hoặc sessionStorage
                        await _localStorage.SetItemAsync("authToken", result.Token);
                        _navi.NavigateTo("/cinemaslist");
                    }
                    else
                    {
                        errorMessage = "Token không hợp lệ .";
                    }
                }
                catch (Exception ex)
                {
                    // Bắt và xử lý lỗi khi đọc JSON
                    errorMessage = $"Lỗi khi xử lý JSON: {ex.Message}";
                }
            }
            else
            {
                // Xử lý khi yêu cầu không thành công
                var error = await login.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi từ API: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra: {ex.Message}";
        }

        isProcessing = false;
    }

    // Mô hình đăng nhập
    public class LoginModel
    {
        public string EmailorPhone { get; set; }
        public string Password { get; set; }
    }

    // Phản hồi từ API
    private class TokenResponse
    {
        public string Token { get; set; }
    }
}