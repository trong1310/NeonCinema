@page "/UpdateSeatType/{seatTypeId:guid}"

@using NeonCinema_Application.DataTransferObject.SeatTypes
@using NeonCinema_Client.Data.IServices.SeatType
@using NeonCinema_Client.Pages.Admin
@inject ISeatTypeService SV
@inject NavigationManager NavigationManager
@layout LayoutAdmin

<h3 style="margin-top: 30px" class="text-center mb-4">Update SeatType</h3>

@if (seatType == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="STT1">
        <EditForm Model="seatType" OnValidSubmit="HandleValidSubmit" class="form-container">
            <div class="mb-3">
                <label class="form-label">Seat Type Name:</label>
                <InputText @bind-Value="seatType.SeatTypeName" class="form-control" />
                <ValidationMessage For="@(() => seatType.SeatTypeName)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger">@errorMessage</div>
            }


            <button type="submit" class="btn btn-success">
                <i  class="fas fa-save"></i>   Lưu
            </button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">
                <i  class="fas fa-times"></i>   Hủy
            </button>
        </EditForm>
    </div>
}
<style>
    .STT1 {
        width: 50%;
        margin: 0 auto;
    }
</style>
@code {
    

    [Parameter] public Guid seatTypeId { get; set; }
    private SeatTypeDTO seatType = new SeatTypeDTO();
    private string errorMessage;
    protected override async Task OnInitializedAsync()
    {
        seatType = await SV.GetByIdSeatType(seatTypeId);
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(seatType.SeatTypeName))
        {
            errorMessage = "Seat Type Name không được để trống.";
            return;
        }
        var existingSeatTypes = await SV.GetAllSeatType();
        if (existingSeatTypes.Any(st => st.SeatTypeName == seatType.SeatTypeName))
        {
            errorMessage = "Seat Type Name đã tồn tại.";
            return;
        }
        errorMessage = string.Empty; 
        var update = new UpdateSeatTypeDTO
            {
                ID = seatType.ID,
                Price = seatType.Price,
                SeatTypeName = seatType.SeatTypeName
            };
        await SV.UpdateSeatTYpe(seatType.ID, update);
        
        NavigationManager.NavigateTo("/listSeatType");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/listSeatType");
    }
}
