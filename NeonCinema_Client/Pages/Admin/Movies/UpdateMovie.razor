@page "/movie-update/{id:guid}"
@using NeonCinema_Application.DataTransferObject.ActorMoives
@using NeonCinema_Application.DataTransferObject.Actors
@using NeonCinema_Application.DataTransferObject.Countrys
@using NeonCinema_Application.DataTransferObject.Directors
@using NeonCinema_Application.DataTransferObject.Genre
@using NeonCinema_Application.DataTransferObject.Language
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Application.Pagination
@using NeonCinema_Client.Data.IServices.IMoviesServices
@using System.Text.Json
@using NeonCinema_Domain.Enum
@using NeonCinema_Infrastructure.Database.AppDbContext
@inject IMovieservices _movieServices
@inject HttpClient _http
@inject NavigationManager _navigation
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<div class="container-fluid mt-5">
	<h2 class="text-center mb-4 font-weight-bold">Sửa thông tin phim</h2>
	<div class="row">
		<div class="col-md-3 text-center mb-4 mt-5">
			<img src="@profileFilmsImage" alt="Profile" class="img-fluid profile-pic" /> <br />
			<label class="custom-file-upload">
				<i class="material-icons">cloud_upload</i>
				<InputFile OnChange="HandleSelected" class="d-none" />
				<span>Chọn ảnh</span>
				@if (!string.IsNullOrEmpty(errorImages))
				{
					<span class="text-danger">@errorImages</span>
				}
			</label>
		</div>
		<div class="col-md-9" style="margin-top:10px;">
			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for="name" class="font-weight-bold">Tên Phim</label>
						<input type="text" class="form-control" @bind-value="@movieDto.Name" />
						@if (!string.IsNullOrEmpty(errorName))
						{
							<span class="text-danger">@errorName</span>
						}
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for="Duration" class="font-weight-bold">Thời Lượng</label>
						<input type="text" class="form-control" @bind-value="@movieDto.Duration" />
						@if (!string.IsNullOrEmpty(errorDuration))
						{
							<span class="text-danger">@errorDuration</span>
						}
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for="Trailer" class="font-weight-bold">Trailer</label>
						<input type="text" class="form-control" @bind-value="@movieDto.Trailer" />
						@if (!string.IsNullOrEmpty(errorTrailer))
						{
							<span class="text-danger">@errorTrailer</span>
						}
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for="StarTime" class="font-weight-bold">Ngày phát hành</label>
						<input type="date" class="form-control" @bind-value="@movieDto.StarTime" />
						@if (!string.IsNullOrEmpty(errorStarTime))
						{
							<span class="text-danger">@errorStarTime</span>
						}
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for="AgeAllowed" class="font-weight-bold">Độ tuổi cho phép</label>
						<input type="text" class="form-control" @bind-value="@movieDto.AgeAllowed" />
						@if (!string.IsNullOrEmpty(errorAllowAge))
						{
							<span class="text-danger">@errorAllowAge</span>
						}
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for="Actor" class="font-weight-bold">Diễn viên</label>
						<div class="position-relative">
							<input type="text" class="form-control" id="Actor" placeholder="Chọn diễn viên"
								   value="@selectedActorsText" readonly />
							<i class="material-icons add-icon" @onclick="OpenActorDialog">add_circle</i>
							@if (!string.IsNullOrEmpty(errorActor))
							{
								<span class="text-danger">@errorActor</span>
							}
						</div>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for="Genre" class="font-weight-bold">Thể loại</label>
						<div class="position-relative">
							<select @bind="movieDto.GenreName" class="form-control">
								<option value="" disabled selected>Chọn thể loại</option>
								@foreach (var genre in genres)
								{
									<option value="@genre.GenreName">@genre.GenreName</option>
								}
								@if (!string.IsNullOrEmpty(errorGenres))
								{
									<span class="text-danger">@errorGenres</span>
								}
							</select>
							<i class="material-icons add-icon-genre" @onclick="OpenGenreDialog">add_circle</i>
						</div>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for="Language" class="font-weight-bold">Ngôn ngữ</label>
						<div class="position-relative">
							<select @bind="movieDto.LanguareName" class="form-control">
								<option value="" disabled selected>Chọn ngôn ngữ</option>
								@foreach (var language in languages)
								{
									<option value="@language.LanguageName">@language.LanguageName</option>
								}
								@if (!string.IsNullOrEmpty(errorLanguage))
								{
									<span class="text-danger">@errorLanguage</span>
								}
							</select>
							<i class="material-icons add-icon-genre" @onclick="OpenLanguageDialog">add_circle</i>
						</div>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label for="Country" class="font-weight-bold">Quốc gia</label>
						<div class="position-relative">
							<select @bind="movieDto.CountryName" class="form-control">
								<option value="" disabled selected>Chọn quốc gia</option>
								@foreach (var country in countries)
								{
									<option value="@country.CountryName">@country.CountryName</option>
								}
								@if (!string.IsNullOrEmpty(errorCountry))
								{
									<span class="text-danger">@errorCountry</span>
								}
							</select>
							<i class="material-icons add-icon-genre" @onclick="OpenCountryDialog">add_circle</i>
						</div>
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for="Director" class="font-weight-bold">Đạo diễn</label>
						<div class="position-relative">
							<select @bind="movieDto.DirectorName" class="form-control">
								<option value="" disabled selected>Chọn đạo diễn</option>
								@foreach (var director in directors)
								{
									<option value="@director.FullName">@director.FullName</option>
								}
								@if (!string.IsNullOrEmpty(errorDirector))
								{
									<span class="text-danger">@errorDirector</span>
								}
							</select>
							<i class="material-icons add-icon-genre" @onclick="OpenDirectorDialog">add_circle</i>
						</div>
					</div>
				</div>
			</div>


			<div class="row">
				<div class="col-md-6">
					<div class="form-group">
						<label>Trạng thái</label>
						<select class="form-select" @bind="movieDto.Status">
							<option value="" disabled selected>Chọn trạng thái</option>
							@foreach (var status in Enum.GetValues(typeof(MovieStatus)).Cast<MovieStatus>())
							{
								<option value="@status">@status.ToString()</option>
							}
						</select>
						@* <ValidationMessage For="@(() => request.Status)" /> *@
					</div>
				</div>
				<div class="col-md-6">
					<div class="form-group">
						<label for="Country" class="font-weight-bold">Phụ đề</label>
						<div class="position-relative">
							<select class="form-control">
								<option value="">Chọn phụ đề</option>
								<option value="">2D</option>
								<option value="">3D</option>

							</select>
							<i class="material-icons add-icon-genre" @onclick="OpenSubtitlesDialog">add_circle</i>
						</div>
					</div>
				</div>
			</div>

			<div class="form-group">
				<label for="Description" class="font-weight-bold">Mô tả</label>
				<textarea class="form-control" rows="3" @bind="@movieDto.Description"></textarea>
			</div>

			<div class="text-center">
				<button @onclick="HandleSubmit" class="btn btn-success btn-lg">Lưu</button>
				<button type="button" class="btn btn-warning btn-lg">Quay lại</button>
			</div>
		</div>
	</div>
	@if (isActorModalOpen)
	{
		<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Chọn diễn viên</h5>
						<button type="button" class="close" @onclick="CloseActorDialog" aria-label="Close">
							<span class="material-icons" aria-hidden="true">close</span>
						</button>
					</div>
					<div class="modal-body" style="margin-bottom: -20px">
						<div class="row mb-3">
							@foreach (var actor in actors.Data)
							{
								<div class="col-4 d-flex align-items-center justify-content-center">
									<input class="form-check-input me-2"
										   type="checkbox"
										   id="@actor.ID"
										   checked="@actor.IsChecked"
										   @onchange="(e) => ToggleActorSelection(actor.ID, (bool)e.Value)" />
									<label class="form-check-label" for="@actor.ID">@actor.FullName</label>
								</div>
							}

						</div>
					</div>
					<hr />
					<div class="modal-header" style="margin-top: -15px">
						<h5 class="modal-title">Thêm diễn viên</h5>
					</div>
					<div class="modal-body add-actor d-flex justify-content-center">
						<div class="row mb-3 justify-content-center align-items-center">
							<div class="col-5 d-flex flex-column justify-content-center align-items-center">
								<div class="form-group  text-center">
									<label class="font-weight-bold mb-2">Tên Diễn Viên</label>
									<input type="text" class="form-control" placeholder="Nhập tên diễn viên" />
								</div>
							</div>
							<div class="col-4 d-flex flex-column justify-content-center align-items-center">
								<div class="form-group  text-center">
									<label class="font-weight-bold mb-2">Trạng Thái</label>
									<select class="form-control custom-select">
										<option value="" disabled selected>Chọn trạng thái</option>
										<option value="Active">Hoạt động</option>
										<option value="Inactive">Không hoạt động</option>
									</select>
								</div>
							</div>
							<div class="col-3 d-flex justify-content-center align-items-center">
								<button class="btn btn-primary">Thêm</button>
							</div>
						</div>
					</div>

					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="CloseActorDialog">Đóng</button>
						<button type="button" class="btn btn-primary" @onclick="SelectActors">Chọn diễn viên</button>
					</div>
				</div>
			</div>
		</div>
	}
	@if (isGenreModalOpen)
	{
		<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Thêm thể loại</h5>
						<button type="button" class="close" @onclick="CloseGenreDialog" aria-label="Close">
							<span class="material-icons" aria-hidden="true">close</span>
						</button>
					</div>
					<div class="modal-body" style="margin-bottom: -20px">
						<div class="form-group">
							<label for="newGenre" class="font-weight-bold">Tên thể loại</label>
							<input type="text" id="newGenre" class="form-control" @bind="newGenreName" placeholder="Nhập tên thể loại" style="margin-left: 0px" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="CloseGenreDialog">Hủy</button>
						<button type="button" class="btn btn-primary">Thêm</button>
					</div>
				</div>
			</div>
		</div>
	}
	<!-- Modals for Ngôn ngữ, Quốc gia, Đạo diễn -->
	@if (isLanguageModalOpen)
	{
		<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Thêm ngôn ngữ</h5>
						<button type="button" class="close" @onclick="CloseLanguageDialog" aria-label="Close">
							<span class="material-icons" aria-hidden="true">close</span>
						</button>
					</div>
					<div class="modal-body" style="margin-bottom: -20px">
						<div class="form-group">
							<label for="newLanguage" class="font-weight-bold">Tên ngôn ngữ</label>
							<input type="text" id="newLanguage" class="form-control" @bind="newLanguageName" placeholder="Nhập tên ngôn ngữ" style="margin-left: 0px" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="CloseLanguageDialog">Hủy</button>
						<button type="button" class="btn btn-primary">Thêm</button>
					</div>
				</div>
			</div>
		</div>
	}
	@if (isCountryModalOpen)
	{
		<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Thêm quốc gia</h5>
						<button type="button" class="close" @onclick="CloseCountryDialog" aria-label="Close">
							<span class="material-icons" aria-hidden="true">close</span>
						</button>
					</div>
					<div class="modal-body" style="margin-bottom: -20px">
						<div class="form-group">
							<label for="newCountry" class="font-weight-bold">Tên quốc gia</label>
							<input type="text" id="newCountry" class="form-control" @bind="newCountryName" placeholder="Nhập tên quốc gia" style="margin-left: 0px" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="CloseCountryDialog">Hủy</button>
						<button type="button" class="btn btn-primary">Thêm</button>
					</div>
				</div>
			</div>
		</div>
	}
	@if (isDirectorModalOpen)
	{
		<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Thêm đạo diễn</h5>
						<button type="button" class="close" @onclick="CloseDirectorDialog" aria-label="Close">
							<span class="material-icons" aria-hidden="true">close</span>
						</button>
					</div>
					<div class="modal-body" style="margin-bottom: -20px">
						<div class="form-group">
							<label for="newDirector" class="font-weight-bold">Tên đạo diễn</label>
							<input type="text" id="newDirector" class="form-control" @bind="newDirectorName" placeholder="Nhập tên đạo diễn" style="margin-left: 0px" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="CloseDirectorDialog">Hủy</button>
						<button type="button" class="btn btn-primary">Thêm</button>
					</div>
				</div>
			</div>
		</div>
	}
	@if (isSubtitlesModalOpen)
	{
		<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Thêm phụ đề</h5>
						<button type="button" class="close" @onclick="CloseSubtitlesDialog" aria-label="Close">
							<span class="material-icons" aria-hidden="true">close</span>
						</button>
					</div>
					<div class="modal-body" style="margin-bottom: -20px">
						<div class="form-group">
							<label class="font-weight-bold">Tên phụ đề</label>
							<input type="text" class="form-control" placeholder="Nhập tên phụ đề" style="margin-left: 0px" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="CloseSubtitlesDialog">Hủy</button>
						<button type="button" class="btn btn-primary">Thêm</button>
					</div>
				</div>
			</div>
		</div>
	}
</div>


@code {
	// Các tham số và biến đã khai báo sẵn
	[Parameter] public Guid id { get; set; }
	private MovieDTO movieDto = new MovieDTO();
	private IBrowserFile selectedFile;
	private bool isActorModalOpen = false;
	List<GenreDTO> genres = new List<GenreDTO>();
	List<LanguageDTO> languages = new List<LanguageDTO>();
	List<CountryDTO> countries = new List<CountryDTO>();
	List<DirectorDTO> directors = new List<DirectorDTO>();
	private CreateActorMoviesRequest requestmovies = new CreateActorMoviesRequest();
	private ViewActorRequest requestActor = new ViewActorRequest();
	PaginationResponse<ActorDTO> actors = new PaginationResponse<ActorDTO>();
	private UpdateMovieRequest request = new UpdateMovieRequest();
	private string profileFilmsImage = "";
	protected override async Task OnInitializedAsync()
	{
		actors = await _movieServices.GetActor(requestActor);
		movieDto = await _movieServices.GetMovieById(id);
		genres = await _movieServices.GetAllGenre();
		languages = await _movieServices.GetAllLanguage();
		countries = await _movieServices.GetAllCountry();
		directors = await _movieServices.GetAllDirector();
		profileFilmsImage = GetImageUrl(movieDto.Images);
		var linkedActors = await _movieServices.GetActorsByFilmAsync(movieDto.ID, CancellationToken.None);
		foreach (var actor in actors.Data)
		{
			actor.IsChecked = linkedActors.Any(la => la.ActorID == actor.ID); // Đặt trạng thái checkbox
			if (actor.IsChecked)
			{
				selectedActors.Add(actor.ID);
			}
		}
		UpdateSelectedActorsText();
	}
	private void UpdateSelectedActorsText()
	{
		selectedActorsText = string.Join(", ", actors.Data
			.Where(a => selectedActors.Contains(a.ID))
			.Select(a => a.FullName));
	}

	private bool isEditing = false;
	#region update
	private bool showConfirmModal = false;
	private string? errorName = null;
	private string? errorDuration = null;
	private string? errorTrailer = null;
	private string? errorImages = null;
	private string? errorStarTime = null;
	private string? errorAllowAge = null;
	private string? errorActor = null;
	private string? errorDirector = null;
	private string? errorMovieType = null;
	private string? errorLanguage = null;
	private string? errorCountry = null;
	private string? errorGenres = null;
	private string? errorDescription = null;
	private string? errorSub = null;
	private readonly NeonCinemasContext _context = new NeonCinemasContext();
	private void ShowConfirmModal()
	{
		var flimsNameExits = _context.Movies.FirstOrDefault(x => !string.IsNullOrEmpty(request.Name) && x.Name.ToLower().Equals(request.Name.ToLower()));
		bool isValid = true;
		if (flimsNameExits != null)
		{
			errorName = "Phim đã tồn tại";
			isValid = false;
		}
		else if (string.IsNullOrEmpty(request.Name))
		{
			errorName = "Tên phim không được để trống";
			isValid = false;
		}
		else
		{
			errorName = null;
		}
		if (request.Duration < 60)
		{
			errorDuration = "Thời lượng phải lớn hơn 60 phút";
			isValid = false;
		}
		else
		{
			errorDuration = null;
		}
		if (request.AgeAllowed < 13)
		{
			errorAllowAge = "Độ tuổi cho phép phải lớn hơn 13";
			isValid = false;
		}
		else
		{
			errorAllowAge = null;
		}
		if (request.Sub == null)
		{
			errorSub = "Vui lòng chọn phụ đề";
			isValid = false;
		}
		else
		{
			errorSub = null;
		}
		if (request.StarTime <= DateTime.UtcNow)
		{
			errorStarTime = "Ngày phát hành phải lớn hơn ngày hiện tại ít nhất 1 ngày";
			isValid = false;
		}
		else
		{
			errorStarTime = null;
		}
		if (string.IsNullOrEmpty(request.Description))
		{
			errorDescription = "Mô tả không được để trống";
			isValid = false;
		}
		else
		{
			errorDescription = null;
		}
		if (string.IsNullOrEmpty(request.Trailer))
		{
			errorTrailer = "Trailer không được để trống";
			isValid = false;
		}
		else
		{
			errorTrailer = null;
		}
		if (string.IsNullOrEmpty(profileFilmsImage))
		{
			errorImages = "Ảnh không được để trống";
			isValid = false;
		}
		else
		{
			errorImages = null;
		}
		if (selectedActorsText == null)
		{
			errorActor = "Vui lòng chọn ít nhất một diễn viên cho phim";
			isValid = false;
		}
		else
		{
			errorActor = null;
		}
		if (string.IsNullOrEmpty(request.GenreID.ToString()))
		{
			errorGenres = "Vui lòng chọn thể loại";
			isValid = false;
		}
		else
		{
			errorGenres = null;
		}
		if (string.IsNullOrEmpty(request.LenguageID.ToString()))
		{
			errorLanguage = "Vui lòng chọn ngôn ngữ";
			isValid = false;
		}
		else
		{
			errorLanguage = null;
		}
		if (string.IsNullOrEmpty(request.DirectorID.ToString()))
		{
			errorDirector = "Vui lòng chọn đạo diễn";
			isValid = false;
		}
		else
		{
			errorDirector = null;
		}
		if (string.IsNullOrEmpty(request.CountryID.ToString()))
		{
			errorCountry = "Vui lòng chọn quốc gia";
			isValid = false;
		}
		else
		{
			errorCountry = null;
		}
		showConfirmModal = isValid;
	}
	private void ToggleEdit()
	{
		isEditing = !isEditing;
	}
	private async Task HandleSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
		var imageUrl = await GetImageUrlUpdate(selectedFile);
		if (imageUrl != null)
		{
			Console.WriteLine(imageUrl); // Kiểm tra giá trị URL
			profileFilmsImage = imageUrl;
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Invalid image file");
		}
	}

	private async Task<string> GetImageUrlUpdate(IBrowserFile file)
	{
		// Chỉ tạo URL cho các tệp hình ảnh
		if (file.ContentType.StartsWith("image/"))
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
			return $"data:{file.ContentType};base64,{imageBase64}";
		}

		return null;
	}
	private void OpenActorDialog()
	{
		isActorModalOpen = true; // Mở modal
	}

	private void CloseActorDialog()
	{
		isActorModalOpen = false; // Đóng modal
	}
	private void SelectActors()
	{
		CloseActorDialog();
	}
	private List<Guid> selectedActors = new List<Guid>();
	private string selectedActorsText = string.Empty;
	private void ToggleActorSelection(Guid actorId, bool isSelected)
	{
		if (isSelected)
		{
			if (!selectedActors.Contains(actorId))
				selectedActors.Add(actorId);
		}
		else
		{
			selectedActors.Remove(actorId);
		}
		var actor = actors.Data.FirstOrDefault(a => a.ID == actorId);
		if (actor != null)
		{
			actor.IsChecked = isSelected; // Cập nhật trạng thái IsChecked
		}

		// Cập nhật chuỗi hiển thị
		UpdateSelectedActorsText();
	}
	private async Task NavigateToList()
	{
		_navigation.NavigateTo("/list-movie-admin");
	}
	private async Task HandleSubmit()
	{
		try
		{
			// Lấy danh sách diễn viên được chọn từ giao diện hiện tại
			var selectedActorIDs = actors.Data
				.Where(a => a.IsChecked) // Lọc ra các diễn viên có checkbox được tích
				.Select(a => a.ID)
				.ToList();

			// Tạo đối tượng UpdateMovieRequest
			request = new UpdateMovieRequest
				{
					ID = movieDto.ID,
					Images = movieDto.Images,
					Duration = (int)movieDto.Duration,
					Status = (MovieStatus)movieDto.Status,
					StarTime = movieDto.StarTime,
					Description = movieDto.Description,
					AgeAllowed = (int)movieDto.AgeAllowed,
					Name = movieDto.Name,
					Trailer = movieDto.Trailer,
					CountryID = countries.FirstOrDefault(x => x.CountryName == movieDto.CountryName)?.ID ?? Guid.Empty,
					DirectorID = directors.FirstOrDefault(x => x.FullName == movieDto.DirectorName)?.ID ?? Guid.Empty,
					GenreID = genres.FirstOrDefault(x => x.GenreName == movieDto.GenreName)?.ID ?? Guid.Empty,
					LenguageID = languages.FirstOrDefault(x => x.LanguageName == movieDto.LanguareName)?.ID ?? Guid.Empty,
					ActorMovies = selectedActorIDs // Gửi danh sách diễn viên được chọn
				};

			// Kiểm tra dữ liệu hợp lệ
			if (request.CountryID == Guid.Empty || request.DirectorID == Guid.Empty ||
				request.GenreID == Guid.Empty || request.LenguageID == Guid.Empty)
			{
				Console.WriteLine("Dữ liệu không hợp lệ (Quốc gia, Đạo diễn, Thể loại, Ngôn ngữ).");
				return;
			}

			// Gửi yêu cầu cập nhật
			var response = await _movieServices.Update(request);
			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine("Cập nhật phim và diễn viên thành công.");
				_navigation.NavigateTo("/list-movie-admin");
			}
			else
			{
				Console.WriteLine($"Có lỗi xảy ra khi cập nhật phim: {response.Content}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Lỗi: {ex.Message}");
			Console.WriteLine($"Chi tiết ngoại lệ: {ex.StackTrace}");
		}
	}

	#endregion
	#region detail
	private string GetImageUrl(string imageUrl)
	{
		return $"https://localhost:7211/api/Resources/{imageUrl}";
	}
	#endregion

	#region Thêm nhanh
	private bool isGenreModalOpen = false;
	private string newGenreName = string.Empty;

	private void OpenGenreDialog()
	{
		isGenreModalOpen = true;
	}

	private void CloseGenreDialog()
	{
		isGenreModalOpen = false;
		newGenreName = string.Empty; // Xóa dữ liệu nhập sau khi đóng
	}
	private bool isLanguageModalOpen = false;
	private bool isCountryModalOpen = false;
	private bool isDirectorModalOpen = false;
	private bool isSubtitlesModalOpen = false;

	private string newLanguageName = string.Empty;
	private string newCountryName = string.Empty;
	private string newDirectorName = string.Empty;
	private string newSubtitlesrName = string.Empty;

	// Language
	private void OpenLanguageDialog() => isLanguageModalOpen = true;
	private void CloseLanguageDialog()
	{
		isLanguageModalOpen = false;
		newLanguageName = string.Empty;
	}
	// private async Task AddNewLanguage()
	// {
	// 	if (string.IsNullOrWhiteSpace(newLanguageName)) return;
	// 	var newLanguage = new LanguageDTO { LanguageName = newLanguageName };
	// 	var response = await _movieServices.CreateLanguage(newLanguage);
	// 	if (response.IsSuccessStatusCode)
	// 	{
	// 		languages = await _movieServices.GetAllLanguage();
	// 		CloseLanguageDialog();
	// 	}
	// }

	// Country
	private void OpenCountryDialog() => isCountryModalOpen = true;
	private void CloseCountryDialog()
	{
		isCountryModalOpen = false;
		newCountryName = string.Empty;
	}
	// private async Task AddNewCountry()
	// {
	// 	if (string.IsNullOrWhiteSpace(newCountryName)) return;
	// 	var newCountry = new CountryDTO { CountryName = newCountryName };
	// 	var response = await _movieServices.CreateCountry(newCountry);
	// 	if (response.IsSuccessStatusCode)
	// 	{
	// 		countries = await _movieServices.GetAllCountry();
	// 		CloseCountryDialog();
	// 	}
	// }

	// Director
	private void OpenDirectorDialog() => isDirectorModalOpen = true;
	private void CloseDirectorDialog()
	{
		isDirectorModalOpen = false;
		newDirectorName = string.Empty;
	}
	// private async Task AddNewDirector()
	// {
	// 	if (string.IsNullOrWhiteSpace(newDirectorName)) return;
	// 	var newDirector = new DirectorDTO { FullName = newDirectorName };
	// 	var response = await _movieServices.CreateDirector(newDirector);
	// 	if (response.IsSuccessStatusCode)
	// 	{
	// 		directors = await _movieServices.GetAllDirector();
	// 		CloseDirectorDialog();
	// 	}
	// }
	// private async Task AddNewGenre()
	// {
	// 	if (string.IsNullOrWhiteSpace(newGenreName))
	// 	{
	// 		Console.WriteLine("Tên thể loại không được để trống.");
	// 		return;
	// 	}

	// 	try
	// 	{
	// 		// Tạo yêu cầu thêm thể loại mới
	// 		var newGenre = new GenreDTO { GenreName = newGenreName };

	// 		var response = await _movieServices.CreateGenre(newGenre);
	// 		if (response.IsSuccessStatusCode)
	// 		{
	// 			Console.WriteLine("Thêm thể loại thành công.");
	// 			// Cập nhật danh sách thể loại
	// 			genres = await _movieServices.GetAllGenre();
	// 			CloseGenreDialog();
	// 		}
	// 		else
	// 		{
	// 			Console.WriteLine("Lỗi khi thêm thể loại.");
	// 		}
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Console.WriteLine($"Lỗi: {ex.Message}");
	// 	}
	// }

	//Phụ đề
	private void OpenSubtitlesDialog() => isSubtitlesModalOpen = true;
	private void CloseSubtitlesDialog()
	{
		isSubtitlesModalOpen = false;
		newSubtitlesrName = string.Empty;
	}
	#endregion
}
<style>
	body {
		background-color: #f4f4f9;
	}

	.card {
		border-radius: 10px;
		background-color: white;
		max-width: 1000px;
		margin: auto;
	}

	h2 {
		font-family: 'Arial', sans-serif;
		color: #333;
	}

	.profile-pic {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border: 3px solid #eaeaea;
		margin-left: -15px; /* Shift image slightly left */
		height: 350px;
		width: 250px;
	}

	label {
		font-size: 14px;
		color: #555;
	}

	input, select, textarea {
		border-radius: 5px;
		border: 1px solid #ccc;
		padding: 10px;
		margin-left: -20px; /* Shift input fields slightly left */
	}

	.form-control:focus {
		border-color: #007bff;
		box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
	}

	textarea {
		resize: none;
	}

	.btn-primary {
		background-color: #007bff;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

		.btn-primary:hover {
			background-color: #0056b3;
		}

	.btn-secondary {
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

	.form-group {
		margin-bottom: 1.5rem;
	}


	img {
		margin-top: 20px;
		width: 270px;
		height: 400px;
	}

	.custom-file-upload {
		display: flex;
		align-items: center; /* Căn giữa theo chiều dọc */
		justify-content: center; /* Căn giữa theo chiều ngang */
		margin-top: 10px;
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 10px;
		background-color: #a9a9a9; /* Màu nền của nút */
		color: white; /* Màu chữ */
		border: none; /* Bỏ viền */
		text-align: center;
		width: 150px;
		margin-left: auto;
		margin-right: auto;
	}

		.custom-file-upload span {
			margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
		}

		.custom-file-upload:hover {
			background-color: #8f8f8f; /* Màu nền khi hover */
		}


	.btn-success {
		background-color: #007bff;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

		.btn-success:hover {
			background-color: #0056b3;
		}

	.btn-warning {
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

	.add-actor {
		display: flex;
		justify-content: center;
	}

		.add-actor .row {
			display: flex;
			align-items: center; /* Căn giữa các cột theo chiều dọc */
			justify-content: center; /* Tạo khoảng cách đều giữa các cột */
			margin-left: 5px;
		}

		.add-actor .form-group {
			margin-bottom: 0; /* Loại bỏ khoảng cách không cần thiết */
			text-align: center;
		}

		.add-actor label {
			display: block;
			text-align: left; /* Đảm bảo label được canh trái */
		}

		.add-actor button {
			margin-top: 1.9rem; /* Đẩy nút xuống để căn ngang với input và select */
		}

	.custom-select {
		min-width: 150px; /* Đặt chiều rộng tối thiểu */
	}

	.modal-body .add-actor {
		max-width: 100%; /* Đảm bảo input và select không vượt quá giới hạn cột */
	}

	.add-icon {
		position: absolute;
		right: 30px; /* Khoảng cách từ icon đến bên phải */
		top: 50%; /* Đặt icon giữa theo chiều dọc */
		transform: translateY(-50%); /* Điều chỉnh lại vị trí để icon thực sự nằm giữa */
		cursor: pointer;
		color: black; /* Màu của icon, có thể thay đổi nếu muốn */
		font-size: 24px; /* Kích thước của icon */
	}

	.add-icon-genre {
		position: absolute !important;
		right: 30px !important; /* Đặt khoảng cách từ lề phải của select */
		top: 50% !important; /* Đưa icon vào giữa theo chiều dọc */
		transform: translateY(-50%) !important; /* Căn chỉnh chính xác giữa */
		cursor: pointer !important; /* Con trỏ dạng tay khi hover */
		color: black !important; /* Màu của icon */
		font-size: 24px !important; /* Kích thước của icon */
		pointer-events: auto !important; /* Đảm bảo icon có thể click được */
		z-index: 2 !important; /* Đảm bảo icon hiển thị trên select */
	}

	.custom-select {
		min-width: 150px; /* Đặt chiều rộng tối thiểu */
	}

	.modal-body .add-actor {
		max-width: 100%; /* Đảm bảo input và select không vượt quá giới hạn cột */
	}

	.modal {
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 1050;
	}
</style>