@page "/list-movies-admin"
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Application.Pagination
@using NeonCinema_Client.Data.IServices.IMoviesServices
@inject IMovieservices _movieservices

<h2 class="d-flex justify-content-center align-content-center m-auto">Danh Sách Phim</h2>

<MudSimpleTable Hover="@hover" Style="overflow-x: auto;">
    <thead>
        <tr>
            <th>STT</th>
            <th>Tên</th>
            <th>Ngày phát hành</th>
            <th>Độ tuổi</th>
            <th>Trạng thái</th>
            <th>Ảnh</th>
            <th>Hành động</th>
        </tr>
    </thead>

    @if (movieDto.Data != null)
    {
        <tbody>
            @foreach (var item in movieDto.Data)
            {
                <tr>
                    <td>@stt</td> <!-- Tăng stt trong vòng lặp -->
                    <td>@item.Name</td>
                    <td class="text-center align-middle">@item.StarTime.ToString("dd/MM/yyyy")</td>
                    <td>@item.AgeAllowed</td>
                    <td>@item.Status</td>
                    <td><img src="@GetImageUrl(item.Images)" alt="Alternate Text" style="height: 45px; width: 45px" /></td>
                    <td>
                    </td>
                </tr>
                stt++;
                <!-- Tăng số thứ tự trong vòng lặp -->
            }
        </tbody>
    }
    else
    {
        @if (loading)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Không có dữ liệu...</span>
            </div>
        }
    }
</MudSimpleTable>

<MudBlazor.MudContainer Class="container-fluid d-flex justify-content-center mb-2">
    <MudPagination Color="Color.Primary" Count="@countPage" SelectedChanged="@OnPaginationSelectedChanged" />
</MudBlazor.MudContainer>

@code {
    private bool loading;
    private bool hover = true;
    private int countPage = 1;
    private int stt = 1;

    private string errorMessage;
    ViewMovieRequest request = new ViewMovieRequest();
    PaginationResponse<MovieDTO> movieDto = new PaginationResponse<MovieDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    public async Task LoadMovies()
    {
        loading = true;
        stt = 1; // Đặt lại stt trước khi lặp
        try
        {
            movieDto.Data = null;
            request.PageNumber = countPage; // Sử dụng request để truyền số trang
            movieDto = await _movieservices.GetAllMovies(request);
            loading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra: {ex.Message}";
        }
    }

    public async Task OnPaginationSelectedChanged(int selectedPage)
    {
        countPage = selectedPage;
        await LoadMovies();
    }

    private string GetImageUrl(string imageUrl)
    {
        return $"https://localhost:7211/Resources/{imageUrl}"; // Thay localhost bằng URL API nếu cần
    }
}