@page "/list-movie-admin"
@using NeonCinema_Application.DataTransferObject.ActorMoives
@using NeonCinema_Application.DataTransferObject.ActorMovies
@using NeonCinema_Application.DataTransferObject.Actors
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Application.Pagination
@using NeonCinema_Client.Data.IServices.IMoviesServices
@using NeonCinema_Domain.Enum
@using System.Text
@using System.Globalization
@inject IMovieservices _movieservices
@inject NavigationManager Navigation

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
@if (isLoading)
{
	<div class="loading-overlay">
		<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
	</div>
}
else
{
	<h2 class="d-flex justify-content-center align-content-center m-auto mt-3">Danh Sách Phim</h2>
	<div class="container-fluid mt-3">
		<div class="row mb-4 p-3 search-filter-container">
			<div class="col-md-2">
				<input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." @bind-value="request.SearchName" @oninput="SearchName" />
			</div>
			<div class="col-md-5 d-flex align-items-center ">
				<label class="form-label ">Lọc từ ngày:</label>
				<input type="date" class="form-control" @oninput="OnStartDateChanged" />
				<label class="form-label ">Đến ngày:</label>
				<input type="date" class="form-control" @oninput="OnEndDateChanged" />
			</div>
			<div class="col-md-5 d-flex align-items-center ">
				<label class="form-label me-2">Trạng thái:</label>
				<div class="d-flex align-items-center">
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" id="all" value="all" @onchange="StatusChanged" checked>
						<label class="form-check-label" for="all">Tất Cả</label>
					</div>
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" id="comingsoon" value="Comingsoon" @onchange="StatusChanged">
						<label class="form-check-label" for="comingsoon">Sắp phát hành</label>
					</div>
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" id="active" value="Active" @onchange="StatusChanged">
						<label class="form-check-label" for="active">Đang phát hành</label>
					</div>
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" id="stopshowing" value="StopShowing" @onchange="StatusChanged">
						<label class="form-check-label" for="stopshowing">Dừng phát hành</label>
					</div>
				</div>
			</div>
			<div class="col-md-2 mt-4">
				<select class="form-select" @onchange="OnGenreChanged">
					<option value="">Chọn thể loại</option>
					@foreach (var genre in genres)
					{
						<option value="@genre">@genre</option>
					}
				</select>
			</div>
			<div class="col-md-2 mt-4">
				<select class="form-select" @onchange="OnMovieTypeChanged">
					<option value="">Chọn loại phim</option>
					@foreach (var movieType in movieTypes)
					{
						<option value="@movieType">@movieType</option>
					}
				</select>
			</div>
			<div class="col-md-2 mt-4">
				<select class="form-select" @onchange="OnMovieSubChanged">
					<option value="">Chọn kiểu phim</option>
					<option value="@eSubEnum.Caption">Phụ đề</option>
					<option value="@eSubEnum.VoiceActing">Lồng tiếng</option>
				</select>
			</div>

			<div class="col-md-2">
				<select class="form-select mt-4" @onchange="OnAgeChanged">
					<option value="">Chọn tuổi</option>
					@foreach (var age in ages)
					{
						<option value="@age">@age</option>
					}
				</select>
			</div>

			<div class="col-md-2 mt-4">
				<select class="form-select" @onchange="OnCountryChanged">
					<option value="">Chọn quốc gia</option>
					@foreach (var country in countries)
					{
						<option value="@country">@country</option>
					}
				</select>
			</div>
			<div class="col-md-2 mt-4">
				<select class="form-select" @onchange="OnDirectorChanged">
					<option value="">Chọn đạo diễn</option>
					@foreach (var director in directors)
					{
						<option value="@director">@director</option>
					}
				</select>
			</div>


		</div>

		<button type="button" class="btn btn-success bg-opacity-50" style="border-radius: 6px; margin-left:1px; margin-bottom:15px" @onclick="NavigateToCreate">
			<i class="fas fa-plus"></i> Thêm phim mới
		</button>
		<table class="table table-hover employee-table">
			<thead>
				<tr>
					<th class="text-center">STT</th>
					<th class="text-center">Ảnh</th>
					<th class="text-center">Tên</th>
					<th class="text-center">Ngày phát hành</th>
					<th class="text-center">Thời lượng</th>
					<th class="text-center">Loại phim</th>
					<th class="text-center">Kiểu phim</th>
					<th class="text-center">Diễn viên chính</th>
					<th class="text-center">Đạo diễn</th>
					<th class="text-center">Quốc gia</th>
					<th class="text-center">Thể loại</th>
					<th class="text-center">Độ tuổi</th>
					<th class="text-center">Trạng thái</th>
					<th class="text-center">Hành động</th>
				</tr>
			</thead>

			<tbody>
				@if (filterFilms != null && filterFilms.Any())
				{
					int index = (currentPage - 1) * pageSize + 1; // Tính STT bắt đầu cho trang hiện tại
					@foreach (var item in filterFilms)
					{
						<tr>
							<td class="text-center align-middle">@index</td>
							<td class="text-center align-middle">
								<img src=@GetImageUrl(item.Images) alt="Hình Ảnh" class="rounded-circle" style="height: 100px; width: 100px;" />
							</td>
							<td class="text-center align-middle">@item.Name</td>
							<td class="text-center align-middle">@item.StarTime.ToString("dd/MM/yyyy")</td>
							<td class="text-center align-middle">@item.Duration phút</td>
							<td class="text-center align-middle">@item.MovieTypeName</td>
							<td class="text-center align-middle">
								@(item.Sub == eSubEnum.Caption ? "Phụ đề" :
															item.Sub == eSubEnum.VoiceActing ? "Lồng tiếng" : "Không xác định")
							</td>

							<td class="text-center align-middle">
								@(item.ActorMovies != null && item.ActorMovies.Any()
															? string.Join(", ", item.ActorMovies.Select(x => x.ActorName))
															: "Không có diễn viên")
							</td>
							<td class="text-center align-middle">@item.DirectorName</td>
							<td class="text-center align-middle">@item.CountryName</td>
							<td class="text-center align-middle">@item.GenreName</td>
							<td class="text-center align-middle">@item.AgeAllowed</td>
							<td class="text-center align-middle">
								<span class="badge
								@(item.Status == MovieStatus.upcomingkrelease ? "bg-primary" :
								(item.Status == MovieStatus.isreleasing ? "bg-success" : "bg-secondary"))
								text-light small-badge">
									@(item.Status == MovieStatus.upcomingkrelease ? "Sắp phát hành" :
																(item.Status == MovieStatus.isreleasing ? "Đang phát hành" : "Dừng phát hành"))
								</span>
							</td>
							<td class="text-center align-middle">
								<button class="btn btn-outline-primary btn-sm" style="border: none;" @onclick="() => NavigateUpdate(item.ID)">
									<i class="fas fa-edit"></i>
								</button>
							</td>
						</tr>
						index++; // Tăng giá trị STT
					}
				}
				else
				{
					<tr>
						<td colspan="12" class="text-center">Không có dữ liệu...</td>
					</tr>
				}
			</tbody>

		</table>

		<!-- Pagination -->
		<nav>
			<ul class="pagination justify-content-center">
				<li class="page-item @(currentPage == 1 ? "disabled" : "")">
					<a class="page-link" @onclick="() => ChangePage(currentPage - 1)">Trước</a>
				</li>
				@for (var i = 1; i <= totalPages; i++)
				{
					<li class="page-item @(currentPage == i ? "active" : "")">
						<a class="page-link" @onclick="() => ChangePage(i)">@i</a>
					</li>
				}
				<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
					<a class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sau</a>
				</li>
			</ul>
		</nav>
	</div>
}



@code {
	private int totalPages;
	private bool hover = true;
	private int stt = 1;
	private string errorMessage;
	ViewMovieRequest request = new ViewMovieRequest();
	PaginationResponse<MovieDTO> movieDto = new PaginationResponse<MovieDTO>();
	List<ActorMoviesDto> actorMovies = new List<ActorMoviesDto>();
	public Guid movieID;
	private string selectedGenre = string.Empty;
	private string selectedCountry = string.Empty;
	private string selectedAge = string.Empty;
	private string selectedDirector = string.Empty;
	private string selectedMovieType = string.Empty;


	private DateTime? startDate;
	private DateTime? endDate;

	private List<string> genres = new List<string>();
	private List<string> countries = new List<string>();
	private List<string> ages = new List<string>();
	private List<string> directors = new List<string>();
	private List<string> movieTypes = new List<string>();



	public List<MovieDTO> filterFilms = new List<MovieDTO>();

	private int currentPage = 1;
	private const int pageSize = 5;
	private bool isLoading = true;
	protected override async Task OnInitializedAsync()
	{
		isLoading = true; // Bắt đầu trạng thái đang tải
		StateHasChanged(); // Cập nhật giao diện để hiển thị loading
		await Task.Delay(2000); // Tạm dừng trong 2 giây
		await LoadMovies(); // Thực hiện tải dữ liệu
		isLoading = false; // Kết thúc trạng thái đang tải
	}

	public async Task LoadMovies()
	{
		try
		{
			movieDto = await _movieservices.GetAllMovies(request);
			foreach (var movies in movieDto.Data)
			{
				var actors = await _movieservices.GetActorsByFilmAsync(movies.ID, CancellationToken.None);
				movies.ActorMovies = actors;
			}
			movieDto.Data = movieDto.Data.OrderByDescending(m => m.StarTime).ToList();
			genres = movieDto.Data.Select(m => m.GenreName).Distinct().OrderBy(g => g).ToList();
			countries = movieDto.Data.Select(m => m.CountryName).Distinct().OrderBy(c => c).ToList();
			ages = movieDto.Data.Select(m => m.AgeAllowed.ToString()).Distinct().OrderBy(a => a).ToList();
			directors = movieDto.Data.Select(m => m.DirectorName.ToString()).Distinct().OrderBy(d => d).ToList();
			movieTypes = movieDto.Data.Select(m => m.MovieTypeName).Distinct().OrderBy(mt => mt).ToList();
			FilterFilms();
		}
		catch (Exception ex)
		{
			errorMessage = $"Có lỗi xảy ra: {ex.Message}";
		}
	}

	private string GetImageUrl(string imageUrl)
	{
		return $"https://localhost:7211/api/Resources/{imageUrl}";
	}

	#region Lọc phim
	private string selectedStatus = "all";
	private void FilterFilms()
	{
		// Chuẩn hóa chuỗi tìm kiếm
		string normalizedSearchName = NormalizeString(request.SearchName);

		if (movieDto.Data == null) return;
		var filteredData = movieDto.Data.Where(u =>
					(string.IsNullOrEmpty(request.SearchName) ||
			NormalizeString(u.Name).Contains(normalizedSearchName)) &&
			(selectedStatus == "all" ||
				(selectedStatus == "Active" && u.Status == MovieStatus.isreleasing) ||
				(selectedStatus == "Comingsoon" && u.Status == MovieStatus.upcomingkrelease) ||
				(selectedStatus == "StopShowing" && u.Status == MovieStatus.StopShowing)) &&
			(string.IsNullOrEmpty(selectedGenre) || u.GenreName.Equals(selectedGenre, StringComparison.OrdinalIgnoreCase)) &&
			(string.IsNullOrEmpty(selectedCountry) || u.CountryName.Equals(selectedCountry, StringComparison.OrdinalIgnoreCase)) &&
			(!startDate.HasValue || u.StarTime.Date >= startDate.Value.Date) &&
			(!endDate.HasValue || u.StarTime.Date <= endDate.Value.Date) &&
			(string.IsNullOrEmpty(selectedAge) || u.AgeAllowed.ToString() == selectedAge) &&
			(string.IsNullOrEmpty(selectedMovieType) || u.MovieTypeName.Equals(selectedMovieType, StringComparison.OrdinalIgnoreCase)) &&
		(!selectedSub.HasValue || u.Sub == selectedSub) &&
	(string.IsNullOrEmpty(selectedDirector) || u.DirectorName.Equals(selectedDirector, StringComparison.OrdinalIgnoreCase)))
			.ToList();

		totalPages = (int)Math.Ceiling((double)filteredData.Count / pageSize);
		stt = (currentPage - 1) * pageSize + 1; // Reset STT for the current page
		filterFilms = filteredData.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
	}
	private string RemoveDiacritics(string text)
	{
		if (string.IsNullOrEmpty(text))
			return text;

		var normalizedString = text.Normalize(NormalizationForm.FormD);
		var stringBuilder = new StringBuilder();

		foreach (var c in normalizedString)
		{
			var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
			if (unicodeCategory != UnicodeCategory.NonSpacingMark)
			{
				stringBuilder.Append(c);
			}
		}

		return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
	}

	private string NormalizeString(string input)
	{
		if (string.IsNullOrWhiteSpace(input))
			return string.Empty;

		// Loại bỏ khoảng trắng đầu và cuối, chuyển về chữ thường
		input = input.Trim().ToLower();


		// Loại bỏ dấu tiếng Việt
		input = RemoveDiacritics(input);

		return input;
	}
	private void OnAgeChanged(ChangeEventArgs e)
	{
		selectedAge = e.Value?.ToString() ?? string.Empty;
		currentPage = 1;
		FilterFilms();
	}
	private void OnDirectorChanged(ChangeEventArgs e)
	{
		selectedDirector = e.Value?.ToString() ?? string.Empty;
		currentPage = 1;
		FilterFilms();
	}
	private void OnMovieTypeChanged(ChangeEventArgs e)
	{
		selectedMovieType = e.Value?.ToString() ?? string.Empty;
		currentPage = 1;
		FilterFilms();
	}
	private eSubEnum? selectedSub = null;

	private void OnMovieSubChanged(ChangeEventArgs e)
	{
		if (Enum.TryParse<eSubEnum>(e.Value?.ToString(), out var sub))
		{
			selectedSub = sub;
		}
		else
		{
			selectedSub = null;
		}
		currentPage = 1;
		FilterFilms();
	}

	private void OnStartDateChanged(ChangeEventArgs e)
	{
		if (string.IsNullOrEmpty(e.Value?.ToString()))
		{
			startDate = null;
		}
		else if (DateTime.TryParse(e.Value?.ToString(), out var date))
		{
			startDate = date;
		}
		currentPage = 1;
		FilterFilms();
	}

	private void OnEndDateChanged(ChangeEventArgs e)
	{
		if (string.IsNullOrEmpty(e.Value?.ToString()))
		{
			endDate = null;
		}
		else if (DateTime.TryParse(e.Value?.ToString(), out var date))
		{
			endDate = date;
		}
		currentPage = 1;
		FilterFilms();
	}

	private void OnGenreChanged(ChangeEventArgs e)
	{
		selectedGenre = e.Value?.ToString() ?? string.Empty;
		currentPage = 1;
		FilterFilms();
	}

	private void OnCountryChanged(ChangeEventArgs e)
	{
		selectedCountry = e.Value?.ToString() ?? string.Empty;
		currentPage = 1;
		FilterFilms();
	}

	private async void SearchName(ChangeEventArgs e)
	{
		request.SearchName = e.Value?.ToString() ?? string.Empty;
		currentPage = 1;
		FilterFilms();
	}

	private async void StatusChanged(ChangeEventArgs e)
	{
		selectedStatus = e.Value?.ToString() ?? "all";
		currentPage = 1;
		FilterFilms();
	}
	#endregion

	#region Phân trang
	private void ChangePage(int newPage)
	{
		if (newPage < 1 || newPage > totalPages) return;
		currentPage = newPage;
		FilterFilms();
	}

	private int TotalPages => (int)Math.Ceiling((double)filterFilms.Count / pageSize);
	#endregion

	private async Task NavigateToCreate()
	{
		Navigation.NavigateTo($"/create-flims");
		await LoadMovies();
	}

	private async Task NavigateUpdate(Guid id)
	{
		Navigation.NavigateTo($"/movie-update/{id}");
	}

	private async Task NavigateToDetail(Guid id)
	{
		Navigation.NavigateTo($"/movies-dialog/{id}");
	}
}


<style>
	body {
		background-color: #f8f9fa;
		font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
	}

	.container-fluid {
		font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
	}

	.search-filter-container {
		display: flex; /* Sử dụng flexbox */
		flex-wrap: wrap; /* Không cho xuống dòng */
		align-items: center; /* Căn giữa theo trục dọc */
		justify-content: space-between; /* Căn đều các phần tử */
		background-color: #ffffff;
		border-radius: 8px;
		padding: 20px;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		margin-left: 1px;
		margin-right: 1px;
	}

	.form-control {
		border-radius: 5px; /* Bo góc cho ô input */
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Thêm bóng cho ô input */
	}

	.form-select {
		border-radius: 5px; /* Bo góc cho ô chọn */
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Thêm bóng cho ô chọn */
	}

	.d-flex.align-items-center {
		display: flex; /* Đảm bảo các thành phần hiển thị ngang hàng */
		align-items: center; /* Căn giữa theo chiều dọc */
		gap: 15px; /* Khoảng cách giữa các phần tử */
	}

	.form-check-inline {
		margin-right: 15px; /* Khoảng cách giữa các radio button */
	}

	.form-label {
		white-space: nowrap; /* Đảm bảo chữ "Trạng thái" không xuống dòng */
		margin-right: 10px; /* Khoảng cách giữa label và các radio button */
		margin-bottom: 0; /* Loại bỏ khoảng cách dưới label */
	}

	.employee-table {
		background-color: white; /* Màu nền bảng là trắng */
		border-radius: 8px; /* Bo góc bảng */
		overflow: hidden; /* Ẩn đi các phần tràn ra ngoài */
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Thêm bóng cho bảng */
	}

		.employee-table td {
			font-size: 16px; /* Tăng kích thước chữ trong các thẻ td */
			padding: 12px; /* Tăng khoảng cách giữa nội dung và đường viền của ô */
		}

	.modal {
		display: flex;
		align-items: center;
		justify-content: center;
		position: fixed;
		top: 0;
		left: 0;
		background-color: rgba(0, 0, 0, 0.5); /* Để tạo nền mờ */
		z-index: 1050; /* Đảm bảo modal ở trên các phần tử khác */
	}

	.modal-dialog {
		max-width: 1500px; /* Tăng chiều rộng tối đa của dialog */
		max-height: 80vh;
		width: 50%; /* Đảm bảo modal chiếm toàn bộ chiều rộng */
		margin: auto; /* Để căn giữa modal */
		overflow-y: auto;
	}

	.modal-content {
		padding: 20px; /* Thêm khoảng cách bên trong để nội dung không bị chèn vào các cạnh */
	}


	.no-hover {
		border: none; /* Bỏ viền */
		background-color: transparent; /* Bỏ nền */
		outline: none; /* Bỏ viền ngoài */
		cursor: pointer; /* Con trỏ vẫn là tay khi hover */
	}

		.no-hover:hover {
			background-color: transparent;
			color: inherit;
			outline: none;
		}

		.no-hover:focus {
			outline: none;
			box-shadow: none;
		}

	.position-relative {
		position: relative;
	}

	.loading-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.8);
		display: flex;
		justify-content: center;
		align-items: center;
	}
</style>