@page "/create-flims"
@using Microsoft.AspNetCore.Http;
@using NeonCinema_Application.DataTransferObject.ActorMoives
@using NeonCinema_Application.DataTransferObject.Actors
@using NeonCinema_Application.DataTransferObject.Countrys;
@using NeonCinema_Application.DataTransferObject.Directors;
@using NeonCinema_Application.DataTransferObject.Genre;
@using NeonCinema_Application.DataTransferObject.Language;
@using NeonCinema_Application.DataTransferObject.Movie;
@using NeonCinema_Application.Pagination
@using NeonCinema_Client.Data.IServices.IMoviesServices;
@using System.Text.Json
@layout LayoutAdmin
@inject IMovieservices _movieServices
@inject NavigationManager _navigation
@inject HttpClient _http
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
@* <AuthorizeView Roles="Admin">
	<Authorized > *@
		<EditForm Model="request" OnValidSubmit="HandleSubmit" Context="editFormContext">
			<DataAnnotationsValidator />
			<div class="container-fluid mt-5">
				<h2 class="text-center mb-4 font-weight-bold">Thêm phim mới</h2>
				<div class="row">
					<div class="col-md-3 text-center mb-4 mt-5">
						<img src="@profileImage" alt="Profile" class="img-fluid profile-pic"> <br />
						<label class="custom-file-upload">
							<span>
								<i class="material-icons">cloud_upload</i>
							</span>
							<InputFile OnChange="HandleSelected" class="d-none" style="width: 200px" />
							<span>Chọn ảnh</span>
						</label>
					</div>
					<div class="col-md-9" style="margin-top:10px;">
						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label for="name" class="font-weight-bold">Tên Phim</label>
									<input type="text" class="form-control" id="name" @bind-value="request.Name" />
									<ValidationMessage For="@(() => request.Name)" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group">
									<label for="Duration" class="font-weight-bold">Thời Lượng</label>
									<input type="number" class="form-control" id="Duration" @bind-value="request.Duration" />
									<ValidationMessage For="@(() => request.Duration)" />
								</div>
							</div>
						</div>

						<!-- Thông tin phim -->
						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label for="Trailer" class="font-weight-bold">Trailer</label>
									<input type="url" class="form-control" id="Trailer" @bind-value="request.Trailer" />
									<ValidationMessage For="@(() => request.Trailer)" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group">
									<label for="StarTime" class="font-weight-bold">Ngày phát hành</label>
									<input type="date" class="form-control" id="StarTime" @bind-value="request.StarTime" />
									<ValidationMessage For="@(() => request.StarTime)" />
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label for="AgeAllowed" class="font-weight-bold">Độ tuổi cho phép</label>
									<input type="number" class="form-control" id="AgeAllowed" @bind-value="request.AgeAllowed" />
									<ValidationMessage For="@(() => request.AgeAllowed)" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group">
									<label for="Actor" class="font-weight-bold">Diễn viên</label>
									<div class="position-relative">
										<input type="text" class="form-control" id="Actor" placeholder="Chọn diễn viên"
											   value="@selectedActorsText" readonly />
										<i class="material-icons add-icon" @onclick="OpenActorDialog">add_circle</i>
									</div>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label for="Genre" class="font-weight-bold">Thể loại</label>
									<select @onchange="(e) => request.GenreID = Guid.Parse(e.Value.ToString())" class="form-control">
										<option value="" disabled selected>Chọn thể loại</option>
										@foreach (var genre in genres)
										{
											<option value="@genre.ID">@genre.GenreName</option>
										}
									</select>
									<ValidationMessage For="@(() => request.GenreID)" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group">
									<label for="Language" class="font-weight-bold">Ngôn ngữ</label>
									<select @onchange="(e) => request.LenguageID = Guid.Parse(e.Value.ToString())" class="form-control">
										<option value="" disabled selected>Chọn ngôn ngữ</option>
										@foreach (var language in languages)
										{
											<option value="@language.ID">@language.LanguageName</option>
										}
									</select>
									<ValidationMessage For="@(() => request.LenguageID)" />
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-6">
								<div class="form-group">
									<label for="Country" class="font-weight-bold">Quốc gia</label>
									<select @onchange="(e) => request.CountryID = Guid.Parse(e.Value.ToString())" class="form-control">
										<option value="" disabled selected>Chọn quốc gia</option>
										@foreach (var country in countries)
										{
											<option value="@country.ID">@country.CountryName</option>
										}
									</select>
									<ValidationMessage For="@(() => request.CountryID)" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group">
									<label for="Director" class="font-weight-bold">Đạo diễn</label>
									<select @onchange="(e) => request.DirectorID = Guid.Parse(e.Value.ToString())" class="form-control">
										<option value="" disabled selected>Chọn đạo diễn</option>
										@foreach (var director in directors)
										{
											<option value="@director.ID">@director.FullName</option>
										}
									</select>
									<ValidationMessage For="@(() => request.DirectorID)" />
								</div>
							</div>
						</div>

						<div class="form-group">
							<label for="Description" class="font-weight-bold">Mô tả</label>
							<textarea class="form-control" id="Description" @bind="request.Description" rows="3"></textarea>
							<ValidationMessage For="@(() => request.Description)" />
						</div>

						<div class="text-center">
							<button type="submit" class="btn btn-success btn-lg">Thêm</button>
							<button type="button" class="btn btn-warning btn-lg" @onclick="NavigateToList">Quay lại</button>
						</div>
					</div>
				</div>
			</div>
		</EditForm>
@code {
	private CreateMovieRequest request = new CreateMovieRequest();
	private CreateActorMoviesRequest requestmovies = new CreateActorMoviesRequest();
	private IBrowserFile selectedFile;
	// private string errorMessage;
	private string profileImage = "https://media.istockphoto.com/id/1397556857/vi/vec-to/avatar-13.jpg?s=612x612&w=0&k=20&c=rNjYzaNEVujaKNJBN2yBdHGDjoYrPRgeSIDrenAZcbE=";
	//	private bool isActorModalOpen = false;

	List<GenreDTO> genres = new List<GenreDTO>();
	List<LanguageDTO> languages = new List<LanguageDTO>();
	List<CountryDTO> countries = new List<CountryDTO>();
	List<DirectorDTO> directors = new List<DirectorDTO>();
	PaginationResponse<ActorDTO> actors = new PaginationResponse<ActorDTO>();
	private ViewActorRequest requestActor = new ViewActorRequest();
	protected override async Task OnInitializedAsync()
	{
		actors = await _movieServices.GetActor(requestActor);
		request.StarTime = DateTime.UtcNow;
		genres = await _movieServices.GetAllGenre();
		languages = await _movieServices.GetAllLanguage();
		countries = await _movieServices.GetAllCountry();
		directors = await _movieServices.GetAllDirector();
	}

	private async Task HandleSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;

		// Tạo URL tạm thời cho hình ảnh đã chọn
		var imageUrl = await GetImageUrl(selectedFile);
		if (imageUrl != null)
		{
			profileImage = imageUrl;
			StateHasChanged(); // Cập nhật giao diện
		}
	}

	private async Task<string> GetImageUrl(IBrowserFile file)
	{
		if (file.ContentType.StartsWith("image/"))
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
			return $"data:{file.ContentType};base64,{imageBase64}";
		}
		return null;
	}

	private async Task HandleSubmit()
	{
		try
		{
			var content = new MultipartFormDataContent();
			var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20));
			fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);

			content.Add(fileContent, "file", selectedFile.Name);
			var response = await _http.PostAsync("https://localhost:7211/api/UploadImages/upload-image", content);

			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				var jsonDoc = JsonDocument.Parse(jsonResponse);
				var fileUrl = jsonDoc.RootElement.GetProperty("fileUrl").GetString();
				var fileName = Path.GetFileName(fileUrl);
				request.Images = fileName;

				Console.WriteLine($"Upload thành công. Tên file: {fileName}");
			}
			else
			{
				Console.WriteLine($"Lỗi upload ảnh. Status code: {response.StatusCode}");
				return;
			}


			var flimsResponse = await _movieServices.Create(request,CancellationToken.None);
			if (flimsResponse.IsSuccessStatusCode)
			{
				Console.WriteLine(request.GenreID);
				Console.WriteLine(request.LenguageID);
				Console.WriteLine(request.CountryID);
				Console.WriteLine(request.DirectorID);

				_navigation.NavigateTo("/list-movie-admin");
			}
			else
			{
				Console.WriteLine($"Có lỗi xảy ra khi tạo phim.{flimsResponse.Content}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Lỗi: {ex.Message}");
			Console.WriteLine($"Chi tiết ngoại lệ: {ex.StackTrace}");
		}
	}
	private async Task NavigateToList()
	{
		_navigation.NavigateTo("/list-movie-admin");
	}
	private List<Guid> selectedActors = new List<Guid>();
	private string selectedActorsText = string.Empty;
	private bool isActorModalOpen = false;

	private void ToggleActorSelection(Guid actorId, bool isSelected)
	{
		if (isSelected)
		{
			if (!selectedActors.Contains(actorId))
				selectedActors.Add(actorId);
		}
		else
		{
			selectedActors.Remove(actorId);
		}
		selectedActorsText = string.Join(", ", actors.Data
		.Where(a => selectedActors.Contains(a.ID))
		.Select(a => a.FullName));
	}
	private void OpenActorDialog()
	{
		isActorModalOpen = true; // Mở modal
	}

	private void CloseActorDialog()
	{
		isActorModalOpen = false; // Đóng modal
	}
	private void SelectActors()
	{

		CloseActorDialog();
	}
}


<style>
	body {
		background-color: #f4f4f9;
	}

	.card {
		border-radius: 10px;
		background-color: white;
		max-width: 1000px;
		margin: auto;
	}

	h2 {
		font-family: 'Arial', sans-serif;
		color: #333;
	}

	.profile-pic {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border: 3px solid #eaeaea;
		margin-left: -15px;
		height: 350px;
		width: 250px;
	}

	label {
		font-size: 14px;
		color: #555;
	}

	input, select, textarea {
		border-radius: 5px;
		border: 1px solid #ccc;
		padding: 10px;
		margin-left: -20px;
	}

	.form-control:focus {
		border-color: #007bff;
		box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
	}

	textarea {
		resize: none;
	}

	.btn-primary {
		background-color: #007bff;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

		.btn-primary:hover {
			background-color: #0056b3;
		}

	.btn-secondary {
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-check {
		margin-right: 15px; /* Adjust spacing between radio buttons */
	}

	img {
		margin-top: 20px;
		width: 270px;
		height: 400px;
	}

	.custom-file-upload {
		display: flex;
		align-items: center; /* Căn giữa theo chiều dọc */
		justify-content: center; /* Căn giữa theo chiều ngang */
		margin-top: 10px;
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 10px;
		background-color: #a9a9a9; /* Màu nền của nút */
		color: white; /* Màu chữ */
		border: none; /* Bỏ viền */
		text-align: center;
		width: 150px;
		margin-left: auto;
		margin-right: auto;
	}

		.custom-file-upload span {
			margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
		}

		.custom-file-upload:hover {
			background-color: #8f8f8f; /* Màu nền khi hover */
		}

	.btn-success {
		background-color: #007bff;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

		.btn-success:hover {
			background-color: #0056b3;
		}

	.btn-warning {
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

	.modal {
		display: flex;
		align-items: center;
		justify-content: center;
		position: fixed;
		top: 0;
		left: 0;
		background-color: rgba(0, 0, 0, 0.5); /* Để tạo nền mờ */
		z-index: 1050; /* Đảm bảo modal ở trên các phần tử khác */
	}

	.modal-dialog {
		max-width: 1500px; /* Tăng chiều rộng tối đa của dialog */
		max-height: 80vh;
		width: 50%; /* Đảm bảo modal chiếm toàn bộ chiều rộng */
		margin: auto; /* Để căn giữa modal */
		overflow-y: auto;
	}

	.modal-content {
		padding: 20px; /* Thêm khoảng cách bên trong để nội dung không bị chèn vào các cạnh */
	}


	.no-hover {
		border: none; /* Bỏ viền */
		background-color: transparent; /* Bỏ nền */
		outline: none; /* Bỏ viền ngoài */
		cursor: pointer; /* Con trỏ vẫn là tay khi hover */
	}

		.no-hover:hover {
			background-color: transparent;
			color: inherit;
			outline: none;
		}

		.no-hover:focus {
			outline: none;
			box-shadow: none;
		}

	.position-relative {
		position: relative;
	}

	.add-icon {
		position: absolute;
		right: 30px; /* Khoảng cách từ icon đến bên phải */
		top: 50%; /* Đặt icon giữa theo chiều dọc */
		transform: translateY(-50%); /* Điều chỉnh lại vị trí để icon thực sự nằm giữa */
		cursor: pointer;
		color: black; /* Màu của icon, có thể thay đổi nếu muốn */
		font-size: 24px; /* Kích thước của icon */
	}

	.profile-pic-modal {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border: 3px solid #eaeaea;
	}

	.file-upload-modal {
		display: flex;
		align-items: center; /* Căn giữa theo chiều dọc */
		justify-content: center; /* Căn giữa theo chiều ngang */
		margin-top: 10px;
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 10px;
		background-color: #a9a9a9; /* Màu nền của nút */
		color: white; /* Màu chữ */
		border: none; /* Bỏ viền */
		text-align: center;
		width: 150px;
		margin-left: auto;
		margin-right: auto;
	}

		.file-upload-modal span {
			margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
		}

		.file-upload-modal:hover {
			background-color: #8f8f8f; /* Màu nền khi hover */
		}
</style>