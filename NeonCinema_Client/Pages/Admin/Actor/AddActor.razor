@page "/addactor"
@using NeonCinema_Application.DataTransferObject.Actors
@using NeonCinema_Client.Data.IServices.Actor
@using NeonCinema_Domain.Enum
@inject IActorService ActorService
@inject NavigationManager NavigationManager
@layout LayoutAdmin
<link rel="stylesheet" href="/css/Actor/AddActor.css">
<h3 class="text-center mb-4">Add New Actor</h3>

<EditForm Model="actor" OnValidSubmit="HandleValidSubmit" class="form-container">
    <div class="mb-3">
        <label class="form-label">Full Name:</label>
        <InputText @bind-Value="actor.FullName" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Gender:</label>
        <InputText @bind-Value="actor.Gender" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Birth Date:</label>
        <InputDate @bind-Value="actor.BirthDate" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Address:</label>
        <InputText @bind-Value="actor.Address" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Nationality:</label>
        <InputText @bind-Value="actor.Nationality" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Biography:</label>
        <InputTextArea @bind-Value="actor.Biography" class="form-control" rows="3" />
    </div>
    <div class="mb-3">
        <label class="form-label">Status:</label>
        <InputSelect id="status" class="form-select" @bind-Value="actor.Status">
            <option value="@(EntityStatus.Active)">Hoạt động</option>
            <option value="@(EntityStatus.Locked)">Không hoạt động</option>
        </InputSelect>
        <ValidationMessage For="@(() => actor.Status)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Image:</label>
        <div class="mb-2">
            <img src="@(!string.IsNullOrEmpty(temporaryImageUrl) ? temporaryImageUrl : "")" alt="@actor.FullName" class="img-thumbnail" width="150" height="150" />
        </div>
        <InputFile OnChange="HandleFileSelected" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Cancel</button>
</EditForm>

@code {
    private ActorDTO actor = new ActorDTO();
    private IBrowserFile selectedFile;
    private string temporaryImageUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
            var filePath = Path.Combine("wwwroot/images/Actor", fileName);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
            }

            actor.Images = $"/images/Actor/{fileName}";

            using (var stream = new MemoryStream())
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
                temporaryImageUrl = $"data:image/png;base64,{Convert.ToBase64String(stream.ToArray())}";
            }

            StateHasChanged();
        }
    }
   
    private async Task HandleValidSubmit()
    {
        var createActorRequest = new CreateActorRequest
            {
                FullName = actor.FullName,
                Gender = actor.Gender,
                BirthDate = actor.BirthDate,
                Address = actor.Address,
                Nationality = actor.Nationality,
                Biography = actor.Biography,
                Images = actor.Images,
                Status = actor.Status
            };

        await ActorService.CreateActor(createActorRequest, CancellationToken.None);
        NavigationManager.NavigateTo("/listactor");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/listactor");
    }
}
