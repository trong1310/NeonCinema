@page "/listactor"
@using NeonCinema_Application.DataTransferObject.Actors
@using NeonCinema_Client.Data.IServices.Actor
@using NeonCinema_Domain.Enum
@inject NavigationManager Navi
@inject IActorService ActorService
@layout LayoutAdmin
<link rel="stylesheet" href="/css/Actor/listactor.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<h2 style="text-align: center; margin-top: 40px">DANH SÁCH DIỄN VIÊN</h2>

<div class="col-md-4">
    <div class="row">
        <div class="Actionn" style="display:flex">
            <div class="cl1">
                <input type="text" placeholder="Search by Full Name" @bind="searchText" @oninput="OnSearchChanged" class="form-control mb-3" />
            </div>
            <div class="cl2">
                <label>
                    <input type="radio" name="genderFilter" value="All" @onchange="OnGenderChanged" checked />
                    All
                </label>
                <label>
                    <input type="radio" name="genderFilter" value="Men" @onchange="OnGenderChanged" />
                    Men
                </label>
                <label>
                    <input type="radio" name="genderFilter" value="Girl" @onchange="OnGenderChanged" />
                    Girl
                </label>
            </div>
            <div class="cl3 ">
                <a  class="btn btn-success mb-2" href="/addactor"><i class="fa-solid fa-plus" style="color: #ffffff;"></i>  Thêm diễn viên</a>
            </div>
        </div>
    </div>
</div>

@if (filteredActors == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredActors.Count == 0)
{
    <p>No actors found.</p>
}
else
{
    <table class="table table-hover" style="box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);">
        <thead>
            <tr>
                <th>Ảnh cá nhân</th>
                <th>Tên</th>
                <th>Giới tính</th>
                <th>Ngày sinh</th>
                <th>Địa chỉ</th>
                <th>Quốc tịch</th>
                <th>Tiểu sử</th>
                <th>Trạng thái</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var actor in filteredActors)
            {
                <tr>
                    <td class="image-cell">
                        <img src="@actor.Images"
                             alt="@actor.FullName"
                             style="border-radius: 100%; width: 80px; height: 80px; object-fit: cover;" />
                    </td>
                    <td class="table-cell">@actor.FullName</td>
                    <td class="table-cell">@actor.Gender</td>
                    <td class="table-cell">@actor.BirthDate.ToShortDateString()</td>
                    <td class="table-cell">@actor.Address</td>
                    <td class="table-cell">@actor.Nationality</td>
                    <td class="table-cell">@actor.Biography</td>
                    <td class="table-cell">
                        <div class="form-check form-switch">
                            <input class="form-check-input"
                                   type="checkbox"
                                   role="switch"
                                   id="flexSwitchCheckDefault_@(actor.Status)"
                                   checked="@(actor.Status == EntityStatus.Active)"
                                   @onchange="(e) => ToggleRoomStatus(actor, e)" />
                            <label class="form-check-label" for="flexSwitchCheckDefault_@(actor.Status)">
                                @(actor.Status == EntityStatus.Active ? "" : "")
                            </label>
                        </div>
                    </td>
                    <td class="table-cell">
                        <button style="border: 1px solid black" class="btn btn-warning" @onclick="() => EditActor(actor.ID)"><i class="fa-regular fa-pen-to-square" style="color: black; "></i></button>
                    </td> 
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ActorDTO> actors;
    private List<ActorDTO> filteredActors;
    private string searchText = string.Empty;
    private string selectedGender = "All";

    protected override async Task OnInitializedAsync()
    {
        actors = await ActorService.GetAllActor();
        filteredActors = actors; 
    }

    private void EditActor(Guid actorId)
    {
        Navi.NavigateTo($"/updateactor/{actorId}");
    }

    private async void ToggleRoomStatus(ActorDTO actor, ChangeEventArgs e)
    {
        actor.Status = (bool)e.Value ? EntityStatus.Active : EntityStatus.Locked;

        var ActorUpdateRequest = new UpdateActorRequest
            {
                ID = actor.ID,
                FullName = actor.FullName,
                Gender = actor.Gender,
                BirthDate = actor.BirthDate,
                Address = actor.Address,
                Nationality = actor.Nationality,
                Biography = actor.Biography,
                Images = actor.Images,
                Status = actor.Status
            };

         await ActorService.UpdateActor(ActorUpdateRequest.ID, ActorUpdateRequest);

       
            actors = await ActorService.GetAllActor();
            FilterActors(); // Cập nhật lại danh sách được lọc
        
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        FilterActors();
    }

    private void FilterActors()
    {
        filteredActors = actors
            .Where(a => string.IsNullOrWhiteSpace(searchText) || a.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Where(a => selectedGender == "All"
                        || (selectedGender == "Men" && a.Gender == "Men")
                        || (selectedGender == "Girl" && a.Gender == "Girl"))
            .ToList(); // Lọc danh sách theo tên và giới tính
    }

    private void OnGenderChanged(ChangeEventArgs e)
    {
        selectedGender = e.Value.ToString();
        FilterActors();
    }
}
