@page "/actor-manager"
@using NeonCinema_API.Controllers.Service
@using NeonCinema_Client.Data.IServices.Actor
@using NeonCinema_Domain.Enum
@layout LayoutAdmin
@inject IActorService ActorService
@attribute [Authorize(Roles = "Admin")]
<link rel="stylesheet" href="/css/Actor/listactor.css">


<div class="container-fluid">
    <h4 style="text-align: center">Danh Sách Diễn Viên</h4>
    <!-- Search and Filter Section -->
    <div class="row mb-4 p-3 search-filter-container">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." @oninput="FilterActorsByName" />
        </div>
        <div class="col-md-4">
            <select id="FilterSex" class="form-control" @onchange="FilterActorsBySex">
                <option value="">Chọn giới tính</option>
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-center">
            <select id="FilterStatus" class="form-control" @onchange="FilterActorsByStatus">
                <option value="">Chọn trạng thái</option>
                <option value="Active">Hoạt động</option>
                <option value="Inactive">Không hoạt động</option>
            </select>
        </div>
    </div>

    <button type="button" class="btn btn-success bg-opacity-50" style="border-radius: 6px; margin-bottom:15px" @onclick="ShowCreateDialog">
        <i class="fas fa-plus"></i> Thêm diễn viên
    </button>
    <table class="table employee-table">
        <thead>
            <tr>
                <th class="text-center">STT</th>
                <th class="text-center">Tên</th>
                <th class="text-center">Giới Tính</th>
                <th class="text-center">Trạng Thái</th>
                <th class="text-center">Hành Động</th>
            </tr>
        </thead>
        <tbody>
            
            @if (FilteredActors != null && FilteredActors.Any())
            {
                var actorsToDisplay = FilteredActors.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
                @foreach (var actor in actorsToDisplay)
                {
                    <tr>
                        <td class="text-center">@(@FilteredActors.IndexOf(actor) + 1)</td>
                        <td class="text-center">@actor.name</td>
                        <td class="text-center">@actor.sex</td>
                        <td class="text-center">
                            <span class="badge @(actor.status == EntityStatus.Active ? "bg-success" : "bg-danger")">
                                @(actor.status == EntityStatus.Active ? "Hoạt động" : "Không hoạt động")
                            </span>
                         </td>
                        <td class="text-center">
                            <button class="btn btn-outline-primary btn-sm" style="border: none;" @onclick="() => EditActor(actor)">
                                <i class="fas fa-edit"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">Không có dữ liệu.</td>
                </tr>
            }
        </tbody>
    </table>
    <!-- Pagination -->
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="() => ChangePage(currentPage - 1)">Trước</a>
            </li>
            @for (var i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <a class="page-link" @onclick="() => ChangePage(i)">@i</a>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sau</a>
            </li>
        </ul>
    </nav>
</div>

@if (IsCreateDialogVisible || IsEditDialogVisible)
{
    <div class="modal">
        <div class="modal-content">
            <h4>@(IsEditDialogVisible ? "Sửa Diễn Viên" : "Thêm Diễn Viên")</h4>
            <EditForm Model="@ActorFormModel" OnValidSubmit="@HandleFormSubmit">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="Name">Tên:</label>
                    <InputText id="Name" @bind-Value="ActorFormModel.Name" class="form-control" />
                    <ValidationMessage For="@(() => ActorFormModel.Name)" />
                </div>
                <div class="form-group">
                    <label for="Sex">Giới tính:</label>
                    <InputSelect id="Sex" @bind-Value="ActorFormModel.Sex" class="form-control">
                        <option value="Nam">Nam</option>
                        <option value="Nữ">Nữ</option>
                    </InputSelect>
                </div>
                <div class="form-group" style="display: @(IsEditDialogVisible ? "block" : "none")">
                    <label for="Status">Trạng thái:</label>
                    <InputSelect id="Status" @bind-Value="ActorFormModel.Status" class="form-control">
                        <option value="Active">Hoạt động</option>
                        <option value="Inactive">Không hoạt động</option>
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Lưu</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Hủy</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<ActorResponse> Actors = new();
    private ActorCreateRequest ActorFormModel = new();
    private bool IsCreateDialogVisible = false;
    private bool IsEditDialogVisible = false;
    private List<ActorResponse> FilteredActors = new();
    private string SelectedSex = string.Empty;
    private string SelectedStatus = string.Empty;
    private string SearchName = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadActors();
        isLoading = true;
        FilteredActors = Actors;
        currentPage = 1; // Reset current page to 1 after filtering
        StateHasChanged(); // Cập nhật giao diện để hiển thị loading
        await Task.Delay(2000); // Tạm dừng trong 2 giây
        isLoading = false; // Kết thúc trạng thái đang tải
        
    }

    private async Task LoadActors()
    {
        try
        {
            Actors = await ActorService.GetAllActor();
            FilterActors();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi lấy danh sách diễn viên: {ex.Message}");
        }
    }
    private void FilterActorsBySex(ChangeEventArgs e)
    {
        SelectedSex = e.Value?.ToString() ?? string.Empty;
        FilterActors();
    }
    private void FilterActorsByStatus(ChangeEventArgs e)
    {
        SelectedStatus = e.Value?.ToString() ?? string.Empty;
        FilterActors();
    }
    private void FilterActorsByName(ChangeEventArgs e)
    {
        SearchName = e.Value?.ToString() ?? string.Empty;
        FilterActors();
    }

    private void FilterActors()
    {
        FilteredActors = Actors.Where(actor =>
            (string.IsNullOrEmpty(SelectedSex) || actor.sex.ToString() == SelectedSex) &&
            (string.IsNullOrEmpty(SelectedStatus) || actor.status.ToString() == SelectedStatus) &&
            (string.IsNullOrEmpty(SearchName) || actor.name.Contains(SearchName, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        currentPage = 1;
    }
    private void ShowCreateDialog()
    {
        ActorFormModel = new ActorCreateRequest
            {
                Sex = EntityStatus.Nam // Gán giá trị mặc định là "Nam"
            };
        IsCreateDialogVisible = true;
    }


    private void EditActor(ActorResponse actor)
    {
        ActorFormModel = new ActorCreateRequest
            {
                id = actor.id,
                Name = actor.name,
                Sex = actor.sex,
                Status = actor.status
            };
        IsEditDialogVisible = true;
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            ActorFormModel.Name = NormalizeString(ActorFormModel.Name);
            if (IsCreateDialogVisible)
            {
                await ActorService.CreateActor(ActorFormModel);
            }
            else if (IsEditDialogVisible)
            {
                var updateRequest = new UpdateActorRequests
                    {
                        id = ActorFormModel.id,
                        name = NormalizeString(ActorFormModel.Name),
                        sex = ActorFormModel.Sex,
                        status = ActorFormModel.Status
                    };
                await ActorService.UpdateActor(updateRequest);
            }

            CloseDialog();
            await LoadActors();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xử lý biểu mẫu: {ex.Message}");
        }
    }
    private string NormalizeString(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return string.Empty;
        return string.Join(" ", input.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));
    }

    private void CloseDialog()
    {
        IsCreateDialogVisible = false;
        IsEditDialogVisible = false;
    }

    private int currentPage = 1;
    private const int pageSize = 10;
    private void ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > totalPages) return;
        currentPage = newPage;
    }

    private int totalPages => (int)Math.Ceiling((double)FilteredActors.Count / pageSize);

}
<style>
    .modal {
        display: block; /* Hoặc none nếu không hiển thị */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        margin: 10% auto;
        padding: 20px;
        border-radius: 8px;
        width: 30%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .search-filter-container {
        display: flex; /* Sử dụng flexbox */
        flex-wrap: nowrap; /* Không cho xuống dòng */
        align-items: center; /* Căn giữa theo trục dọc */
        justify-content: space-between; /* Căn đều các phần tử */
        background-color: #ffffff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-left: 1px;
        margin-right: 1px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .employee-table {
        background-color: white; /* Màu nền bảng là trắng */
        border-radius: 8px; /* Bo góc bảng */
        overflow: hidden; /* Ẩn đi các phần tràn ra ngoài */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Thêm bóng cho bảng */
        overflow: visible;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff; /* Màu nền cho trang hiện tại */
        border-color: #007bff; /* Màu viền cho trang hiện tại */
    }
        .employee-table tbody tr {
            position: relative; /* Đảm bảo các thành phần bên trong dòng không bị che */
        }
</style>