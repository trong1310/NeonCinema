@page "/select-seat/{id:guid}"
@using System.Collections.Generic
@using NeonCinema_Application.DataTransferObject.BookTicket
@using NeonCinema_Application.DataTransferObject.Countrys
@using NeonCinema_Application.DataTransferObject.Directors
@using NeonCinema_Application.DataTransferObject.Genre
@using NeonCinema_Application.DataTransferObject.Language
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Client.Data.IServices.IMoviesServices
@using NeonCinema_Client.Data.Services.BookTicket
@inject IMovieservices _movieServices
@inject BookTicketServices _services
@inject IDialogService DialogService

<div class="row m-2">
    <div class="col-md-4" style="width: 25% ; height:80%">
        <div class="card">
            <img src="@GetImageUrl(movieDto.Images)" class="card-img-top" style="height: 33%; width: 100%" alt="Movie Poster">
            <div class="card-body text-center">
                <p><strong>Phim: </strong>@movieDto.Name</p>
                <p><strong>Suất chiếu:</strong> @screenings.ShowDate.ToString("dd/MM/yyyy") @screenings.ShowTime</p>
                <p><strong>Phòng:</strong> @screenings.RoomName</p>
                <p><strong>Giới hạn độ tuổi:</strong> <span class="badge bg-danger">@movieDto.AgeAllowed</span></p>
                <hr>
                <p><strong>Combo: </strong></p>
                <p><strong>Ghế: </strong>@selectedSeatNumbers </p>
                <p><strong>Tổng Tiền: </strong>@totalPrices.ToString("C")</p>
            </div>
        </div>
    </div>
    <div class="col-md-8 card shadow position-relative">
        @if (_selectedIndex == 0)
        {
            <h3 class="text-center">Chọn Ghế</h3>
            <hr />
            <h5>@screenings.RoomName</h5>
            <hr />
            <div class="d-flex align-items-center">
                <span>Giá vé: </span>
                <div class="seat-type">
                    <div class="seat-type-item">
                        <span class="square bg-warning"></span>
                        <span class="seat-name">Ghế thường</span>
                    </div>
                    <div class="seat-type-item">
                        <span class="square bg-danger"></span>
                        <span class="seat-name">Ghế vip</span>
                    </div>
                    <div class="seat-type-item">
                        <span class="square bg-success"></span>
                        <span class="seat-name">Ghế đôi</span>
                    </div>
                    <div class="seat-type-item">
                        <span class="square bg-dark"></span>
                        <span class="seat-name">Ghế đã bán</span>
                    </div>
                    <div class="seat-type-item">
                        <span class="square bg-primary"></span>
                        <span class="seat-name">Ghế bạn chọn</span>
                    </div>
                    <div class="seat-type-item">
                        <span class="square bg-secondary"></span>
                        <span class="seat-name">Ghế bảo trì</span>
                    </div>
                </div>
            </div>
            <div class="screen-area my-3">
                <div class="screen text-center">Màn hình</div>
            </div>
            <div class="seat-selection">
                @foreach (var row in groupedSeats)
                {
                    <div class="seat-row">
                        @foreach (var seat in row.Value)
                        {
                            <div class="seat-box @GetSeatCssClass(seat) ms-2"
                                 id="@seat.ID"
                                 @onclick="() => SelectSeat(seat)">
                                @seat.SeatNumber
                            </div>
                        }
                    </div>
                }
            </div>
            <button class="btn btn-primary" style="width: 30%" @onclick="NextTab">Tiếp theo</button>
        }
        else if (_selectedIndex == 1)
        {
            <h3>Chọn đồ ăn nhanh</h3>
            <button class="btn btn-secondary" @onclick="PreviousTab">Quay lại</button>
            <button class="btn btn-primary" @onclick="NextTab">Tiếp tục</button>
        }
        else if (_selectedIndex == 2)
        {
            <h3>Thanh Toán</h3>
            <p>Chọn phương thức thanh toán</p>
            <button class="btn btn-secondary" @onclick="PreviousTab">Quay lại</button>
            <button class="btn btn-primary" @onclick="ConfirmPayment">Thanh toán</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid id { get; set; }
    private MovieDTO movieDto = new MovieDTO();
    List<GenreDTO> genres = new List<GenreDTO>();
    List<LanguageDTO> languages = new List<LanguageDTO>();
    List<CountryDTO> countries = new List<CountryDTO>();
    List<DirectorDTO> directors = new List<DirectorDTO>();
    ScreeningMoviesDto screenings = new ScreeningMoviesDto();
    private int _selectedIndex = 0;
    private string selectedPaymentMethod = "Visa";
    private Dictionary<string, 
    List<SeatDto>> groupedSeats = new Dictionary<string, List<SeatDto>>();
    List<SeatDto> seats = new List<SeatDto>();

    protected override async Task OnInitializedAsync()
    {
        movieDto = await _movieServices.GetMovieById(id);
        genres = await _movieServices.GetAllGenre();
        languages = await _movieServices.GetAllLanguage();
        countries = await _movieServices.GetAllCountry();
        directors = await _movieServices.GetAllDirector();
        screenings = await _services.GetScreeningMovies(id);
        seats = screenings.Seats;
        groupedSeats = seats
              .GroupBy(seat => seat.SeatNumber.Substring(0, 1)) // Nhóm theo ký tự đầu
              .OrderBy(g => g.Key) // Sắp xếp hàng từ A trở đi
              .ToDictionary(
                  g => g.Key,
                  g => g.OrderBy(seat => int.Parse(seat.SeatNumber.Substring(1))) // Sắp xếp theo số ghế trong từng hàng
                        .ToList()
              );
    }

    private string GetImageUrl(string imageUrl)
    {
        return $"https://localhost:7211/api/Resources/{imageUrl}";
    }
    #region vé
    private string GetSeatCssClass(SeatDto seat)
    {
        if (selectedSeats.Contains(seat.SeatNumber))
        {
            return "selected";  
        }
        return "available"; 
    }
    private void NextTab()
    {
        if (_selectedIndex < 2)
        {
            _selectedIndex++;
        }
    }

    private void PreviousTab()
    {
        if (_selectedIndex > 0)
        {
            _selectedIndex--;
        }
    }

    private async Task ConfirmPayment()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Xác nhận thanh toán",
            "Bạn có chắc chắn muốn thanh toán không?",
            "Yes",
            "No",
            options: new DialogOptions { CloseButton = true }
        );

        if (result == true)
        {
            await DialogService.ShowMessageBox("Thanh toán thành công", "Cảm ơn bạn đã thanh toán!");
        }
    }
    private List<string> selectedSeats = new List<string>();
    private decimal totalPrices = 0;
    private string selectedSeatNumbers = "";
    private void SelectSeat(SeatDto seat)
    {
        if (selectedSeats.Contains(seat.SeatNumber))
        {
            selectedSeats.Remove(seat.SeatNumber);
            totalPrices -= (decimal) seat.Price;
        }
        else
        {
            selectedSeats.Add(seat.SeatNumber);
            totalPrices += (decimal)seat.Price; 
        }
        selectedSeatNumbers = string.Join(", ", selectedSeats);
    }
    #endregion

}
<style>
    .seat-type {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 10px;
    }

    .seat-type-item {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .square {
        width: 20px;
        height: 20px;
        display: inline-block;
    }

    .seat-name {
        font-size: 14px;
    }

    .screen-area {
        text-align: center;
        margin: 20px 0;
    }

    .screen {
        background-color: #ddd;
        padding: 10px;
        font-weight: bold;
        margin-bottom: 20px;
    }
    .seat-selection {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .seat-column {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .seat-item {
        margin: 10px;
    }

    .seat-box {
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-primary, .btn-secondary {
        margin-top: 20px;
    }

    .seat-selection {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
    }

    .seat-row {
        display: flex;
        justify-content: center;
        margin-bottom: 10px;
    }
    .sold {
        background-color: rgb(33 37 41);
        cursor: not-allowed;
    }

    .selected {
        background-color: rgb(13 110 253); 
    }

    .available {
        background-color: none; 
    }

</style>
