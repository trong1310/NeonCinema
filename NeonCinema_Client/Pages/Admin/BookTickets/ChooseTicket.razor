@page "/select-seat/{id:guid}"
@using NeonCinema_Application.DataTransferObject.BookTicket
@using NeonCinema_Application.DataTransferObject.BookTicket.Request
@using NeonCinema_Application.DataTransferObject.Countrys
@using NeonCinema_Application.DataTransferObject.Directors
@using NeonCinema_Application.DataTransferObject.FoodCombos
@using NeonCinema_Application.DataTransferObject.Genre
@using NeonCinema_Application.DataTransferObject.Language
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Infrastructure.Database.AppDbContext
@using System.Collections.Generic
@using NeonCinema_Application.DataTransferObject.User
@using NeonCinema_Client.Data.IServices.IMoviesServices
@using NeonCinema_Client.Data.Services.BookTicket
@using NeonCinema_Client.Models.Enums
@using NeonCinema_Domain.Database.Entities
@inject IMovieservices _movieServices
@inject BookTicketServices _services
@inject IDialogService DialogService
@inject IJSRuntime JS


<div class="row m-2">
	<div class="col-md-4" style="width: 25% ; height:80%">
		<div class="card">
			<img src="@GetImageUrl(movieDto.Images)" class="card-img-top" style="height: 33%; width: 100%" alt="Movie Poster">
			<div class="card-body text-center">
				<p><strong>Phim: </strong>@movieDto.Name</p>
				<p><strong>Suất chiếu:</strong> @screenings.ShowDate.ToString("dd/MM/yyyy") @screenings.ShowTime</p>
				<p><strong>Phòng:</strong> @screenings.RoomName</p>
			</div>
		</div>
	</div>
	<div class="col-md-8 card shadow position-relative">
		@if (_selectedIndex == 0)
		{
			<h3 class="text-center">Chọn Ghế</h3>
			<hr />
			<h5>@screenings.RoomName</h5>
			<hr />
			<div class="d-flex align-items-center">
				<span>Giá vé: </span>
				<div class="seat-type">
					<div class="seat-type-item">
						<span class="square bg-warning"></span>
						<span class="seat-name">Ghế thường</span>
					</div>
					<div class="seat-type-item">
						<span class="square bg-danger"></span>
						<span class="seat-name">Ghế vip</span>
					</div>
					<div class="seat-type-item">
						<span class="square bg-success"></span>
						<span class="seat-name">Ghế đôi</span>
					</div>
					<div class="seat-type-item">
						<span class="square bg-dark"></span>
						<span class="seat-name">Ghế đã bán</span>
					</div>
					<div class="seat-type-item">
						<span class="square bg-primary"></span>
						<span class="seat-name">Ghế bạn chọn</span>
					</div>
					<div class="seat-type-item">
						<span class="square bg-secondary"></span>
						<span class="seat-name">Ghế bảo trì</span>
					</div>
				</div>
			</div>
			<div class="screen-area my-3">
				<div class="screen text-center">Màn hình</div>
			</div>
			<div class="seat-selection">
				@foreach (var row in groupedSeats)
				{
					<div class="seat-row">
						@foreach (var seat in row.Value)
						{
							<div class="seat-box @GetSeatCssClass(seat) ms-2"
							id="@seat.ID"
							@onclick="() => SelectSeat(seat)">
								@seat.SeatNumber
							</div>
						}
					</div>
				}
			</div>
			<div class="button-container">
				<button class="btn btn-primary" style="width: 25%" @onclick="NextTab">Tiếp tục</button>
			</div>
		}
		else if (_selectedIndex == 1)
		{
			<div class="cinema-concession-container d-flex">
				<div class="combo-container">
					<div class="tab-content concession-items">
						<div class="text-center">
							<h3>Combo Đồ Ăn</h3>
						</div>
						<hr class="dashed">
						<div class="concession-item">
							@foreach (var combo in foods)
							{
								<div class="icon-box featured-box align-middle icon-box-left text-left">
									<div class="icon-box-img" style="width: 80px;">
										<div class="icon">
											<div class="icon-inner">
												<img src="@GetImageUrl(combo.Images)">
											</div>
										</div>
									</div>
									<div class="icon-box-text last-reset">
										<h4 class="">@combo.Content</h4>
										<div class="stack stack-row justify-between items-center">
											<span>@combo.Description</span>
											<div class="quantity">
												<div class="quantity">
													<span class="minus" @onclick="() => Decrease(combo)">-</span>
													<span class="number">
														@GetComboQuantity(combo)
													</span>
													<span class="plus" @onclick="() => Increase(combo)">+</span>
												</div>
											</div>
											<span class="price">@combo.Amount.ToString("c")</span>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				</div>
				<div class="payment-method-container">
					<div class="payment-method-container">
						<div class="card" style="width: 18rem;">
							<div class="card-body">
								<h5 class="card-title">Phương thức thanh toán</h5>
								<hr class="dashed">
								<p>
									<strong>Đồ ăn nhanh: </strong>
									@foreach (var selectedCombo in selectedCombos)
									{
										<span>@selectedCombo.Key.Content - Số lượng: @selectedCombo.Value</span>

										<br />
									}
								</p>
								<p><strong>Ghế: </strong>@selectedSeatNumbers </p>
								<span style="cursor: pointer;" id="amount-display">@totalPrices</span>
								<div class="concession-item">
									<div class="form-check">
										<input class="form-check-input" type="radio" name="flexRadioDefault" onclick="hienThiQR('ẩn')" id="cashRadio" checked>
										<label class="form-check-label" for="flexRadioDefault1">
											<i class="fa-solid fa-money-bill"></i> Tiền mặt
										</label>
									</div>
									<div class="form-check">
										<input class="form-check-input" type="radio" name="flexRadioDefault" onclick="hienThiQR('hiện')" id="bankTransferRadio">
										<label class="form-check-label" for="flexRadioDefault2">
											<i class="fa-solid fa-money-check-dollar"></i> Chuyển khoản
										</label>
									</div>
								</div>
								<img id="qrcode" style="border: 1px solid;height: 320px;width: 260px; display: none;" alt="QR Code">

							</div>
						</div>
					</div>
				</div>
			</div>

			<div class="button-container">
				<button class="btn btn-secondary" style="width: 25%" @onclick="PreviousTab">Quay lại</button>
				<button class="btn btn-primary" style="width: 25%" @onclick="ShowConfirmModal">Thanh toán</button>
			</div>

			@if (showConfirmModal)
			{
				<div class="modal fade show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);" aria-labelledby="exampleModalLabel" aria-hidden="true">
					<div class="modal-dialog">
						<div class="modal-content">
							<div class="modal-header">
								<h5 class="modal-title" id="exampleModalLabel">Xác nhận thanh toán</h5>
								<button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								<p>Bạn chắc chắn muốn thanh toán với số tiền <strong>@totalPrices.ToString("c")</strong>?</p>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
								<button type="button" class="btn btn-primary" @onclick="ProcessPayment">Xác nhận</button>
							</div>
						</div>
					</div>
				</div>
			}

		}
		@if (paymentStatus == "success")
		{
			<div class="modal fade show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);" aria-labelledby="paymentSuccessLabel" aria-hidden="true">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="paymentSuccessLabel">Thanh toán thành công</h5>
							<button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							<p>Cảm ơn bạn đã sử dụng dịch vụ của chúng tôi. Hóa đơn của bạn đã được xác nhận thành công!</p>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary" @onclick="CloseModal">Đóng</button>
						</div>
					</div>
				</div>
			</div>
		}

		@if (paymentStatus == "failure")
		{
			<div class="modal fade show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);" aria-labelledby="paymentFailureLabel" aria-hidden="true">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="paymentFailureLabel">Thanh toán thất bại</h5>
							<button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
							<p>Đã xảy ra lỗi trong quá trình thanh toán. Vui lòng thử lại sau.</p>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary" @onclick="CloseModal">Đóng</button>
						</div>
					</div>
				</div>
			</div>
		}

	</div>
</div>
<script>
		  function hienThiQR(hienThi) {
		const qrCode = document.getElementById("qrcode");
		qrCode.style.display = hienThi === 'hiện' ? 'block' : 'none';

		if (hienThi === 'hiện') {
			DotNet.invokeMethodAsync('NeonCinema_Client', 'OnClickToEditAmount')
				.then(() => console.log('Cập nhật giá tiền thành công'))
				.catch(error => console.warn('Lỗi khi gọi OnClickToEditAmount:', error));
		}
	}
	}

</script>
@code {
	[Parameter]
	public Guid id { get; set; }
	private MovieDTO movieDto = new MovieDTO();
	List<GenreDTO> genres = new List<GenreDTO>();
	List<LanguageDTO> languages = new List<LanguageDTO>();
	List<CountryDTO> countries = new List<CountryDTO>();
	List<DirectorDTO> directors = new List<DirectorDTO>();
	ScreeningMoviesDto screenings = new ScreeningMoviesDto();
	private int _selectedIndex = 0;
	private Dictionary<string,
	List<SeatDto>> groupedSeats = new Dictionary<string, List<SeatDto>>();
	List<SeatDto> seats = new List<SeatDto>();
	List<FoodComboDTO> foods = new List<FoodComboDTO>();
	private decimal totalPrices = 0;
	private bool showConfirmModal = false;
	public string? phoneNumber;
	private void ShowConfirmModal()
	{
		showConfirmModal = true;
	}

	protected override async Task OnInitializedAsync()
	{
		movieDto = await _movieServices.GetMovieById(id);
		genres = await _movieServices.GetAllGenre();
		languages = await _movieServices.GetAllLanguage();
		countries = await _movieServices.GetAllCountry();
		directors = await _movieServices.GetAllDirector();
		//	account = await _services.GetAccount(phoneNumber);
		screenings = await _services.GetScreeningMovies(id);
		seats = screenings.Seats;
		groupedSeats = seats
					.GroupBy(seat => seat.SeatNumber.Substring(0, 1)) // Nhóm theo ký tự đầu
					.OrderBy(g => g.Key) // Sắp xếp hàng từ A trở đi
					.ToDictionary(
						g => g.Key,
						g => g.OrderBy(seat => int.Parse(seat.SeatNumber.Substring(1))) // Sắp xếp theo số ghế trong từng hàng
						.ToList()
					);
		foods = await _services.GetFoodCombo();
	}
	public async Task OnClickToEditAmount()
	{
		StateHasChanged();
		await JS.InvokeVoidAsync("thaydoitongtien", totalPrices);
	}
	private string GetImageUrl(string imageUrl)
	{
		return $"https://localhost:7211/api/Resources/{imageUrl}";
	}
	#region vé
	private string GetSeatCssClass(SeatDto seat)
	{
		if (seat.Status == NeonCinema_Domain.Enum.seatEnum.Sold) return "bg-dark"; // Ghế đã bán
		if (seat.Status == NeonCinema_Domain.Enum.seatEnum.Maintenance) return "bg-secondary"; // Ghế bảo trì
		if (selectedSeats.Contains(seat.SeatNumber))
		{
			return "selected";
		}
		return "available";
		OnClickToEditAmount();

	}
	private void NextTab()
	{
		if (_selectedIndex < 1)
		{
			_selectedIndex++;
			OnClickToEditAmount();
		}
		
	}

	private void PreviousTab()
	{
		if (_selectedIndex > 0)
		{
			_selectedIndex--;
		}
	}
	private List<string> selectedSeats = new List<string>();
	private string selectedSeatNumbers = "";
	private List<Guid> selectedSeatsId = new List<Guid>(); // Danh sách lưu trữ ID ghế được chọn

	private async void SelectSeat(SeatDto seat)
	{
		if (!selectedSeats.Contains(seat.SeatNumber) && selectedSeats.Count >= 10)
		{
			await JS.InvokeVoidAsync("alert", "Không thể chọn quá 10 ghế!");
			return;
		}

		if (!selectedSeats.Contains(seat.SeatNumber))
		{
			char currentRow = seat.SeatNumber[0];
			int currentCol = int.Parse(seat.SeatNumber.Substring(1));
			foreach (var selectedSeat in selectedSeats)
			{
				char selectedRow = selectedSeat[0];
				int selectedCol = int.Parse(selectedSeat.Substring(1));

				if (currentRow == selectedRow && Math.Abs(currentCol - selectedCol) == 2)
				{
					int middleCol = (currentCol + selectedCol) / 2;
					string middleSeat = $"{currentRow}{middleCol}";

					if (!selectedSeats.Contains(middleSeat))
					{
						await JS.InvokeVoidAsync("alert", "Không được để trống ghế giữa!");
						return;
					}
				}

				if (currentCol == selectedCol && Math.Abs(currentRow - selectedRow) == 2)
				{
					// Tìm ghế ở giữa theo hàng
					char middleRow = (char)((currentRow + selectedRow) / 2);
					string middleSeat = $"{middleRow}{currentCol}";

					if (!selectedSeats.Contains(middleSeat))
					{
						await JS.InvokeVoidAsync("alert", "Không được để trống ghế giữa!");
						return;
					}
				}
			}
		}

		// Xử lý chọn/bỏ ghế
		if (selectedSeats.Contains(seat.SeatNumber))
		{
			Console.WriteLine($"Removing seat: {seat.SeatNumber}");
			selectedSeatsId.Remove(seat.ID);
			selectedSeats.Remove(seat.SeatNumber);
			totalPrices -= (decimal)seat.Price;
		}
		else
		{
			Console.WriteLine($"Adding seat: {seat.SeatNumber}");
			selectedSeats.Add(seat.SeatNumber);
			selectedSeatsId.Add(seat.ID);
			totalPrices += (decimal)seat.Price;
		}

		selectedSeatNumbers = string.Join(", ", selectedSeats);
		Console.WriteLine($"Selected seats: {selectedSeatNumbers}");
		OnClickToEditAmount();
	}
	#endregion
	#region combo
	private Dictionary<FoodComboDTO, int> selectedCombos = new Dictionary<FoodComboDTO, int>();
	private List<Guid> selectedComboId = new List<Guid>();
	private int currentValue = 0;
	private void Increase(FoodComboDTO combo)
	{
		if (selectedCombos.ContainsKey(combo))
		{
			selectedCombos[combo]++;
			currentValue++;
		}
		else
		{
			selectedCombos[combo] = 1;
			currentValue++;
		}

		totalPrices += combo.Amount;
		OnClickToEditAmount();
	}

	private void Decrease(FoodComboDTO combo)
	{
		if (selectedCombos.ContainsKey(combo) && selectedCombos[combo] > 0)
		{
			selectedCombos[combo]--;
			currentValue--;
			totalPrices -= combo.Amount;
			if (selectedCombos[combo] == 0)
			{
				selectedCombos.Remove(combo);
			}
		}
		OnClickToEditAmount(); // Cập nhật giao diện
	}

	private int GetComboQuantity(FoodComboDTO combo)
	{
		return selectedCombos.ContainsKey(combo) ? selectedCombos[combo] : 0;
	}


	#endregion
	CreateBookTicketRequest request = new CreateBookTicketRequest();
	NeonCinemasContext _context = new NeonCinemasContext();
	private string paymentStatus = string.Empty; // Trạng thái thanh toán

	private async void ProcessPayment()
	{
		request = new CreateBookTicketRequest()
			{
				ScreeningID = screenings.Id,
				SeatID = selectedSeatsId,
				MovieId = movieDto.ID,
				BillCombos = selectedCombos.Select(combo => new BillComboReuqest
				{
					FoodComboId = combo.Key.ID,
					Quantity = combo.Value,
				}).ToList(),
			};

		try
		{
			var createBill = await _services.BookTicket(request, CancellationToken.None);

			if (createBill.IsSuccessStatusCode)
			{
				selectedCombos.Clear();
				selectedComboId.Clear();
				selectedSeats.Clear();
				selectedSeatsId.Clear();
				currentValue = 0;
				totalPrices = 0;

				paymentStatus = "success";
				Console.WriteLine("Thành công");
			}
			else
			{
				paymentStatus = "failure";
				Console.WriteLine("Thất bại");
			}
		}
		catch (Exception ex)
		{
			paymentStatus = "failure";
			Console.WriteLine($"Có lỗi xảy ra: {ex.Message}");
		}

		StateHasChanged();
	}
	private string GetPaymentMessage(string status)
	{
		return status switch
		{
			"success" => "Thanh toán thành công!",
			"failure" => "Thanh toán thất bại. Vui lòng thử lại.",
			_ => string.Empty,
		};
	}

	private string GetAlertClass(string status)
	{
		return status switch
		{
			"success" => "alert-success",
			"failure" => "alert-danger",
			_ => string.Empty,
		};
	}

	private void CloseModal()
	{
		showConfirmModal = false;
		paymentStatus = string.Empty;
		StateHasChanged();
	}
}
<style>
	.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 1050;
	}

		.modal.fade .modal-dialog {
			transition: transform 0.3s ease-out;
			transform: translateY(-50px);
		}

	.modal-dialog {
		margin: 100px auto;
	}

	.modal-content {
		background-color: #fff;
		padding: 15px;
		border-radius: 5px;
	}

	.modal-header .btn-close {
		border: none;
		background: none;
	}

	.seat-type {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: 10px;
	}

	.seat-type-item {
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.square {
		width: 20px;
		height: 20px;
		display: inline-block;
	}

	.seat-name {
		font-size: 14px;
	}

	.screen-area {
		text-align: center;
		margin: 20px 0;
	}

	.screen {
		background-color: #ddd;
		padding: 10px;
		font-weight: bold;
		margin-bottom: 20px;
	}

	.seat-selection {
		display: flex;
		justify-content: center;
		margin-top: 20px;
	}

	.seat-column {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.seat-item {
		margin: 10px;
	}

	.seat-box {
		width: 40px;
		height: 40px;
		display: flex;
		justify-content: center;
		align-items: center;
		border: 2px solid #ccc;
		border-radius: 5px;
		cursor: pointer;
		font-size: 14px;
	}


	.seat-selection {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-top: 20px;
	}

	.seat-row {
		display: flex;
		justify-content: center;
		margin-bottom: 10px;
	}

	.sold {
		background-color: rgb(33 37 41);
		cursor: not-allowed;
	}

	.selected {
		background-color: rgb(13 110 253);
	}

	.available {
		background-color: none;
	}

	.combo-item {
		border: 1px solid #ccc;
		padding: 10px;
		margin: 10px;
	}

	.text-center h3 {
		text-align: center;
		margin: 20px 0;
	}

	.icon-box {
		display: flex;
		align-items: center;
		justify-content: flex-start;
	}

	.icon-box-img img {
		width: 80px;
		height: 80px;
		object-fit: cover;
		margin-right: 15px;
	}

	.icon-box-text {
		display: flex;
		flex-direction: column;
		justify-content: center;
		margin-left: 20px;
	}

	.quantity {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 5px;
	}

		.quantity .minus, .quantity .plus {
			background-color: #ddd;
			padding: 5px 10px;
			font-size: 16px;
			cursor: pointer;
			border-radius: 5px;
			transition: background-color 0.3s ease;
		}

			.quantity .minus:hover, .quantity .plus:hover {
				background-color: #aaa;
			}

	.button-container {
		display: flex;
		justify-content: center;
		gap: 20px;
		margin-top: 20px;
	}

	button {
		padding: 10px 20px;
		font-size: 16px;
		border-radius: 5px;
		cursor: pointer;
	}

	.cinema-concession-container {
		display: flex;
		justify-content: space-between;
		gap: 20px;
	}

	.combo-container {
		flex: 1;
	}

	.payment-method-container {
		flex: 0 0 300px;
	}

	.icon-box {
		margin-bottom: 15px;
	}

	.icon-box-img {
		max-width: 80px;
		width: 100%;
	}

	h3 {
		font-size: 1.25rem;
		margin-bottom: 15px;
	}

	.text-center {
		margin-bottom: 10px;
	}

</style>