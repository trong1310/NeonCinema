@page "/staff-details/{id:guid}"
@using NeonCinema_Application.DataTransferObject.User
@layout LayoutAdmin
@using NeonCinema_Client.Data.IServices.User
@using System.Globalization
@using System.Text.Json
@inject IUserServices _service
@inject HttpClient _http
@inject NavigationManager _navigation
@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid mt-5">
	<h2 class="text-center mb-4 font-weight-bold" style="margin-top:30px;">Chỉnh sửa nhân viên</h2>
	<div class="row justify-content-center">
		<div class="col-md-3 text-center mb-4 mt-5">
			<img src="@profileFilmsImage" alt="Profile" class="rounded-circle img-fluid profile-pic"> <br />
			<label class="custom-file-upload">
				<span style="margin-left:-5px">
					<i class="material-icons">cloud_upload</i>
				</span>
				<InputFile OnChange="HandleSelected" class="d-none" style="width: 200px" />
				<span>Chọn ảnh</span>
			</label>
		</div>
		<div class="col-md-9" style="margin-top:10px;">
			<form>
				<div class="row">
					<div class="col-md-6">
						<div class="form-group">
							<label for="fullname" class="font-weight-bold">Họ và tên</label>
							<input type="text" class="form-control" id="fullname" @bind-value="@user.FullName">
						</div>
					</div>
					<div class="col-md-6">
						<div class="form-group">
							<label for="phone" class="font-weight-bold">Số điện thoại</label>
							<input type="text" class="form-control" id="phone" @bind-value="@user.PhoneNumber">
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-6">
						<div class="form-group">
							<label for="email" class="font-weight-bold">Email</label>
							<input type="email" class="form-control" id="email" @bind-value="@user.Email">
						</div>
					</div>
					<div class="col-md-6">
						<div class="form-group">
							<label for="dob" class="font-weight-bold">Ngày sinh</label>
							<input type="date" class="form-control" @bind-value="@user.DateOrBriht" />
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-6">
						<div class="col-md-6">
							<div class="form-group">
								<label for="gender" class="font-weight-bold">Giới tính</label>
								<div style="margin-left: -20px; margin-top: 5px">
									<div class="form-check form-check-inline">
										<input class="form-check-input" type="radio" id="genderMale" name="gender"
											   checked="@user.Gender" @onclick="@(() => user.Gender = true)" />
										<label class="form-check-label" for="genderMale" style="margin-left: 0.5rem; margin-top: 5px">Nam</label>
									</div>
									<div class="form-check form-check-inline">
										<input class="form-check-input" type="radio" id="genderFemale" name="gender"
											   checked="@(user.Gender == false)" @onclick="@(() => user.Gender = false)" />
										<label class="form-check-label" for="genderFemale" style="margin-left: 0.5rem; margin-top: 5px">Nữ</label>
									</div>
								</div>
							</div>
						</div>

					</div>
				</div>

				<div class="form-group">
					<label for="address" class="font-weight-bold">Địa chỉ</label>
					<textarea class="form-control" id="address" rows="3" @bind="@user.Adderss"></textarea>
				</div>

				<div class="text-center">
					<button type="button" @onclick="UpdateAccout" class="btn btn-primary btn-lg">Lưu</button>

				</div>
			</form>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public Guid id { get; set; }
	private UserDTO user = new UserDTO();
	UserUpdateRequest updateRequest = new UserUpdateRequest();
	private IBrowserFile selectedFile;
	private string profileFilmsImage = "https://media.istockphoto.com/id/1397556857/vi/vec-to/avatar-13.jpg?s=612x612&w=0&k=20&c=rNjYzaNEVujaKNJBN2yBdHGDjoYrPRgeSIDrenAZcbE=";

	protected override async Task OnInitializedAsync()
	{
		user = await _service.GetByIDUser(id, CancellationToken.None);
		profileFilmsImage = GetImageUrl(user.Images);
		if (user.Gender == null)
		{
			user.Gender = true; // Mặc định là Nam
		}

	}
	private async Task HandleSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
		var imageUrl = await GetImageUrlUpdate(selectedFile);
		if (imageUrl != null)
		{
			profileFilmsImage = imageUrl;
			StateHasChanged();
		}

	}
	private async Task<string> GetImageUrlUpdate(IBrowserFile file)
	{
		if (file.ContentType.StartsWith("image/"))
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
			return $"data:{file.ContentType};base64,{imageBase64}";
		}
		return null;
	}
	private string GetImageUrl(string imageUrl)
	{
		return $"https://localhost:7211/api/Resources/{imageUrl}";
	}
	private async Task UpdateAccout()
	{
		try
		{
			string fileName = user.Images; // Dùng ảnh hiện tại nếu không chọn ảnh mới

			if (selectedFile != null)
			{
				// Logic upload ảnh
				var content = new MultipartFormDataContent();
				var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 30));
				fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);

				content.Add(fileContent, "file", selectedFile.Name);
				var response = await _http.PostAsync("https://localhost:7211/api/UploadImages/upload-image", content);

				if (response.IsSuccessStatusCode)
				{
					var jsonResponse = await response.Content.ReadAsStringAsync();
					var jsonDoc = JsonDocument.Parse(jsonResponse);
					var fileUrl = jsonDoc.RootElement.GetProperty("fileUrl").GetString();
					fileName = Path.GetFileName(fileUrl);
				}
				else
				{
					Console.WriteLine($"Lỗi upload ảnh. Status code: {response.StatusCode}");
				}
			}
			updateRequest = new UserUpdateRequest()
				{
					Id = user.ID,
					FullName = user.FullName,
					Email = user.Email,
					Adderss = user.Adderss,
					DateOrBriht = user.DateOrBriht,
					Gender = user.Gender,
					PhoneNumber = user.PhoneNumber,
					Images = fileName
				};

			var updateResponse = await _service.UpdateUser(updateRequest, CancellationToken.None);
			if (updateResponse.IsSuccessStatusCode)
			{
				Console.WriteLine("Chỉnh sửa thành công.");
				_navigation.NavigateTo("/staff");
			}
			else
			{
				Console.WriteLine($"Chỉnh sửa thất bại: {await updateResponse.Content.ReadAsStringAsync()}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Lỗi: {ex.Message}");
			Console.WriteLine($"Chi tiết ngoại lệ: {ex.StackTrace}");
		}
	}

}

<style>
	body {
		background-color: #f4f4f9;
	}

	.card {
		border-radius: 10px;
		background-color: white;
		max-width: 1000px;
		margin: auto;
	}

	h2 {
		font-family: 'Arial', sans-serif;
		color: #333;
	}

	.profile-pic {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border: 3px solid #eaeaea;
		display: block;
		margin-left: auto;
		margin-right: auto;
	}


	label {
		font-size: 14px;
		color: #555;
	}

	.custom-file-upload {
		display: flex;
		align-items: center; /* Căn giữa theo chiều dọc */
		justify-content: center; /* Căn giữa theo chiều ngang */
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 10px;
		background-color: #a9a9a9; /* Màu nền của nút */
		color: white; /* Màu chữ */
		border: none; /* Bỏ viền */
		text-align: center;
		width: 150px;
		margin-left: auto; /* Thêm */
		margin-right: auto;
	}

		.custom-file-upload span {
			margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
		}

		.custom-file-upload:hover {
			background-color: #8f8f8f; /* Màu nền khi hover */
		}

	input, select, textarea {
		border-radius: 5px;
		border: 1px solid #ccc;
		padding: 10px;
		margin-left: -20px; /* Shift input fields slightly left */
	}

	.form-control:focus {
		border-color: #007bff;
		box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
	}

	textarea {
		resize: none;
	}

	.btn-primary {
		background-color: #007bff;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

		.btn-primary:hover {
			background-color: #0056b3;
		}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-check {
		margin-right: 15px; /* Adjust spacing between radio buttons */
	}

	label {
		margin-left: -17px;
	}
</style>
