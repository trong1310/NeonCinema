@page "/staff-create"
@using Microsoft.AspNetCore.Http;
@using NeonCinema_Application.DataTransferObject.User
@using NeonCinema_Client.Data.IServices.User
@layout LayoutAdmin
@using System.Text.Json
@using NeonCinema_Domain.Enum
@using NeonCinema_Infrastructure.Database.AppDbContext
@inject IUserServices UserService
@inject NavigationManager _navigation
@inject HttpClient _http
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<MudSnackbarProvider MaxSnackbars="3" Position="SnackbarPosition.TopRight" PreventDuplicates="true" />
<EditForm Model="request" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="container-fluid mt-3">
        <h2 class="text-center mb-4 font-weight-bold">Thêm nhân viên mới</h2>
        <div class="row justify-content-center">
            <div class="col-md-3 text-center mb-4 mt-5">
                <img src="@profileImage" alt="Profile" class="rounded-circle img-fluid profile-pic"> <br />
                <label class="custom-file-upload">
                    <span style="margin-left:-5px">
                        <i class="material-icons">cloud_upload</i>
                    </span>
                    <InputFile OnChange="HandleSelected" class="d-none" style="width: 200px" />
                    <span>Chọn ảnh</span>
                </label>
            </div>
            <div class="col-md-9" style="margin-top:10px;">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Họ và tên</label>
                            <input type="text" class="form-control" id="name" @bind-value="request.FullName" />
                            <ValidationMessage For="@(() => request.FullName)" style="margin-top: 2px" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Số điện thoại</label>
                            <input type="text" class="form-control" id="phone" @bind-value="request.PhoneNumber">
                            <ValidationMessage For="@(() => request.PhoneNumber)" style="margin-top: 2px" />
                            @if (!IsShowPhoneNotification)
                            {
                                <span class="text-danger" style="font-size: 1rem" ; margin-top: 2px>@errorPhoneMessage</span>
                            }
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" @bind-value="request.Email">
                            <ValidationMessage For="@(() => request.Email)" style="margin-top: 2px" />
                            @if (!IsShowEmailNotification)
                            {
                                <span class="text-danger" style="font-size: 1rem; margin-top: 2px">@errorEmailMessage</span>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Ngày sinh</label>
                            <input type="date" class="form-control" id="dateofbirth" @bind-value="request.DateOrBriht">
                            <ValidationMessage For="@(() => request.DateOrBriht)" style="margin-top: 2px" />
                            @if (!IsShowYearNotification)
                            {
                                <span class="text-danger" style="font-size: 1rem; margin-top: 2px">@errorYearMessage</span>
                            }
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">Giới tính</label> <br />
                            <div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" id="genderMale" name="gender" value="true" @onchange="@((e) => request.Gender = true)" checked />
                                    <label class="form-check-label" for="genderMale" style="margin-left: 0.5rem; margin-top: 5px">Nam</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" id="genderFemale" name="gender" value="false" @onchange="@((e) => request.Gender = false)" />
                                    <label class="form-check-label" for="genderFemale" style="margin-left: 0.5rem; margin-top: 5px">Nữ</label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Địa chỉ</label>
                    <textarea class="form-control" id="Description" rows="3" @bind="request.Adderss"></textarea>
                    @if (!IsShowAddressNotification)
                    {
                        <span class="text-danger" style="font-size: 1rem; margin-top: 2px">@errorAddressMessage</span>
                    }
                </div>

                <div class="text-center">
                    <button type="submit" class="btn btn-success btn-lg" disabled="@isSubmitting"
                            style="width: 15%; min-width: 200px;">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"
                              style="display: @(isSubmitting ? "inline-block" : "none")"></span>
                        <span>@(isSubmitting ? "Đang xử lý..." : "Thêm")</span>
                    </button>

                    <button type="button" class="btn btn-warning btn-lg" @onclick="NavigateToStaff">Quay lại</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private NeonCinemasContext _context = new NeonCinemasContext();
    private UserCreateRequest request = new UserCreateRequest();
    private IBrowserFile selectedFile;
    private bool showPassword = false;
    private string errorEmailMessage;
    private string errorPhoneMessage;
    private string errorYearMessage;
    private string errorAddressMessage;
    private bool IsShowPhoneNotification = true;
    private bool IsShowEmailNotification = true;
    private bool IsShowYearNotification = true;
    private bool IsShowGenderNotification = true;
    private bool IsShowAddressNotification = true;
    private bool isSubmitting = false;
    private bool shouldNavigate = false;

    private string profileImage = "https://media.istockphoto.com/id/1397556857/vi/vec-to/avatar-13.jpg?s=612x612&w=0&k=20&c=rNjYzaNEVujaKNJBN2yBdHGDjoYrPRgeSIDrenAZcbE="; // URL mặc định cho ảnh
    private void ShowSnackbar(string message, Severity severity)
    {
        Snackbar.Add(message, severity, options =>
        {
            options.RequireInteraction = false; // Không bắt buộc người dùng tắt
            options.VisibleStateDuration = 3000; // Thời gian hiển thị (3 giây)
        });
        isSubmitting = false;
        // Chuyển hướng sau khi hoàn tất hiển thị
        Task.Run(async () =>
        {
            await Task.Delay(3000); // Đợi thời gian hiển thị của Snackbar
            _navigation.NavigateTo("/staff"); // Chuyển hướng
        });
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        // Tạo URL tạm thời cho hình ảnh đã chọn
        var imageUrl = await GetImageUrl(selectedFile);
        if (imageUrl != null)
        {
            profileImage = imageUrl;
            StateHasChanged(); // Cập nhật giao diện
        }
    }

    private async Task<string> GetImageUrl(IBrowserFile file)
    {
        // Chỉ tạo URL cho các tệp hình ảnh
        if (file.ContentType.StartsWith("image/"))
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
            return $"data:{file.ContentType};base64,{imageBase64}";
        }

        return null;
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        try
        {
            IsShowEmailNotification = true;
            IsShowPhoneNotification = true;
            IsShowYearNotification = true;
            errorEmailMessage = string.Empty;
            errorPhoneMessage = string.Empty;
            errorYearMessage = string.Empty;
            // Nếu không có file được chọn, sử dụng ảnh mặc định
            if (selectedFile == null)
            {
                request.Images = "avt-default.jpg"; // Tên ảnh mặc định trong hệ thống
            }
            else
            {
                // Xử lý upload ảnh khi có file được chọn
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);

                content.Add(fileContent, "file", selectedFile.Name);
                var response = await _http.PostAsync("https://localhost:7211/api/UploadImages/upload-image", content);

                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    var jsonDoc = JsonDocument.Parse(jsonResponse);
                    var fileUrl = jsonDoc.RootElement.GetProperty("fileUrl").GetString();
                    var fileName = Path.GetFileName(fileUrl);
                    request.Images = fileName;

                    Console.WriteLine($"Upload thành công. Tên file: {fileName}");
                }
                else
                {
                    Console.WriteLine($"Lỗi upload ảnh. Status code: {response.StatusCode}");
                    return;
                }
            }

            var emailExists = _context.Users.Any(x => x.Email == request.Email);
            if (emailExists)
            {
                errorEmailMessage = "Email này đã tồn tại. Vui lòng chọn email khác.";
                IsShowEmailNotification = false;
                isSubmitting = false;
                return;
            }
            if (request.DateOrBriht == null ||
                request.DateOrBriht.Year < 1900 ||
                request.DateOrBriht > DateTime.Now.AddYears(-18))
            {
                errorYearMessage = "Nhân viên phải từ 18 trở lên.";
                IsShowYearNotification = false;
                isSubmitting = false;
                return;
            }

            if (string.IsNullOrWhiteSpace(request.Adderss))
            {
                errorAddressMessage = "Địa chỉ không được để trống.";
                IsShowAddressNotification = false;
                isSubmitting = false;
                return;
            }
            // Kiểm tra số điện thoại đã tồn tại
            var phoneExists = _context.Users.Any(x => x.PhoneNumber == request.PhoneNumber);
            if (phoneExists)
            {
                errorPhoneMessage = "Số điện thoại này đã tồn tại. Vui lòng chọn số khác.";
                IsShowPhoneNotification = false;
                isSubmitting = false;
                return;
            }

            var userResponse = await UserService.CreateUser(request);
            if (userResponse.IsSuccessStatusCode)
            {
                ShowSnackbar("Thêm nhân viên thành công.", Severity.Success);
                isSubmitting = false;
            }
            else
            {
                var errorContent = await userResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Có lỗi xảy ra khi tạo nhân viên: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi: {ex.Message}");
            Console.WriteLine($"Chi tiết ngoại lệ: {ex.StackTrace}");
        }
    }

    private async Task NavigateToStaff()
    {
        // _navigation.NavigateTo("/staff");
        _navigation.NavigateTo("/staff");
    }
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword; // Đổi trạng thái hiển thị mật khẩu
    }
}

<style>
    body {
        background-color: #f4f4f9;
    }

    .card {
        border-radius: 10px;
        background-color: white;
        max-width: 1000px;
        margin: auto;
    }

    h2 {
        font-family: 'Arial', sans-serif;
        color: #333;
    }

    .profile-pic {
        width: 200px;
        height: 200px;
        object-fit: cover;
        border: 3px solid #eaeaea;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    .custom-file-upload {
        display: flex;
        align-items: center; /* Căn giữa theo chiều dọc */
        justify-content: center; /* Căn giữa theo chiều ngang */
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 10px;
        background-color: #a9a9a9; /* Màu nền của nút */
        color: white; /* Màu chữ */
        border: none; /* Bỏ viền */
        text-align: center;
        width: 150px;
        margin-left: auto; /* Thêm */
        margin-right: auto;
    }

        .custom-file-upload span {
            margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
        }

        .custom-file-upload:hover {
            background-color: #8f8f8f; /* Màu nền khi hover */
        }

    label {
        font-size: 14px;
        color: #555;
    }

    input, select, textarea {
        border-radius: 5px;
        border: 1px solid #ccc;
        padding: 10px;
        margin-left: -20px;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
    }

    textarea {
        resize: none;
    }

    .btn-success {
        background-color: #007bff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
    }

        .btn-success:hover {
            background-color: #0056b3;
        }

    .btn-warning {
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-check {
        margin-top: 5px;
        margin-right: 50px;
        padding-left: 0; /* Loại bỏ padding thừa */
        margin-left: 0;
    }


    .password-icon {
        position: absolute;
        right: 30px; /* Khoảng cách từ lề phải */
        top: 62%; /* Đưa icon vào giữa theo chiều dọc */
        transform: translateY(-50%); /* Căn giữa hoàn toàn */
        cursor: pointer; /* Con trỏ tay khi hover */
        background: transparent; /* Nền trong suốt */
        border: none; /* Bỏ viền */
    }
</style>
