@page "/addroom"
@using NeonCinema_Application.DataTransferObject.Cinemas
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Domain.Enum
@inject IRoomService RoomService
@inject NavigationManager Navigation

<h3>Thêm Phòng Chiếu</h3>

<div class="form-group">
    <label for="roomName">Tên Phòng</label>
        <input id="roomName" class="form-control" @bind="request.Name" />
</div>
    
<div class="form-group">
    <label for="rowNumber">Số Hàng</label>
        <input id="rowNumber" type="number" class="form-control" @bind="request.RowNumber" />
</div>
<div class="form-group">
    <label for="columnNumber">Số Cột</label>
        <input id="columnNumber" type="number" class="form-control" @bind="request.ColumnNumber" />
</div>
<div class="form-group">
    <label for="cinemasId">Chọn Rạp</label>
        <select id="cinemasId" class="form-control" @bind="request.CinemasId">
        @foreach (var cinema in cinemas)
        {
            <option value="@cinema.ID">@cinema.Name</option>
        }
    </select>
</div>
<div class="form-group">
    <label for="status">Trạng Thái</label>
        <select id="status" class="form-control" @bind="request.Status">
        <option value="@(EntityStatus.Active)">Hoạt động</option>
        <option value="@(EntityStatus.Inactive)">Không hoạt động</option>
    </select>
</div>
    @* <h5>Chọn Ghế</h5>
    <div class="seat-layout"
         style="display: grid; grid-template-rows: repeat(@request.RowNumber, 1fr); grid-template-columns: repeat(@request.ColumnNumber, 1fr); grid-gap: 20px;">
        @for (int row = 0; row < request.RowNumber; row++)
        {
            @for (int col = 0; col < request.ColumnNumber; col++)
            {

                <button class="btn btn-secondary seat-btn" @onclick="() => SelectSeat(row, col)">
                    @($"{(char)('A' + row)}{col + 1}")
                </button>
            }
        }
    </div> *@
<button class="btn btn-success" @onclick="AddRoom">Thêm</button>
<button class="btn btn-secondary" @onclick="Cancel">Hủy</button>

@code {
    //private RoomDTO room = new RoomDTO();
    private List<CinemasDTO> cinemas = new List<CinemasDTO>();
    private RoomCreateRequest request = new RoomCreateRequest();
    private List<string> selectedSeats = new List<string>();
    private void SelectSeat(int row, int col)
    {
        string seatLabel = $"{(char)('A' + row)}{col + 1}";
        if (selectedSeats.Contains(seatLabel))
        {
            selectedSeats.Remove(seatLabel);
        }
        else
        {
            selectedSeats.Add(seatLabel);

        }
    }
    protected override async Task OnInitializedAsync()
    {
        cinemas = await RoomService.GetAllCinemas();
    }
    
    private async Task AddRoom()
    {
       
            await RoomService.CreateRoom(request);
            Navigation.NavigateTo("/listroom");
       
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/listroom");
    }

    // private bool IsValidRoom()
    // {
    //     // Add validation logic for the room details
    //     return !string.IsNullOrEmpty(room.Name) && room.RowNumber > 0 && room.ColumnNumber > 0;
    // }
}
<style>
    .seat-layout {
        display: grid;
        grid-template-rows: repeat(var(--row-count), 1fr);
        grid-template-columns: repeat(var(--col-count), 1fr);
        grid-gap: 20px; /* Set horizontal and vertical gap between seats */
        margin-top: 10px;
    }

    .seat-btn {
        /* width: 60px;
            height: 60px; */
        text-align: center;
        font-size: 14px;
        padding: 5px;
        cursor: pointer;
        background-color: orange;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

        .seat-btn:hover {
            background-color: #007bff;
            color: black;
        }

        .seat-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
</style>
