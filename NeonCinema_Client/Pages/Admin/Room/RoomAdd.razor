@page "/addroom"
@using NeonCinema_Application.DataTransferObject.Cinemas
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Domain.Enum
@inject IRoomService RoomService
@layout LayoutAdmin
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="request" OnValidSubmit="AddRoom">
    <DataAnnotationsValidator />

    <div class="add-room-container">
        <h3 class="title">Thêm phòng chiếu</h3>

        <div class="form">
            <div class="form-group">
                <label for="roomName">Tên phòng</label>
                <input id="roomName" class="form-control" @bind="request.Name" />
                <ValidationMessage For="@(() => request.Name)" />
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <div class="text-danger">@errorMessage</div>
                }
            </div>

            <div class="form-group">
                <label for="rowNumber">Số hàng</label>
                <input id="rowNumber" type="number" class="form-control" @bind="request.RowNumber" />
                <ValidationMessage For="@(() => request.RowNumber)" />
            </div>

            <div class="form-group">
                <label for="columnNumber">Số cột</label>
                <input id="columnNumber" type="number" class="form-control" @bind="request.ColumnNumber" />
                <ValidationMessage For="@(() => request.ColumnNumber)" />
            </div>
        </div>

        <div class="button-group">
            <button class="btn btn-success" type="submit">Thêm</button>
            <button class="btn btn-secondary" @onclick="Cancel">Hủy</button>
        </div>
    </div>

    
    
</EditForm>
@if (showConfirmation)
{
    <div class="confirmation-container @showClass">
        <h4>Xác nhận thêm phòng</h4>
        <p><strong>Tên phòng:</strong> @request.Name</p>
        <p><strong>Số hàng:</strong> @request.RowNumber</p>
        <p><strong>Số cột:</strong> @request.ColumnNumber</p>

        <div class="button-group">
            <button class="btn btn-success" @onclick="ConfirmAddRoom">Xác nhận</button>
            <button class="btn btn-secondary" @onclick="CancelConfirmation">Hủy</button>
        </div>
    </div>
}
@code {
    
    private List<CinemasDTO> cinemas = new List<CinemasDTO>();
    private string errorMessage;
    private bool showConfirmation = false;
    private string showClass = "";
    private RoomCreateRequest request = new RoomCreateRequest
    {
        Status = EntityStatus.Active ,
        CinemasId = Guid.Parse("8fb86c77-213f-4316-8a7a-43fee795514e")
    };
    private List<string> selectedSeats = new List<string>();
    private void SelectSeat(int row, int col)
    {
        string seatLabel = $"{(char)('A' + row)}{col + 1}";
        if (selectedSeats.Contains(seatLabel))
        {
            selectedSeats.Remove(seatLabel);
        }
        else
        {
            selectedSeats.Add(seatLabel);
        }
    }
   
    protected override async Task OnInitializedAsync()
    {
        cinemas = await RoomService.GetAllCinemas();
    }
    private void ShowConfirmationForm()
    {
        showConfirmation = true;
        showClass = "show";
    }
    
    private async Task AddRoom()
    {
        // if (request.CinemasId == Guid.Empty)
        // {
        //     errorMessage = "Vui lòng chọn rạp.";
        //     StateHasChanged(); 
        //     return;
        // }
        var normalizedName = NormalizeName(request.Name);
        if (await IsRoomNameDuplicate(normalizedName))
        {
            errorMessage = "Tên phòng đã tồn tại. Vui lòng chọn tên khác.";
            StateHasChanged();
            return;
        }
        errorMessage = null;
        ShowConfirmationForm();
        //StateHasChanged();
        //await RoomService.CreateRoom(request);
        //Navigation.NavigateTo("/listroom");
    }
    private async Task ConfirmAddRoom()
    {
        await RoomService.CreateRoom(request);
        Navigation.NavigateTo("/listroom");
    }
    private void CancelConfirmation()
    {
        showConfirmation = false; // Ẩn phần xác nhận
        showClass = "";
        
    }
    private void Cancel()
    {
        Navigation.NavigateTo("/listroom");
    }
    private string NormalizeName(string name)
    {
        return string.Join(" ", name.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)).Trim();
    }

    private async Task<bool> IsRoomNameDuplicate(string name)
    {
        var normalizedName = NormalizeName(name).ToLowerInvariant(); 
        var existingRooms = await RoomService.GetAllRooms();
        return existingRooms.Any(r => NormalizeName(r.Name).ToLowerInvariant() == normalizedName);
    }
    
}
<style>
    .add-room-container {
        max-width: 600px;
        margin: 30px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
    }

    .text-danger {
        color: #dc3545; 
        font-size: 0.875rem; 
        margin-top: 5px;
    }
    .form {
        display: grid;
        gap: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    label {
        margin-bottom: 5px;
        font-weight: 600;
    }

    .form-control {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .button-group {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
        border: none;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

    .btn-success:hover {
        background-color: #218838;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }
    

    .confirmation-container {
        position: fixed;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        max-width: 550px; /* Đặt chiều ngang là 900px */
        width: 100%; /* Đảm bảo container có thể mở rộng tối đa đến 900px */
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.5s ease, visibility 0.5s ease, top 0.5s ease;
    }

        
        


        .confirmation-container.show {
            opacity: 1;
            visibility: visible;
            top: 20%;
            transform: translate(-50%, -50%);
        }

    /* Optional: Add smooth fade-in and slide-down transition */
    .fade-enter-active, .fade-leave-active {
        transition: opacity 0.5s ease-in-out, top 0.5s ease;
    }

    .fade-enter, .fade-leave-to {
        opacity: 0;
        top: -100%;
    }

</style>
