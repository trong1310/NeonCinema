@page "/editádasdroom/{roomId:guid}"
@using NeonCinema_Application.DataTransferObject.Cinemas
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Domain.Enum
@inject IRoomService SV
@inject NavigationManager Navigation

<h3>Update</h3>

<EditForm Model="request" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label for="roomName">Tên Phòng</label>
        <InputText id="roomName" class="form-control" @bind-Value="request.Name" />
    </div>
    <div class="form-group">
        <label for="rowNumber">Số Hàng</label>
        <InputNumber id="rowNumber" type="number" class="form-control" @bind-Value="request.RowNumber" />
    </div>
    <div class="form-group">
        <label for="seaNumber">Sức chứa</label>
        <InputNumber id="seaNumber" type="number" class="form-control" @bind-Value="request.SeatingCapacity" />
    </div>
    <div class="form-group">
        <label for="columnNumber">Số Cột</label>
        <InputNumber id="columnNumber" type="number" class="form-control" @bind-Value="request.ColumnNumber" />
    </div>
    <div class="form-group">
        <label for="cinemasId">Chọn Rạp</label>
        <InputSelect id="cinemasId" class="form-control" @bind-Value="request.CinemasId">
            @foreach (var cinema in cinemasDTOs)
            {
                <option value="@cinema.ID">@cinema.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="status">Trạng Thái</label>
        <InputSelect id="status" class="form-control" @bind-Value="request.Status">
            <option value="@(EntityStatus.Active)">Hoạt động</option>
            <option value="@(EntityStatus.Inactive)">Không hoạt động</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Cập Nhật</button>
    <button @onclick="Cancel" class="btn btn-primary">Hủy</button>
</EditForm>

@code {
    [Parameter]
    public Guid roomId { get; set; }
    private List<CinemasDTO> cinemasDTOs = new List<CinemasDTO>();
    private RoomUpdateRequest request = new RoomUpdateRequest();
    protected override async Task OnInitializedAsync()
    {
        cinemasDTOs = await SV.GetAllCinemas();
        var rs = await SV.GetRoomById(roomId);
        if (rs != null)
        {
            request = new RoomUpdateRequest()
            {
                    ID = rs.ID,
                    Name = rs.Name,
                    SeatingCapacity = rs.SeatingCapacity,
                    ColumnNumber = rs.ColumnNumber,
                    RowNumber = rs.RowNumber,
                    Status = rs.Status,
                    CinemasId = rs.CinemasId
            };

        }
    }
    private async Task HandleValidSubmit()
    {
        var response = await SV.UpdateRoom(request.ID, request);
        if (response.IsSuccessStatusCode)
        {
            // Chuyển hướng khi cập nhật thành công
            Navigation.NavigateTo("/listroom");
        }
        else
        {
            // Đọc lỗi và hiển thị thông báo lỗi
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Error updating room: " + error);
        }
    }
    private void Cancel()
    {
        Navigation.NavigateTo("/listroom");
    }
}
