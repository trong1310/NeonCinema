@page "/rooms"
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Application.DataTransferObject.SeatTypes
@using NeonCinema_Application.DataTransferObject.Seats
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Client.Data.IServices.Seat
@using NeonCinema_Domain.Enum
@inject ISeatService SV
@inject IRoomService RoomService
@inject NavigationManager Navi
@layout LayoutAdmin
<link rel="stylesheet" href="/css/Room/RoomAUL.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="CTN" style="text-align: center">
    <h2 style="margin-top: 30px">Danh sách phòng chiếu</h2>

    <div class="d-flex justify-content-center align-items-center mb-3 search-room-container" style="margin-left: 80px; margin-top: 30px">
        <input type="text" placeholder="Tìm kiếm theo tên phòng" class="form-control me-2" style="width: 70%;" @bind-value="searchTerm" @bind-value:event="oninput" />
        <button class="btn btn-success" @onclick="ShowCreateRoomModal">Thêm phòng</button>
    </div>
</div>

<div class="container" style="width: 1200px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);">
    @if (FilteredRooms != null)
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Tên phòng</th>
                    <th>Sức chứa</th>
                    <th>Ghế</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var room in FilteredRooms)
                {
                    <tr>
                        <td><strong>@room.Name</strong></td>
                        <td>@room.SeatingCapacity</td>
                        <td>@(seatNames.ContainsKey(room.SeatID) ? seatNames[room.SeatID] : "Loading...")</td>

                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input"
                                       type="checkbox"
                                       role="switch"
                                       id="flexSwitchCheckDefault_@(room.Status)"
                                       checked="@(room.Status == EntityStatus.Active)"
                                       @onchange="(e) => ToggleRoomStatus(room, e)" />
                                <label class="form-check-label" for="flexSwitchCheckDefault_@(room.Status)">
                                    @(room.Status == EntityStatus.Active ? "Mở" : "Đóng")
                                </label>
                            </div>
                        </td>
                        <td>
                            <button style="background-color: #eea90c; border-color: black" class="btn btn-primary" @onclick="@(() => ShowEditRoomModal(room))"><i class="fa-regular fa-pen-to-square" style="color: black;"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading...</p>
    }
</div>
@if (isCreateRoomModalVisible)
{
    <div class="modal fade-in show" style="display:block; background-color:rgba(0, 0, 0, 0.5);" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document" style="margin-top: 0px">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm phòng mới</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateRoomModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newRoom" OnValidSubmit="CreateRoom">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="roomName" class="form-label">Tên phòng</label>
                            <InputText id="roomName" class="form-control" @bind-Value="newRoom.Name" />
                            <ValidationMessage For="@(() => newRoom.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="seatingCapacity" class="form-label">Sức chứa</label>
                            <InputNumber id="seatingCapacity" class="form-control" @bind-Value="newRoom.SeatingCapacity" />
                            <ValidationMessage For="@(() => newRoom.SeatingCapacity)" />
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="seattypeid">Chọn  ghế:</label>
                                <InputSelect id="seattypeid" class="form-control" @bind-Value="newRoom.SeatID">
                                    <option value="" disabled selected>Chọn loại ghế</option>
                                    @if (seatDTOs != null && seatDTOs.Count > 0)
                                    {
                                        @foreach (var item in seatDTOs)
                                        {
                                            <option value="@item.ID">@item.SeatTypeName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newRoom.SeatID)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="status" class="form-label">Trạng thái</label>
                            <InputSelect id="status" class="form-control" @bind-Value="newRoom.Status">
                                <option value="@(EntityStatus.Active)">Hoạt động</option>
                                <option value="@(EntityStatus.Locked)">Không hoạt động</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => newRoom.Status)" />
                        </div>

                        <button type="submit" class="btn btn-success">Tạo phòng</button>
                        <button type="button" class="btn btn-secondary" @onclick="HideCreateRoomModal">Hủy</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (isEditRoomModalVisible)
{
    <div class="modal fade-in show" style="display:block; background-color:rgba(0, 0, 0, 0.5);" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document" style="margin-top: 0">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chỉnh sửa phòng chiếu</h5>
                    <button type="button" class="btn-close" @onclick="HideEditRoomModal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedRoom != null)
                    {
                        <EditForm Model="selectedRoom" OnValidSubmit="UpdateRoom">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="editRoomName" class="form-label">Tên phòng</label>
                                <InputText id="editRoomName" class="form-control" @bind-Value="selectedRoom.Name" />
                                <ValidationMessage For="@(() => selectedRoom.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="editSeatingCapacity" class="form-label">Sức chứa</label>
                                <InputNumber id="editSeatingCapacity" class="form-control" @bind-Value="selectedRoom.SeatingCapacity" />
                                <ValidationMessage For="@(() => selectedRoom.SeatingCapacity)" />
                            </div>

                            <div class="mb-3">
                                <label for="editStatus" class="form-label">Trạng thái</label>
                                <InputSelect id="editStatus" class="form-control" @bind-Value="selectedRoom.Status">
                                    <option value="@(EntityStatus.Active)">Hoạt động</option>
                                    <option value="@(EntityStatus.Locked)">Không hoạt động</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => selectedRoom.Status)" />
                            </div>

                            <button type="submit" class="btn btn-success">Cập nhật</button>
                            <button type="button" class="btn btn-secondary" @onclick="HideEditRoomModal">Hủy</button>
                        </EditForm>
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>
            </div>
        </div>
    </div>
}
@code {
    private List<RoomDTO> rooms;
    private RoomDTO newRoom = new RoomDTO();
    private RoomDTO selectedRoom;
    public List<SeatDTO> seatDTOs = new List<SeatDTO>();
    private bool isCreateRoomModalVisible = false;
    private bool isEditRoomModalVisible = false;
    private string searchTerm = string.Empty;
    private Dictionary<Guid, string> seatNames = new Dictionary<Guid, string>();
    private async Task LoadSeatNamesAsync()
    {
        foreach (var room in rooms)
        {
            if (!seatNames.ContainsKey(room.SeatID))
            {
                var seatName = await SV.GetSeatById(room.SeatID);
                seatNames[room.SeatID] = seatName?.SeatTypeName ?? "Unknown Seat";  // Cache the seat name
            }
        }
    }
    
    private List<RoomDTO> FilteredRooms => string.IsNullOrEmpty(searchTerm)
        ? rooms 
        : rooms.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList(); 

    protected override async Task OnInitializedAsync()
    {
        rooms = await RoomService.GetAllRooms(CancellationToken.None);
        //seatDTOs = await SV.GetAllSeats(CancellationToken.None);
        await LoadSeatNamesAsync();
    }
    










    private void ShowCreateRoomModal()
    {
        isCreateRoomModalVisible = true;
    }

    private void HideCreateRoomModal()
    {
        isCreateRoomModalVisible = false;
    }

    private void ShowEditRoomModal(RoomDTO room)
    {
        selectedRoom = room; 
        isEditRoomModalVisible = true; 
    }

    private void HideEditRoomModal()
    {
        isEditRoomModalVisible = false; 
    }

    private async Task CreateRoom()
    {
        if (newRoom != null)
        {
            var roomCreateRequest = new RoomCreateRequest
                {
                    Name = newRoom.Name,
                    SeatingCapacity = newRoom.SeatingCapacity,
                    Status = newRoom.Status,
                    SeatID = newRoom.SeatID,
                    CinemasID = newRoom.ID
                };

            await RoomService.CreateRoom(roomCreateRequest, CancellationToken.None);

            isCreateRoomModalVisible = false;
            rooms = await RoomService.GetAllRooms(CancellationToken.None);
        }
    }











    private async Task UpdateRoom()
    {
        if (selectedRoom != null)
        {
            var roomUpdateRequest = new RoomUpdateRequest
                {
                    ID = selectedRoom.ID,
                    Name = selectedRoom.Name,
                    SeatingCapacity = selectedRoom.SeatingCapacity,
                    Status = selectedRoom.Status,
                    // CinemasID = selectedRoom.CinemasID
                };

            var response = await RoomService.UpdateRoom(roomUpdateRequest.ID, roomUpdateRequest, CancellationToken.None);

            if (response.IsSuccessStatusCode)
            {
                rooms = await RoomService.GetAllRooms(CancellationToken.None);
                isEditRoomModalVisible = false; 
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorContent}");
            }
        }
    }

    private async void ToggleRoomStatus(RoomDTO room, ChangeEventArgs e)
    {
        room.Status = (bool)e.Value ? EntityStatus.Active : EntityStatus.Locked;

        var roomUpdateRequest = new RoomUpdateRequest
            {
                ID = room.ID,
                Name = room.Name,
                SeatingCapacity = room.SeatingCapacity,
                Status = room.Status,
            };

        var response = await RoomService.UpdateRoom(roomUpdateRequest.ID, roomUpdateRequest, CancellationToken.None);

        if (response.IsSuccessStatusCode)
        {
            rooms = await RoomService.GetAllRooms(CancellationToken.None);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorContent}");
        }
    }
}


