@page "/listroom"
@using NeonCinema_Application.DataTransferObject.Cinemas
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Domain.Enum
@inject IRoomService RoomService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

@if (isLoading)
{
    <div class="loading-overlay">
        <p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
    </div>
}
else
{
    <h2 class="d-flex justify-content-center align-content-center m-auto mt-5">Danh sách phòng chiếu</h2>

    <div class="container-fluid mt-5">
        <div class="row mb-4 p-3 search-filter-container">
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." @oninput="OnSearchChanged" />
            </div>
            <div class="col-md-4">
                <div class="d-flex align-items-center">
                    <div class="form-check me-3">
                        <input type="radio" name="statusFilter" value="All" @onchange="OnStatusChanged" checked />
                        <label class="form-check-label" for="all">Tất Cả</label>
                    </div>
                    <div class="form-check me-3">
                        <input type="radio" name="statusFilter" value="Active" @onchange="OnStatusChanged" />
                        <label class="form-check-label" for="active">Hoạt động</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" name="statusFilter" value="Inactive" @onchange="OnStatusChanged" />
                        <label class="form-check-label" for="inactive">Không hoạt động</label>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <button type="button" class="btn btn-success bg-opacity-50" style="border-radius: 6px; margin-top: 10px;" @onclick="AddRoom">
                    <i class="bi bi-plus-circle"></i> Thêm phòng chiếu
                </button>
            </div>
        </div>

        @if (rooms == null)
        {
            <p class="text-center">Đang tải danh sách phòng chiếu...</p>
        }
        else if (rooms.Count == 0)
        {
            <p class="text-center">Không có phòng chiếu nào.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover room-table">
                    <thead class="">
                        <tr>
                            <th>STT</th>
                            <th>Tên phòng</th>
                            <th>Sức chứa</th>

                            <th>Số hàng</th>
                            <th>Số cột</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (PagedRooms != null)
                        {
                            int index = (currentPage - 1) * itemsPerPage + 1;
                            foreach (var room in PagedRooms)
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@room.Name</td>
                                    <td>@(room.RowNumber * room.ColumnNumber)</td>
                                    <td>@room.RowNumber</td>
                                    <td>@room.ColumnNumber</td>
                                    <td>
                                        <span class="badge @(room.Status == EntityStatus.Active ? "bg-success" : "bg-danger") text-light small-badge">
                                            @(room.Status == EntityStatus.Active ? "Hoạt động" : "Không hoạt động")
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm" style="border: none" @onclick="() => EditRoom(room.ID)" title="Chỉnh sửa">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    </td>
                                </tr>
                                index++;
                            }
                        }
                    </tbody>

                </table>
                <div class="d-flex justify-content-center align-items-center mt-3 pagination-controls">
                    <button class="btn btn-outline-secondary me-2" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage())">
                        Trước
                    </button>
                    <span class="mx-2">Trang @currentPage trên @totalPages</span>
                    <button class="btn btn-outline-secondary ms-2" @onclick="NextPage" disabled="@(!CanGoToNextPage())">
                        Sau
                    </button>
                </div>


            </div>
        }
    </div>
}


@code {
    private List<RoomDTO> rooms;
    private List<RoomDTO> filteredRooms;
    private List<CinemasDTO> cinemasdto;
    private string searchText = string.Empty;
    private string selectedStatus = "All"; // Giới tính mặc định là "Tất cả"
    private bool isLoading = true;
    private int currentPage = 1;
    private int itemsPerPage = 5;
    private int totalPages => (int)Math.Ceiling((double)filteredRooms.Count / itemsPerPage);
    private bool CanGoToNextPage() => currentPage < totalPages;
    private bool CanGoToPreviousPage() => currentPage > 1;

    private IEnumerable<RoomDTO> PagedRooms => filteredRooms
        .Skip((currentPage - 1) * itemsPerPage)
        .Take(itemsPerPage);

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        rooms = await RoomService.GetAllRooms();
        cinemasdto = await RoomService.GetAllCinemas();
        filteredRooms = rooms; // Khởi tạo danh sách được lọc ban đầu là toàn bộ phòng
        StateHasChanged(); // Cập nhật giao diện để hiển thị loading
        await Task.Delay(2000);
        isLoading = false;
    }

    private void AddRoom()
    {
        Navigation.NavigateTo("/addroom");
    }

    private void EditRoom(Guid roomId)
    {
        Navigation.NavigateTo($"/editroom/{roomId}");
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString().TrimStart();
        FilterRooms();
    }

    private void OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        FilterRooms();
    }

    private void FilterRooms()
    {
        filteredRooms = rooms
            .Where(r => string.IsNullOrWhiteSpace(searchText) || r.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Where(r => selectedStatus == "All"
                         || (selectedStatus == "Active" && r.Status == EntityStatus.Active)
                         || (selectedStatus == "Inactive" && r.Status == EntityStatus.Inactive))
            .ToList();
        currentPage = 1;
    }

}
<style>
    .pagination-controls {
        gap: 0.5rem; /* Adjust gap between items */
    }

        .pagination-controls button {
            padding: 0.5rem 1rem; /* Adjust button size */
        }

        .pagination-controls span {
            font-weight: bold; /* Highlight the page indicator */
        }

    body {
        background-color: #f8f9fa;
        font-family: 'Roboto', sans-serif;
    }

    .container {
        max-width: 1000px;
        margin: auto;
    }

    .table {
        margin-top: 20px;
        text-align: center;
    }

        .table th, .table td {
            vertical-align: middle;
        }

    .table-dark {
        background-color: #343a40;
        color: white;
    }

    .btn {
        margin: 0 5px;
    }

    .btn-sm {
        padding: 5px 10px;
    }

    .btn-info {
        color: white;
        background-color: #17a2b8;
    }

    .btn-warning {
        color: white;
        background-color: #ffc107;
    }

    .text-center {
        font-weight: 500;
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .room-table {
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
