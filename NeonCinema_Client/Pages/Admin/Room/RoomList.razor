@page "/rooms"
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Domain.Enum
@inject IRoomService RoomService
@inject NavigationManager Navi
@layout LayoutAdmin
<div class="CTN" style="text-align: center">
    <h3>Danh sách phòng chiếu</h3>
    <button style="background-color: red" class="btn btn-success mb-3" @onclick="NavigateToCreateRoom">Thêm phòng</button>
</div>

<div class="container" style="width: 800px">


    @if (rooms != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Tên phòng</th>
                    <th>Sức chứa</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var room in rooms)
                {
                    <tr>
                        <td>@room.Name</td>
                        <td>@room.SeatingCapacity</td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input"
                                       type="checkbox"
                                       role="switch"
                                       id="flexSwitchCheckDefault_@(room.Status)"
                                       checked="@(room.Status ==  EntityStatus.Active)"
                                       @onchange="(e) => ToggleRoomStatus(room, e)" />
                                <label class="form-check-label" for="flexSwitchCheckDefault_@(room.Status)">
                                    @(room.Status == EntityStatus.Active ? "Mở" : "Đóng") <!-- Hiển thị Mở hoặc Đóng -->
                                </label>
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="@(() => EditRoom(room.ID))">Chỉnh sửa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private List<RoomDTO> rooms;

    protected override async Task OnInitializedAsync()
    {
        rooms = await RoomService.GettAllRooms(CancellationToken.None);
    }

    private void EditRoom(Guid id)
    {
        Navi.NavigateTo($"/edit-room/{id}");
    }
    private void NavigateToCreateRoom()
    {
        Navi.NavigateTo("/create-room");
    }
    private async void ToggleRoomStatus(RoomDTO room, ChangeEventArgs e)
    {
        // Update the room status based on the switch state
        room.Status = (bool)e.Value ? EntityStatus.Active : EntityStatus.Locked;

        // Create a RoomUpdateRequest object to send the status update to the server
        var roomUpdateRequest = new RoomUpdateRequest
            {
                ID = room.ID,
                Name = room.Name,
                SeatingCapacity = room.SeatingCapacity,
                Status = room.Status,
            };

        // Call the RoomService to update the room status
        var response = await RoomService.UpdateRoomm(roomUpdateRequest.ID, roomUpdateRequest, CancellationToken.None);

        if (response.IsSuccessStatusCode)
        {
            // Optionally, reload the rooms list or show a success message
            rooms = await RoomService.GettAllRooms(CancellationToken.None);  // Refresh the room list
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorContent}");
        }
    }
}
