@page "/food-combos"
@using NeonCinema_Application.DataTransferObject.FoodCombos
@using NeonCinema_Client.Data.Services
@using System.Text.Json
@using System.Text
@using System.Globalization
@using NeonCinema_Infrastructure.Database.AppDbContext
@layout LayoutAdmin
@inject FoodComboServices _services
@inject HttpClient _http
@inject NavigationManager _navigation
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime


<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
<MudSnackbarProvider MaxSnackbars="3" Position="SnackbarPosition.TopRight" PreventDuplicates="true" />
@if (IsLoading == true)
{
	<div class="loading-overlay">
		<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
	</div>
}
else
{
	<div class="container-fluid mt-4">
		<h3 class="text-center text-secondary-emphasis">Danh sách combo</h3>
		<!-- Search and Filter Section -->
		<div class="row mb-4 p-3 search-filter-container">
			<div class="col-md-4">
				<input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." @bind="searchTerm" @oninput="SearchFood" />
			</div>
			<div class="col-md-8 d-flex align-items-center ">
				<label class="form-label ">Lọc từ giá:</label>
				<input type="text" class="form-control" @oninput="OnStartAmountChanged" />
				<label class="form-label ">Đến giá:</label>
				<input type="text" class="form-control" @oninput="OnEndAmountChanged" />
			</div>
		</div>
		<button type="button" class="btn btn-success bg-opacity-50" style="border-radius: 6px; margin-left:1px; margin-bottom:15px" data-bs-toggle="modal" data-bs-target="#addCombo">
			<i class="fas fa-plus"></i> Thêm combo
		</button>
		<table class="table table-hover combo-table">
			<thead>
				<tr>
					<th class="text-center">STT</th>
					<th class="text-center">Hình Ảnh</th>
					<th class="text-center">Tên</th>
					<th class="text-center">Mô tả</th>
					<th class="text-center">Giá</th>
					<th class="text-center">Hành Động</th>
				</tr>
			</thead>
			<tbody>
				@if (foodsFilter != null && foodsFilter.Any())
				{
					var foodsToDisplay = foodsFilter.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
					@foreach (var item in foodsToDisplay)
					{
						<tr>
							<td class="text-center align-middle">@(@foodsDto.IndexOf(item) + 1)</td>
							<td class="text-center align-middle">
								<img src="@GetImageUrl(item.Images)" alt="Hình Ảnh" class="rounded-circle" style="height: 70px; width: 70px;" />
							</td>
							<td class="text-center align-middle">@item.Content</td>
							<td class="text-center align-middle">@item.Description</td>
							<td class="text-center align-middle">@item.Amount.ToString("N0") VNĐ</td>
							<td class="text-center align-middle">
								<button class="btn btn-outline-primary btn-sm" style="border: none;" data-bs-toggle="modal" data-bs-target="#editCombo" @onclick="() => GetComboUpdate(item.ID)">
									<i class="fas fa-edit"></i>
								</button>
							</td>
						</tr>
						stt++; // Tăng giá trị sau mỗi lần hiển thị
					}
				}
			</tbody>

		</table>
		<div class="modal fade" id="addCombo" tabindex="-1" aria-labelledby="addComboLabel" aria-hidden="true">
			<div class="modal-dialog" style="max-width: 800px; margin-top: 90px; ">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title w-100 text-center" id="addCustomerLabel">Thêm combo</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<div class="container-fluid">
							<div class="row justify-content-center">
								<div class="col-md-4 text-center mb-4" style="margin-top:10px;">
									<img src="@profileImage" alt="Profile" class="rounded-circle img-fluid profile-pic"> <br />
									<label class="custom-file-upload">
										<span style="margin-left:-5px">
											<i class="material-icons">cloud_upload</i>
										</span>
										<InputFile class="d-none" OnChange="HandleSelected" style="width: 200px" />
										<span>Chọn ảnh</span>
									</label>
								</div>
								<div class="col-md-8" style="margin-top:10px;">
									<div class="row mb-1">
										<div class="form-group">
											<label class="form-label">Tên combo</label>
											<input type="text" class="form-control" style="color:black; background-color: #f7f7f7" @bind-value="request.Content" />
											@if (!string.IsNullOrEmpty(errorName))
											{
												<span class="text-danger">@errorName</span>
											}
										</div>
									</div>
									<div class="row mb-1">
										<div class="form-group">
											<label class="form-label">Mô tả</label>
											<input type="text" class="form-control" style="color:black; background-color: #f7f7f7" @bind-value="request.Description">
											@if (!string.IsNullOrEmpty(errorDes))
											{
												<span class="text-danger">@errorDes</span>
											}
										</div>
									</div>
									<div class="row mb-1">
										<div class="form-group">
											<label class="form-label">Giá</label>
											<input type="text" class="form-control" style="color:black; background-color: #f7f7f7" @bind-value="request.TotalPrice">
											@if (!string.IsNullOrEmpty(errorAmount))
											{
												<span class="text-danger">@errorAmount</span>
											}
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="width: 10%">Hủy</button>
					 <button @onclick="ShowConfirmModal" class="btn btn-success" style="font-size: 1rem">Thêm</button> 
						
						@if (showConfirmModal)
						{
							<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
								<div class="modal-dialog" role="document">
									<div class="modal-content">
										<div class="modal-header">
											<button type="button" class="close-btn mb-3" @onclick="CloseModal" aria-label="Close">
												<span class="material-icons" aria-hidden="true">close</span>
											</button>
										</div>
										<div class="modal-body">
											<h5 class="text-center">Bạn chắn chắn muốn thêm combo mới ?</h5>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
											<button type="button" @onclick="HandleSubmit" class="btn btn-success" disabled="@isSubmitting"
													style="width: 15%; min-width: 200px;">
												<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"
													  style="display: @(isSubmitting ? "inline-block" : "none")"></span>
												<span>@(isSubmitting ? "Đang xử lý..." : "Thêm")</span>
											</button>
										</div>
									</div>
								</div>
							</div>

						}
					</div>
				</div>
			</div>
		</div>
		<div class="modal fade" id="editCombo" tabindex="-1" aria-labelledby="editComboLabel" aria-hidden="true">
			<div class="modal-dialog" style="max-width: 800px; margin-top: 90px; ">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title w-100 text-center" id="addCustomerLabel">Cập nhật combo</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<div class="container-fluid">
							<div class="row justify-content-center">
								<div class="col-md-4 text-center mb-4" style="margin-top:10px;">
									<img src="@profileImageUpdate" alt="Profile" class="rounded-circle img-fluid profile-pic"> <br />
									<label class="custom-file-upload">
										<span style="margin-left:-5px">
											<i class="material-icons">cloud_upload</i>
										</span>
										<InputFile class="d-none" OnChange="HandleSelectedUpdate" style="width: 200px" />
										<span>Chọn ảnh</span>
									</label>
								</div>
								<div class="col-md-8" style="margin-top:10px;">
									<div class="row mb-1">
										<div class="form-group">
											<label class="form-label">Tên combo</label>
											<input type="text" class="form-control" style="color:black; background-color: #f7f7f7" @bind-value="@foods.Content" />
											@if (!string.IsNullOrEmpty(errorName))
											{
												<span class="text-danger">@errorName</span>
											}
										</div>
									</div>
									<div class="row mb-1">
										<div class="form-group">
											<label class="form-label">Mô tả</label>
											<input type="text" class="form-control" style="color:black; background-color: #f7f7f7" @bind-value="@foods.Description" />
											@if (!string.IsNullOrEmpty(errorDes))
											{
												<span class="text-danger">@errorDes</span>
											}
										</div>
									</div>
									<div class="row mb-1">
										<div class="form-group">
											<label class="form-label">Giá</label>
											<input type="text" class="form-control" style="color:black; background-color: #f7f7f7"
												   @bind="foods.FormattedAmount" placeholder="VNĐ" />
											@if (!string.IsNullOrEmpty(errorAmount))
											{
												<span class="text-danger">@errorAmount</span>
											}
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="width: 10%">Hủy</button>
						<button type="button" class="btn btn-success btn-lg" style="font-size: 1rem" @onclick="ShowConfirmEditModal">Cập nhật</button>

						@if (showConfirmModal)
						{
							<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
								<div class="modal-dialog" role="document">
									<div class="modal-content">
										<div class="modal-header">
											<button type="button" class="close-btn mb-3" @onclick="CloseModal" aria-label="Close">
												<span class="material-icons" aria-hidden="true">close</span>
											</button>
										</div>
										<div class="modal-body">
											<h5 class="text-center">Bạn chắn chắn sửa combo này ?</h5>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
											<button type="button" @onclick="UpdateSumbit" class="btn btn-success" disabled="@isSubmitting">
												<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"
													  style="display: @(isSubmitting ? "inline-block" : "none")"></span>
												<span>@(isSubmitting ? "Đang xử lý..." : "Sửa")</span>
											</button>
										</div>
									</div>
								</div>
							</div>

						}
					</div>
				</div>
			</div>
		</div>
		<!-- Pagination -->
		<nav>
			<ul class="pagination justify-content-center">
				<li class="page-item @(currentPage == 1 ? "disabled" : "")">
					<a class="page-link" @onclick="() => ChangePage(currentPage - 1)">Trước</a>
				</li>
				@for (var i = 1; i <= totalPages; i++)
				{
					<li class="page-item @(currentPage == i ? "active" : "")">
						<a class="page-link" @onclick="() => ChangePage(i)">@i</a>
					</li>
				}
				<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
					<a class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sau</a>
				</li>
			</ul>
		</nav>
	</div>
}

@code {
	private bool IsLoading = true;
	int stt = 1;
	List<FoodComboDTO> foodsDto = new List<FoodComboDTO>();
	List<FoodComboDTO> foodsFilter = new List<FoodComboDTO>();
	private IBrowserFile selectedFile;
	private IBrowserFile UpdateImage;
	private string searchTerm = string.Empty;
	private decimal? priceFrom = null;
	private decimal? priceTo = null;

	private string profileImage = "https://media.istockphoto.com/id/1397556857/vi/vec-to/avatar-13.jpg?s=612x612&w=0&k=20&c=rNjYzaNEVujaKNJBN2yBdHGDjoYrPRgeSIDrenAZcbE=";
	private string profileImageUpdate = "https://media.istockphoto.com/id/1397556857/vi/vec-to/avatar-13.jpg?s=612x612&w=0&k=20&c=rNjYzaNEVujaKNJBN2yBdHGDjoYrPRgeSIDrenAZcbE=";

	private string? errorName = null;
	private string? errorDes = null;
	private string? errorAmount = null;
	private bool IsAddComboModalOpen = false;
	private async Task CloseModalById(string modalId)
	{
		await Task.Delay(500); // Đợi một chút trước khi đóng (tùy chỉnh theo UI)
		var script = $"$('#{modalId}').modal('hide');";
		await _jsRuntime.InvokeVoidAsync("eval", script);
		showConfirmModal = false;
		StateHasChanged();
	}



	private void ShowSnackbar(string message, Severity severity)
	{
		Snackbar.Add(message, severity, options =>
		{
			options.RequireInteraction = false; // Không bắt buộc người dùng tắt
			options.VisibleStateDuration = 3000; // Thời gian hiển thị (3 giây)
		});
		isSubmitting = false;
		// Chuyển hướng sau khi hoàn tất hiển thị
		Task.Run(async () =>
		{
			await Task.Delay(3000); // Đợi thời gian hiển thị của Snackbar
		});
	}

	protected override async Task OnInitializedAsync()
	{
		profileImageUpdate = GetImageUrl(foods.Images);

		await LoadFoodCombo();
		StateHasChanged();
	}
	private async Task LoadFoodCombo()
	{
		try
		{
			foodsDto.Clear(); // Xóa dữ liệu cũ
			foodsDto = await _services.GetAllFoodCombo();
			foodsFilter = foodsDto;
			await Task.Delay(2000);
			IsLoading = false;
		}
		catch (Exception ex)
		{
			throw new Exception(ex.Message);
		}
	}
	private void SearchFood(ChangeEventArgs e)
	{
		searchTerm = e.Value?.ToString() ?? string.Empty;

		FilterFood();
	}
	private void OnStartAmountChanged(ChangeEventArgs e)
	{
		if (string.IsNullOrEmpty(e.Value?.ToString()))
		{
			priceFrom = null;
		}
		else if (Decimal.TryParse(e.Value?.ToString(), out var amount))
		{
			priceFrom = amount;
		}
		currentPage = 1;
		FilterFood();
	}

	private void OnEndAmountChanged(ChangeEventArgs e)
	{
		if (string.IsNullOrEmpty(e.Value?.ToString()))
		{
			priceTo = null;
		}
		else if (Decimal.TryParse(e.Value?.ToString(), out var amount))
		{
			priceTo = amount;
		}
		currentPage = 1;
		FilterFood();
	}
	private void FilterFood()
	{
		string normalizedSearchTerm = NormalizeString(searchTerm);
		foodsFilter = foodsDto
			.Where(item =>
				(string.IsNullOrEmpty(searchTerm) || NormalizeString(item.Content).Contains(normalizedSearchTerm))&&
				(!priceFrom.HasValue || item.Amount >= priceFrom) &&
				(!priceTo.HasValue || item.Amount <= priceTo))
			.ToList();

		currentPage = 1; // Reset current page to 1 after filtering
	}
	private string RemoveDiacritics(string text)
	{
		if (string.IsNullOrEmpty(text))
			return text;

		var normalizedString = text.Normalize(NormalizationForm.FormD);
		var stringBuilder = new StringBuilder();

		foreach (var c in normalizedString)
		{
			var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
			if (unicodeCategory != UnicodeCategory.NonSpacingMark)
			{
				stringBuilder.Append(c);
			}
		}

		return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
	}

	private string NormalizeString(string input)
	{
		if (string.IsNullOrWhiteSpace(input))
			return string.Empty;

		// Loại bỏ khoảng trắng đầu và cuối, chuyển về chữ thường
		input = input.Trim().ToLower();

		// Loại bỏ dấu tiếng Việt
		input = RemoveDiacritics(input);

		return input;
	}
	private async Task HandleSelectedUpdate(InputFileChangeEventArgs e)
	{
		UpdateImage = e.File;

		// Tạo URL tạm thời cho hình ảnh đã ch
		var imageUrl = await GetImageUrlUpdate(UpdateImage);
		if (imageUrl != null)
		{
			profileImageUpdate = imageUrl;
			StateHasChanged(); // Cập nhật giao diện
		}
	}
	private async Task HandleSelected(InputFileChangeEventArgs e)
	{

		selectedFile = e.File;

		// Tạo URL tạm thời cho hình ảnh đã chọn
		var imageUrl = await GetImageUrlCreate(selectedFile);
		if (imageUrl != null)
		{
			profileImage = imageUrl;
			StateHasChanged(); // Cập nhật giao diện
		}

	}
	private FoodComboDTO selectedCombo = new FoodComboDTO();

	private void LoadEditForm(FoodComboDTO combo)
	{
		if (combo == null)
		{
			Console.WriteLine("Combo is null");
			return;
		}

		selectedCombo = combo;
		profileImage = GetImageUrl(combo.Images ?? ""); // Nếu `Images` null, đặt chuỗi rỗng
		StateHasChanged();
	}
	private async Task<string> GetImageUrlUpdate(IBrowserFile file)
	{
		if (file.ContentType.StartsWith("image/"))
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
			return $"data:{file.ContentType};base64,{imageBase64}";
		}
		return null;
	}
	private async Task<string> GetImageUrlCreate(IBrowserFile file)
	{
		if (file.ContentType.StartsWith("image/"))
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
			return $"data:{file.ContentType};base64,{imageBase64}";
		}
		return null;
	}

	//THÊM 

	FoodComboCreateRequest request = new FoodComboCreateRequest();
	private NeonCinemasContext _context = new NeonCinemasContext();
	private bool isSubmitting = false;
	private bool showConfirmModal = false;

	private void CloseModal()
	{
		showConfirmModal = false;
		StateHasChanged();
	}
	private void ShowConfirmModal()
	{
		bool isValid = true;
		var nameExists = _context.FoodCombos.Any(x => x.Content == request.Content);
		// Kiểm tra và hiển thị thông báo lỗi cho các trường
		if (string.IsNullOrEmpty(request.Content))
		{
			errorName = "Không được để trống tên";
			isSubmitting = false;
			isValid = false;
		}		
		else if (nameExists)
		{
			errorName = "Tên này đã tồn tại.";
			isSubmitting = false;
			isValid = false;
		}
		else
		{
			errorName = null;
		}
		if (request.TotalPrice == null || request.TotalPrice <= 0)
		{
			errorAmount = "Giá bán phải lớn hơn 0";
			isSubmitting = false;
			isValid = false;
		}
		else
		{
			errorAmount = null;
		}
		if (string.IsNullOrEmpty(request.Description))
		{
			errorDes = "Không được để trống mô tả";
			isSubmitting = false;
			isValid = false;
		}
		else
		{
			errorDes = null;
		}
		showConfirmModal = isValid;
	}

	public async Task HandleSubmit()
	{
		isSubmitting = true;
		errorAmount = "";
		errorDes = "";
		errorName = "";

		try
		{



			// Kiểm tra xem file có được chọn không
			if (selectedFile != null)
			{
				var content = new MultipartFormDataContent();
				var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20));
				fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);

				content.Add(fileContent, "file", selectedFile.Name);
				var response = await _http.PostAsync("https://localhost:7211/api/UploadImages/upload-image", content);

				if (response.IsSuccessStatusCode)
				{
					var jsonResponse = await response.Content.ReadAsStringAsync();
					var jsonDoc = JsonDocument.Parse(jsonResponse);
					var fileUrl = jsonDoc.RootElement.GetProperty("fileUrl").GetString();
					var fileName = Path.GetFileName(fileUrl);
					request.Images = fileName;

					Console.WriteLine($"Upload thành công. Tên file: {fileName}");
				}
				else
				{
					Console.WriteLine($"Lỗi upload ảnh. Status code: {response.StatusCode}");
					return;
				}
			}
			else
			{
				// Nếu không có file được chọn, thông báo lỗi hoặc bỏ qua
				Console.WriteLine("Không có tệp nào được chọn.");
			}

			// Tiến hành tạo Food Combo
			if (request.Images == null)
			{
				request.Images = "3ada90ce-6f05-47a2-8c65-5747d4790518.png";
			}
			var foodCombos = await _services.CreateFood(request);
			if (foodCombos != null)
			{
				await LoadFoodCombo();
				ShowSnackbar("Thêm combo đồ ăn thành công.", Severity.Success);
				isSubmitting = false;
				await Task.Delay(2000);
				await CloseModalById("addCombo");
			}
			else
			{
				Console.WriteLine("Có lỗi khi tạo");
			}
		}
		catch (Exception ex)
		{
			throw new Exception($"Error {ex.Message} : {ex.StackTrace}");
		}
	}
	private string GetImageUrl(string imageUrl)
	{
		return $"https://localhost:7211/api/Resources/{imageUrl}";
	}
	private FoodComboDTO foods = new FoodComboDTO();
	private FoodComboUpdateRequest updateRequest = new FoodComboUpdateRequest();
	public async Task GetComboUpdate(Guid id)
	{
		foods = await _services.DetailCombo(id);
		profileImageUpdate = GetImageUrl(foods.Images);
	}
	private void ShowConfirmEditModal()
	{
		bool isValid = true;
		// Kiểm tra và hiển thị thông báo lỗi cho các trường
		var nameExists = _context.FoodCombos
			.Any(x => x.Content == foods.Content && x.ID != foods.ID);
		if (string.IsNullOrEmpty(foods.Content))
		{
			errorName = "Không được để trống tên";
			isSubmitting = false;
			isValid = false;
		}	
		else if (nameExists)
		{
			errorName = "Tên này đã tồn tại.";
			isSubmitting = false;
			isValid = false;
		}
		else
		{
			errorName = null;
		}
		if (foods.Amount == null || foods.Amount <= 0)
		{
			errorAmount = "Giá bán phải lớn hơn 0";
			isSubmitting = false;
			isValid = false;
		}
		else
		{
			errorAmount = null;
		}
		if (string.IsNullOrEmpty(foods.Description))
		{
			errorDes = "Không được để trống mô tả";
			isSubmitting = false;
			isValid = false;
		}
		else
		{
			errorDes = null;
		}
		showConfirmModal = isValid;
	}
	public async Task UpdateSumbit()
	{
		isSubmitting = true;
		errorAmount = "";
		errorDes = "";
		errorName = "";
		
		try
		{
			
			
			string fileName="";
			if (UpdateImage != null)
			{
				var content = new MultipartFormDataContent();
				var fileContent = new StreamContent(UpdateImage.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20));
				fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(UpdateImage.ContentType);

				content.Add(fileContent, "file", UpdateImage.Name);
				var response = await _http.PostAsync("https://localhost:7211/api/UploadImages/upload-image", content);

				if (response.IsSuccessStatusCode)
				{
					var jsonResponse = await response.Content.ReadAsStringAsync();
					var jsonDoc = JsonDocument.Parse(jsonResponse);
					var fileUrl = jsonDoc.RootElement.GetProperty("fileUrl").GetString();
					fileName = Path.GetFileName(fileUrl);
					Console.WriteLine($"Upload thành công. Tên file: {fileName}");
				}
				else
				{
					Console.WriteLine($"Lỗi upload ảnh. Status code: {response.StatusCode}");
					return;
				}
			}

			updateRequest = new FoodComboUpdateRequest()
				{
					ID = foods.ID,
					Amount = foods.Amount,
					Content = foods.Content,
					Description = foods.Description,

				};
			updateRequest.Images = selectedFile!=null? fileName: foods.Images;
			Console.WriteLine($"Image file path sent to API: {updateRequest.Images}");

			var updateFood = await _services.UpdateFood(updateRequest);
			if (updateRequest != null)
			{
				await LoadFoodCombo();
				ShowSnackbar("Sửa combo đồ ăn thành công.", Severity.Success);
				isSubmitting = false;
				await Task.Delay(2000);
				await CloseModalById("editCombo");
			}
			else
			{
				Console.WriteLine("Có lỗi khi tạo");
			}
		}
		catch (Exception ex)
		{
			throw new Exception($"Error {ex.Message} : {ex.StackTrace}");
		}
	}
	#region Phân trang
	private int currentPage = 1;
	private const int pageSize = 5;
	private void ChangePage(int newPage)
	{
		if (newPage < 1 || newPage > totalPages) return;
		currentPage = newPage;
	}

	private int totalPages => (int)Math.Ceiling((double)foodsDto.Count / pageSize);
	#endregion
}


<style>
	body {
		background-color: #f8f9fa;
		font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
	}

	.combo-table {
		background-color: white; /* Màu nền bảng là trắng */
		border-radius: 8px; /* Bo góc bảng */
		overflow: hidden; /* Ẩn đi các phần tràn ra ngoài */
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Thêm bóng cho bảng */
	}

	.profile-pic {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border: 3px solid #eaeaea;
		display: block;
		margin-left: auto;
		margin-right: auto;
	}

	.custom-file-upload {
		display: flex;
		align-items: center; /* Căn giữa theo chiều dọc */
		justify-content: center; /* Căn giữa theo chiều ngang */
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 10px;
		background-color: #a9a9a9; /* Màu nền của nút */
		color: white; /* Màu chữ */
		border: none; /* Bỏ viền */
		text-align: center;
		width: 150px;
		margin-left: auto; /* Thêm */
		margin-right: auto;
	}

		.custom-file-upload span {
			margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
		}

		.custom-file-upload:hover {
			background-color: #8f8f8f; /* Màu nền khi hover */
		}

	.loading-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.8);
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.search-filter-container {
		display: flex; /* Sử dụng flexbox */
		flex-wrap: wrap; /* Không cho xuống dòng */
		align-items: center; /* Căn giữa theo trục dọc */
		justify-content: space-between; /* Căn đều các phần tử */
		background-color: #ffffff;
		border-radius: 8px;
		padding: 20px;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		margin-left: 1px;
		margin-right: 1px;
	}

	.d-flex.align-items-center {
		display: flex; /* Đảm bảo các thành phần hiển thị ngang hàng */
		align-items: center; /* Căn giữa theo chiều dọc */
		gap: 15px; /* Khoảng cách giữa các phần tử */
	}

	.form-check-inline {
		margin-right: 15px; /* Khoảng cách giữa các radio button */
	}

	.form-label {
		white-space: nowrap; /* Đảm bảo chữ "Trạng thái" không xuống dòng */
		margin-right: 10px; /* Khoảng cách giữa label và các radio button */
		margin-bottom: 0; /* Loại bỏ khoảng cách dưới label */
	}

	.close-btn {
		position: absolute;
		top: 10px; /* Cách đỉnh modal một khoảng */
		right: 10px; /* Cách phải modal một khoảng */
		background: none; /* Loại bỏ màu nền */
		border: none; /* Loại bỏ viền */
		cursor: pointer; /* Thay đổi con trỏ thành biểu tượng tay */
		font-size: 1.5rem; /* Kích thước biểu tượng */
		color: #333; /* Màu sắc biểu tượng */
	}
</style>