@page "/ticket-pricing"
@using NeonCinema_Application.DataTransferObject.TicketPriceSetting
@using NeonCinema_Client.Data.IServices.TicketPriceSetting
@inject ITicketPriceSettingService TicketPriceSettingService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@layout LayoutAdmin
@attribute [Authorize(Roles = "Admin")]

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">

<MudSnackbarProvider MaxSnackbars="3" Position="SnackbarPosition.TopRight" PreventDuplicates="true" />
@if (isLoading)
{
    <div class="loading-overlay">
        <p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
    </div>
}
else
{
    <EditForm Model="ticketPriceSetting" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <h3 class="text-center text-secondary-emphasis mt-3">Quản lý giá vé</h3>
        <div class="card" style="border: none">

            <div class="card-body p-2">
                <table class="table table-bordered ">
                    <thead class="table-primary">
                        <tr>
                            <th></th>
                            <th class="text-center">TRƯỚC 17H</th>
                            <th class="text-center">SAU 17H</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="text-center align-middle" style="font-weight:bold">Thứ 2, Thứ 3, Thứ 4, Thứ 5</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargePriceBeforeWeekday" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.PriceBefore17hWeekDay)" />
                            </td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargePriceAfterWeekday" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.PriceAfter17hWeekDay)" />
                            </td>

                        </tr>
                        <tr>
                            <td class="text-center align-middle" style="font-weight:bold">Thứ 6, Thứ 7, Chủ Nhật</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargePriceBeforeWeekeend" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.PriceBefore17hWeekeend)" />
                            </td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargePriceAfterWeekeend" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.PriceAfter17hWeekeend)" />
                            </td>
                        </tr>
                    </tbody>
                </table>

                <table class="table table-bordered mt-3">
                    <thead class="table-primary">
                        <tr>
                            <th colspan="2" class="text-center align-middle">Phụ Thu</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="text-center align-middle" style="font-weight:bold">3D</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurcharge3D" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.Surcharge3D)" />
                            </td>
                        </tr>
                        <tr>
                            <td class="text-center align-middle" style="font-weight:bold">4D</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurcharge4D" />
                                    <span class="currency-unit">VND</span>
                                </div>
                            </td>
                            <ValidationMessage For="@(() => ticketPriceSetting.Surcharge4D)" />
                        </tr>
                       @*  <tr>
                            <td class="text-center align-middle" style="font-weight:bold">IMAX</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargeIMAX" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.SurchargeIMAX)" />
                            </td>
                        </tr> *@
                        <tr>
                            <td class="text-center align-middle" style="font-weight:bold">Ghế vip</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargeVip" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.SurchargeVIP)" />
                            </td>
                        </tr>
                        <tr>
                            <td class="text-center align-middle" style="font-weight:bold">Ghế couple</td>
                            <td>
                                <div class="input-container">
                                    <input type="text" class="form-control"
                                           @bind="FormattedSurchargeCouple" />
                                    <span class="currency-unit">VND</span>
                                </div>
                                <ValidationMessage For="@(() => ticketPriceSetting.SurchargeCouple)" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="card-footer text-end">
                <button type="submit" class="btn btn-primary">Lưu</button>
            </div>
        </div>
    </EditForm>

}

@code {

    private TicketPriceSettingDTO ticketPriceSetting = new TicketPriceSettingDTO();
    [Parameter] public int Id { get; set; }
    private string successMessage;
    private string errorMessage;
    private bool isLoading = true;
    private string FormattedSurchargePriceBeforeWeekday
    {
        get => ticketPriceSetting.PriceBefore17hWeekDay.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.PriceBefore17hWeekDay = parsedValue;
            }
        }
    }
    private string FormattedSurchargePriceAfterWeekday
    {
        get => ticketPriceSetting.PriceAfter17hWeekDay.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.PriceAfter17hWeekDay = parsedValue;
            }
        }
    }
    private string FormattedSurchargePriceBeforeWeekeend
    {
        get => ticketPriceSetting.PriceBefore17hWeekeend.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.PriceBefore17hWeekeend = parsedValue;
            }
        }
    }
    private string FormattedSurchargePriceAfterWeekeend
    {
        get => ticketPriceSetting.PriceAfter17hWeekeend.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.PriceAfter17hWeekeend = parsedValue;
            }
        }
    }
    private string FormattedSurcharge3D
    {
        get => ticketPriceSetting.Surcharge3D.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.Surcharge3D = parsedValue;
            }
        }
    }
    private string FormattedSurcharge4D
    {
        get => ticketPriceSetting.Surcharge4D.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.Surcharge4D = parsedValue;
            }
        }
    }
    private string FormattedSurchargeIMAX
    {
        get => ticketPriceSetting.SurchargeIMAX.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.SurchargeIMAX = parsedValue;
            }
        }
    }
    private string FormattedSurchargeCouple
    {
        get => ticketPriceSetting.SurchargeCouple.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.SurchargeCouple = parsedValue;
            }
        }
    }
    private string FormattedSurchargeVip
    {
        get => ticketPriceSetting.SurchargeVIP.ToString("N0");
        set
        {
            if (decimal.TryParse(value.Replace(",", ""), out var parsedValue))
            {
                ticketPriceSetting.SurchargeVIP = parsedValue;
            }
        }
    }
    private void ShowSnackbar(string message, Severity severity)
    {
        Snackbar.Add(message, severity, options =>
        {
            options.RequireInteraction = false; // Không bắt buộc người dùng tắt
            options.VisibleStateDuration = 3000; // Thời gian hiển thị (3 giây)
        });
    }
    protected override async Task OnInitializedAsync()
    {
         isLoading = true;
        // Load the existing ticket price setting based on the Id parameter
        ticketPriceSetting = await TicketPriceSettingService.GetByIdAsync(Guid.Parse("F45B65A9-F32D-4F95-A211-75A7AF545F46"));
        StateHasChanged(); // Cập nhật giao diện để hiển thị loading
        await Task.Delay(2000); // Tạm dừng trong 2 giây
        isLoading = false; // Kết thúc trạng thái đang tải
    }

    private async Task HandleValidSubmit()
    {
        var response = await TicketPriceSettingService.Update(ticketPriceSetting);

        if (response.IsSuccessStatusCode)
        {
            // Cập nhật thành công, làm mới dữ liệu và hiển thị thông báo thành công
            ShowSnackbar("Cập nhật thành công!", Severity.Success);
            ticketPriceSetting = await TicketPriceSettingService.GetByIdAsync(ticketPriceSetting.ID);
            StateHasChanged(); // Refresh the component
        }
        else
        {
            // Xử lý lỗi nếu có và hiển thị thông báo lỗi
            errorMessage = await response.Content.ReadAsStringAsync();
            ShowSnackbar($"Cập nhật không thành công: {errorMessage}", Severity.Warning);
        }
    }

}
<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
    }

    .form-control {
        width: 100%;
    }

    .text-center {
        text-align: center;
    }

    .align-middle {
        vertical-align: middle;
    }

    .input-container {
        position: relative;
        display: inline-block;
        width: 100%;
    }

        .input-container input {
            width: 100%;
            padding-right: 50px; /* Tạo không gian cho chữ VND */
            box-sizing: border-box;
        }

        .input-container .currency-unit {
            position: absolute;
            top: 50%;
            right: 10px; /* Đặt chữ VND cách cạnh phải một khoảng */
            transform: translateY(-50%); /* Căn giữa theo chiều dọc */
            color: #aaa;
            pointer-events: none; /* Không làm ảnh hưởng đến hành vi nhập */
            font-size: 1rem;
            font-weight: 500;
        }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

