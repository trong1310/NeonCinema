@page "/listDirector"
@using NeonCinema_Application.DataTransferObject.Directors
@using NeonCinema_Client.Data.IServices.Director
@using NeonCinema_Domain.Enum
@inject NavigationManager Navi
@inject IDirectorService SV
@layout LayoutAdmin
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">

@if (isLoading)
{
    <div class="loading-overlay">
        <p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
    </div>
}
else
{
    <h2 style="text-align: center; margin-top: 40px">DANH SÁCH ĐẠO DIỄN</h2>
    <div class="container-fluid mt-5">
        <div class="row mb-4 p-3 search-filter-container">
            <div class="col-md-4" style="margin-top:7px">
                <input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." />
            </div>

            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Giới tính</label>
                    </div>
                    <div class="col-md-8">
                        <div class="d-flex">
                            <div class="form-check me-3">
                                <input type="radio" name="genderFilter" value="All" @onchange="OnGenderChanged" checked />
                                <label class="form-check-label" for="all">Tất Cả</label>
                            </div>
                            <div class="form-check me-3 ml-4">
                                <input type="radio" name="genderFilter" value="Men" @onchange="OnGenderChanged" />
                                <label class="form-check-label" for="resigned">Nam</label>
                            </div>
                        </div>
                        <div class="form-check mt-1">
                            <input type="radio" name="genderFilter" value="Girl" @onchange="OnGenderChanged" />
                            <label class="form-check-label" for="resigned">Nữ</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <a class="btn btn-success mb-2" href="/addDirector"><i class="fa-solid fa-plus" style="color: #ffffff;"></i>  Thêm đạo diễn</a>
            </div>
        </div>
        @if (filteredDirectors == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (filteredDirectors.Count == 0)
        {
            <p>No directors found.</p>
        }
        else
        {
            <table class="table table-hover director-table">
                <thead>
                    <tr>

                        <th class="text-center"></th>
                        <th class="text-center">Tên</th>
                        <th class="text-center">Giới tính</th>

                        <th class="text-center">Địa chỉ</th>
                        <th class="text-center">Quốc tịch</th>
                        <th class="text-center">Tiểu sử</th>
                        <th class="text-center">Trạng thái</th>
                        <th class="text-center">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var actor in filteredDirectors)
                    {
                        <tr>
                            <td class="text-center align-middle">@(@filteredDirectors.IndexOf(actor) + 1)</td>
                            <td class="text-center align-middle">@actor.FullName</td>
                            <td class="text-center align-middle">
                                @if (actor.Gender == EntityStatus.Nam)
                                {
                                    <span>Nam</span>
                                }
                                else
                                {
                                    <span>Nữ</span>
                                }
                            </td>

                            <td class="text-center align-middle">@actor.Address</td>
                            <td class="text-center align-middle">@actor.Nationality</td>
                            <td class="text-center align-middle">@actor.Biography</td>
                            <td class="text-center align-middle">
                                <div class=" form-switch">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           role="switch"
                                           id="flexSwitchCheckDefault_@(actor.Status)"
                                           checked="@(actor.Status == EntityStatus.Active)"
                                           @onchange="(e) => ToggleRoomStatus(actor, e)" />
                                    <label class="form-check-label" for="flexSwitchCheckDefault_@(actor.Status)">
                                        @(actor.Status == EntityStatus.Active ? "" : "")
                                    </label>
                                </div>
                            </td>
                            <td class="text-center align-middle">
                                <button class="btn btn-outline-primary btn-sm " style="border: none;" @onclick="() => EditDirector(actor.ID)">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}

@code {
    private List<DirectorDTO> director;
    private List<DirectorDTO> filteredDirectors;
    private string searchText = string.Empty;
    private string selectedGender = "All";
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        director = await SV.GetAllDirector();
        filteredDirectors = director; // Khởi tạo danh sách được lọc ban đầu là toàn bộ đạo diễn
        StateHasChanged(); // Cập nhật giao diện để hiển thị loading
        await Task.Delay(2000); // Tạm dừng trong 2 giây
        isLoading = false; // Kết thúc trạng thái đang tải
    }

    private void EditDirector(Guid drtId)
    {
        Navi.NavigateTo($"/updateDirector/{drtId}");
    }

    private void AddDirectors()
    {
        Navi.NavigateTo("/addDirector");
    }

    private async void ToggleRoomStatus(DirectorDTO drt, ChangeEventArgs e)
    {
        drt.Status = (bool)e.Value ? EntityStatus.Active : EntityStatus.Locked;

        var DirecUpdateRequest = new UpdateDirectorRequest
            {
                ID = drt.ID,
                FullName = drt.FullName,
                Gender = drt.Gender,
                
                Address = drt.Address,
                Nationality = drt.Nationality,
                Biography = drt.Biography,
                
                Status = drt.Status
            };

         await SV.UpdateDirector(DirecUpdateRequest.ID, DirecUpdateRequest);

        
            director = await SV.GetAllDirector();
            filteredDirectors = director; // Cập nhật lại danh sách được lọc
       
            
        
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        FilterDirectors();
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredDirectors = director; // Nếu không có gì nhập, hiển thị toàn bộ
        }
        else
        {
            filteredDirectors = director
                .Where(d => d.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList(); // Lọc danh sách theo tên
        }
    }

    private void FilterDirectors()
    {
        // Cập nhật lọc theo giới tính
        filteredDirectors = director
            .Where(d => string.IsNullOrWhiteSpace(searchText) || d.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Where(d => selectedGender == "All"
                         || (selectedGender == "Men" && d.Gender == EntityStatus.Nam) // So sánh với chuỗi "Men"
                         || (selectedGender == "Girl" && d.Gender == EntityStatus.Nữ)) // So sánh với chuỗi "Girl"
            .ToList(); // Lọc danh sách theo tên và giới tính
    }


    private void OnGenderChanged(ChangeEventArgs e)
    {
        selectedGender = e.Value.ToString();
        FilterDirectors();
    }

}

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
    }

    .container-fluid {
        font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
    }
    .search-filter-container {
        background-color: #ffffff; /* Màu nền cho khung tìm kiếm và lọc */
        border-radius: 8px; /* Bo góc cho khung */
        padding: 20px; /* Padding cho khung */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Thêm bóng cho khung */
        margin-left: 1px;
        margin-right: 1px;
    }

    .director-table {
        background-color: white; /* Màu nền bảng là trắng */
        border-radius: 8px; /* Bo góc bảng */
        overflow: hidden; /* Ẩn đi các phần tràn ra ngoài */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Thêm bóng cho bảng */
    }

        .director-table td {
            font-size: 16px; /* Tăng kích thước chữ trong các thẻ td */
            padding: 12px; /* Tăng khoảng cách giữa nội dung và đường viền của ô */
        }

    .status-cell {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>