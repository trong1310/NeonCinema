@page "/addDirector"

@using NeonCinema_Application.DataTransferObject.Directors
@using NeonCinema_Client.Data.IServices.Director
@using NeonCinema_Domain.Enum
@inject IDirectorService SV
@inject NavigationManager NavigationManager
@layout LayoutAdmin
<link rel="stylesheet" href="/css/Director/Directorr.css">
<h3 class="text-center mb-4">Add New Director</h3>

<div class="CL0">
    <div class="CL1">
        <div class="mb-3">
            <label class="form-label">Image:</label>
            <div class="mb-2">
                <img src="@(!string.IsNullOrEmpty(temporaryImageUrl) ? temporaryImageUrl : "")" alt="@actor.FullName" class="img-thumbnail" width="150" height="150" />
            </div>
            <InputFile OnChange="HandleFileSelected" class="form-control" />
        </div>
    </div>
    <div class="CL2">
        <EditForm Model="actor" OnValidSubmit="HandleValidSubmit" class="form-container">
            <div class="CL3">
                <div class="mb-3">
                    <label class="form-label">Full Name:</label>
                    <InputText @bind-Value="actor.FullName" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Gender:</label>
                    <InputSelect id="gender" class="form-select" @bind-Value="actor.Gender" required>
                        <option value="">-- Chọn giới tính --</option>
                        <option value="@(EntityStatus.Men)">Nam</option>
                        <option value="@(EntityStatus.Girl)">Nữ</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => actor.Gender)" />
                </div>
            </div>


            <div class="CL4">
                <div class="mb-3">
                    <label class="form-label">Birth Date:</label>
                    <InputDate @bind-Value="actor.BirthDate" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Nationality:</label>
                    <InputText @bind-Value="actor.Nationality" class="form-control" />
                </div>
            </div>

           
            <div class="CL5">
                <div class="mb-3">
                    <label class="form-label">Biography:</label>
                    <InputTextArea @bind-Value="actor.Biography" class="form-control" rows="3" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Status:</label>
                    <InputSelect id="status" class="form-select" @bind-Value="actor.Status">
                        <option value="@(EntityStatus.Active)">Hoạt động</option>
                        <option value="@(EntityStatus.Locked)">Không hoạt động</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => actor.Status)" />
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label">Address:</label>
                <InputText @bind-Value="actor.Address" class="form-control" />
            </div>
            
            

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Cancel</button>
        </EditForm>
   </div>
</div>

@code {
    private DirectorDTO actor = new DirectorDTO();
    private IBrowserFile selectedFile;
    private string temporaryImageUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
            var filePath = Path.Combine("wwwroot/images/Director", fileName);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
            }

            actor.Images = $"/images/Director/{fileName}";

            using (var stream = new MemoryStream())
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
                temporaryImageUrl = $"data:image/png;base64,{Convert.ToBase64String(stream.ToArray())}";
            }

            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(actor.Gender))
        {
            // Gửi thông báo lỗi nếu Gender chưa được chọn
            throw new InvalidOperationException("Director is required.");
        }

        var createActorRequest = new CreateDirectorRequest
            {
                FullName = actor.FullName,
                Gender = actor.Gender, // Đảm bảo rằng đây không phải là NULL
                BirthDate = actor.BirthDate,
                Address = actor.Address,
                Nationality = actor.Nationality,
                Biography = actor.Biography,
                Images = actor.Images,
                Status = actor.Status
            };

        await SV.CreateDirector(createActorRequest, CancellationToken.None);
        NavigationManager.NavigateTo("/listDirector");
    }


    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/listDirector");
    }
}
