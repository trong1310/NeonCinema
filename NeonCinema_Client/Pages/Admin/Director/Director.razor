@page "/director"
@using NeonCinema_Application.DataTransferObject.Directors
@using NeonCinema_Client.Data.IServices.Director
@using NeonCinema_Domain.Enum
@using System.Text
@using System.Globalization
@inject NavigationManager Navi
@inject IDirectorService SV
@layout LayoutAdmin
@attribute [Authorize(Roles = "Admin")]


@if (isLoading)
{
	<div class="loading-overlay">
		<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
	</div>
}
else
{
	<div class="container-fluid mt-3">
		<h3 class="text-center text-secondary-emphasis">Danh sách đạo diễn</h3>

		<!-- Search and Filter Section -->
		<div class="row mb-4 p-3 search-filter-container">
			<div class="col-md-4">
				<input type="text" class="form-control" placeholder="Tìm kiếm theo tên..." @oninput="SearchDirectors" />
			</div>
			<div class="col-md-4">
				<select class="form-select" @onchange="GenderChanged">
					<option value="">Chọn giới tính</option>
					<option value="Nam">Nam</option>
					<option value="Nữ">Nữ</option>
				</select>
			</div>
			<div class="col-md-4 d-flex align-items-center">
				<label class="form-label me-2">Trạng thái:</label>
				<div class="d-flex align-items-center">
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" value="all" @onchange="StatusChanged" checked />
						<label class="form-check-label">Tất cả</label>
					</div>
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" value="active" @onchange="StatusChanged" />
						<label class="form-check-label">Hoạt động</label>
					</div>
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="radio" name="status" value="inactive" @onchange="StatusChanged" />
						<label class="form-check-label">Không hoạt động</label>
					</div>
				</div>
			</div>
		</div>

		<button type="button" class="btn btn-success bg-opacity-50" style="border-radius: 6px; margin-bottom:15px" @onclick="AddDirectors">
			<i class="fas fa-plus"></i> Thêm đạo diễn
		</button>

		<!-- Director Table -->
		<table class="table table-hover employee-table">
			<thead>
				<tr>
					<th class="text-center">STT</th>
					<th class="text-center">Tên</th>
					<th class="text-center">Giới Tính</th>
					<th class="text-center">Địa Chỉ</th>
					<th class="text-center">Quốc tịch</th>
					<th class="text-center">Tiểu sử</th>
					<th class="text-center">Trạng Thái</th>
					<th class="text-center">Hành Động</th>
				</tr>
			</thead>
			<tbody>
				@if (filteredDirectors == null || !filteredDirectors.Any())
				{
					<tr>
						<td colspan="8" class="text-center text-muted">Không tìm thấy đạo diễn.</td>
					</tr>
				}
				else
				{
					var directorsToDisplay = filteredDirectors.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
					@foreach (var director in directorsToDisplay)
					{
						<tr>
							<td class="text-center">@(@filteredDirectors.IndexOf(director) + 1)</td>
							<td class="text-center">@director.FullName</td>
							<td class="text-center">@director.Gender</td>
							<td class="text-center">@director.Address</td>
							<td class="text-center">@director.Nationality</td>
							<td class="text-center">@director.Biography</td>
							<td class="text-center">
								<span class="badge @(director.Status == EntityStatus.Active ? "bg-success" : "bg-danger")">
									@(director.Status == EntityStatus.Active ? "Hoạt động" : "Không hoạt động")
								</span>
							</td>
							<td class="text-center">
								<button class="btn btn-outline-primary btn-sm" style="border: none;" @onclick="() => EditDirector(director.ID)">
									<i class="fas fa-edit"></i>
								</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>

		<!-- Pagination -->
		<nav>
			<ul class="pagination justify-content-center">
				<li class="page-item @(currentPage == 1 ? "disabled" : "")">
					<a class="page-link" @onclick="() => ChangePage(currentPage - 1)">Trước</a>
				</li>
				@for (var i = 1; i <= totalPages; i++)
				{
					<li class="page-item @(currentPage == i ? "active" : "")">
						<a class="page-link" @onclick="() => ChangePage(i)">@i</a>
					</li>
				}
				<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
					<a class="page-link" @onclick="() => ChangePage(currentPage + 1)">Sau</a>
				</li>
			</ul>
		</nav>
	</div>
}

@code {
	private List<DirectorDTO> directors = new List<DirectorDTO>();
	private List<DirectorDTO> filteredDirectors = new List<DirectorDTO>();
	private string searchName = "";
	private string selectedGender = "";
	private string selectedStatus = "all";

	private bool isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		await LoadDirectors();
	}

	private async Task LoadDirectors()
	{
		directors = await SV.GetAllDirector();
		// Kiểm tra nếu không có người dùng nào
		if (directors == null || !directors.Any())
		{
			filteredDirectors = new List<DirectorDTO>(); // Hoặc hiển thị thông báo không có dữ liệu
			return;
		}
		isLoading = true;
		filteredDirectors = directors;
		currentPage = 1; // Reset current page to 1 after filtering
		StateHasChanged(); // Cập nhật giao diện để hiển thị loading
		await Task.Delay(2000); // Tạm dừng trong 2 giây
		isLoading = false; // Kết thúc trạng thái đang tải
    }

	private void FilterDirectors()
	{
		string normalizedSearchTerm = NormalizeString(searchName);
		filteredDirectors = directors.Where(u =>
				(string.IsNullOrWhiteSpace(selectedGender) ||
				(selectedGender == "Nam" && u.Gender == EntityStatus.Nam) || // Sửa ở đây
				(selectedGender == "Nữ" && u.Gender == EntityStatus.Nữ)) && // Sửa ở đây
				(string.IsNullOrWhiteSpace(searchName) ||
			NormalizeString(u.FullName).Contains(normalizedSearchTerm)) &&
				(selectedStatus == "all" ||
				(selectedStatus == "active" && u.Status == EntityStatus.Active) ||
				(selectedStatus == "inactive" && u.Status == EntityStatus.Inactive))
	).ToList();

		currentPage = 1; // Reset current page to 1 after filtering
	}

	private string RemoveDiacritics(string text)
	{
		if (string.IsNullOrEmpty(text))
			return text;

		var normalizedString = text.Normalize(NormalizationForm.FormD);
		var stringBuilder = new StringBuilder();

		foreach (var c in normalizedString)
		{
			var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
			if (unicodeCategory != UnicodeCategory.NonSpacingMark)
			{
				stringBuilder.Append(c);
			}
		}

		return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
	}

	private string NormalizeString(string input)
	{
		if (string.IsNullOrWhiteSpace(input))
			return string.Empty;

		// Loại bỏ khoảng trắng đầu và cuối, chuyển về chữ thường
		input = input.Trim().ToLower();

		// Loại bỏ dấu tiếng Việt
		input = RemoveDiacritics(input);

		return input;
	}

	private void SearchDirectors(ChangeEventArgs e)
	{
		searchName = e.Value?.ToString() ?? string.Empty;

		FilterDirectors();
	}
	private void StatusChanged(ChangeEventArgs e)
	{
		selectedStatus = e.Value?.ToString() ?? "all";
		FilterDirectors();
	}
	private void GenderChanged(ChangeEventArgs e)
	{
		selectedGender = e.Value?.ToString() ?? string.Empty;
		FilterDirectors();
	}

	private int currentPage = 1;
	private const int pageSize = 10;
	private void ChangePage(int newPage)
	{
		if (newPage < 1 || newPage > totalPages) return;
		currentPage = newPage;
	}

	private int totalPages => (int)Math.Ceiling((double)filteredDirectors.Count / pageSize);

	private void EditDirector(Guid drtId)
	{
		Navi.NavigateTo($"/updateDirector/{drtId}");
	}

	private void AddDirectors()
	{
		Navi.NavigateTo("/addDirector");
	}

}




<style>
	body {
		background-color: #f8f9fa;
		font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
	}

	.container-fluid {
		font-family: 'Roboto', sans-serif; /* Sử dụng font chữ Roboto */
	}

	.employee-table {
		background-color: white; /* Màu nền bảng là trắng */
		border-radius: 8px; /* Bo góc bảng */
		overflow: hidden; /* Ẩn đi các phần tràn ra ngoài */
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Thêm bóng cho bảng */
		overflow: visible;
	}

		.employee-table tbody tr {
			position: relative; /* Đảm bảo các thành phần bên trong dòng không bị che */
		}

	.pagination .page-item.active .page-link {
		background-color: #007bff; /* Màu nền cho trang hiện tại */
		border-color: #007bff; /* Màu viền cho trang hiện tại */
	}

	.small-badge {
		font-size: 0.75rem; /* Kích thước chữ nhỏ cho badge */
	}

	.search-filter-container {
		display: flex; /* Sử dụng flexbox */
		flex-wrap: nowrap; /* Không cho xuống dòng */
		align-items: center; /* Căn giữa theo trục dọc */
		justify-content: space-between; /* Căn đều các phần tử */
		background-color: #ffffff;
		border-radius: 8px;
		padding: 20px;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		margin-left: 1px;
		margin-right: 1px;
	}

	.form-control {
		border-radius: 5px; /* Bo góc cho ô input */
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Thêm bóng cho ô input */
	}

	.form-select {
		border-radius: 5px; /* Bo góc cho ô chọn */
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Thêm bóng cho ô chọn */
	}

	.dropdown-menu {
		background-color: #f8f9fa; /* Màu nền sáng */
		border: 1px solid #ddd; /* Viền nhẹ */
		border-radius: 8px; /* Bo góc cho dropdown */
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); /* Thêm bóng cho dropdown */
		padding: 0.5rem; /* Thêm khoảng cách padding bên trong */
		min-width: 180px; /* Đặt chiều rộng tối thiểu */
		z-index: 1050;
	}

		.dropdown-menu .badge {
			display: block; /* Đảm bảo mỗi badge nằm trên một dòng riêng */
			text-align: center; /* Căn giữa nội dung trong badge */
			padding: 8px 12px; /* Thêm khoảng cách padding bên trong */
			margin: 5px 0; /* Thêm khoảng cách giữa các badge */
			border-radius: 6px; /* Bo góc cho badge */
			transition: background-color 0.3s ease, transform 0.2s ease; /* Hiệu ứng hover */
			cursor: pointer; /* Đổi con trỏ chuột thành pointer khi hover */
		}

			.dropdown-menu .badge:hover {
				transform: scale(1.05); /* Phóng to nhẹ khi hover */
				opacity: 0.9; /* Hiệu ứng mờ khi hover */
			}

			.dropdown-menu .badge.bg-success:hover {
				background-color: #218838; /* Màu xanh đậm hơn khi hover */
			}

			.dropdown-menu .badge.bg-danger:hover {
				background-color: #c82333; /* Màu đỏ đậm hơn khi hover */
			}

	.d-flex.align-items-center {
		display: flex; /* Đảm bảo các thành phần hiển thị ngang hàng */
		align-items: center; /* Căn giữa theo chiều dọc */
		gap: 15px; /* Khoảng cách giữa các phần tử */
	}

	.form-check-inline {
		margin-right: 15px; /* Khoảng cách giữa các radio button */
	}

	.form-label {
		white-space: nowrap; /* Đảm bảo chữ "Trạng thái" không xuống dòng */
		margin-right: 10px; /* Khoảng cách giữa label và các radio button */
		margin-bottom: 0; /* Loại bỏ khoảng cách dưới label */
	}

	.loading-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.8);
		display: flex;
		justify-content: center;
		align-items: center;
	}
</style>