@page "/statistics"
@using NeonCinema_Application.DataTransferObject.Statistics
@using NeonCinema_Client.Data.IServices.Statistics
@using NeonCinema_Client.Data.Services.StatisticService
@inject IJSRuntime JSRuntime
@inject IStatisticsService StatisticsService
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/chart.js"></script>

@if (isLoading)
{
    <div class="loading-overlay">
        <p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
    </div>
}
else
{
    <PageTitle>Thống Kê Doanh Thu</PageTitle>
    <h2 class="d-flex justify-content-center align-content-center m-auto mt-5">Thống kê</h2>
    <div class="container-fluid mt-5">
        <!-- Tổng quan -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center shadow">
                    <div class="card-body">
                        <h5>Doanh thu trong ngày</h5>
                        <h3>@currentDayRevenue.ToString("N0") VND</h3>
                        <p>@DateTime.Now.ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center shadow">
                    <div class="card-body">
                        <h5>Khách hàng mới</h5>
                        <h3>@statistics?.NewCustomers</h3>
                        <p>@DateTime.Now.ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center shadow">
                    <div class="card-body">
                        <h5>Tổng vé</h5>
                        <h3>@statistics?.TotalTickets</h3>
                        <p>@startDate.ToString("dd-MM-yyyy") | @endDate.ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center shadow">
                    <div class="card-body">
                        <h5>Tổng doanh thu</h5>
                        <h3>@statistics?.TotalRevenue.ToString("N0") VND</h3>
                        <p>@startDate.ToString("dd-MM-yyyy") | @endDate.ToString("dd-MM-yyyy")</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tăng trưởng -->
        <div class="row mb-4">
            <div class="col-md-6 offset-md-3">
                <div class="card text-center shadow">
                    <div class="card-body">
                        <h5>Tăng trưởng</h5>
                        <h3>@growthPercentage.ToString("F2")%</h3>
                        <p>So với ngày hôm qua</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bộ lọc -->
        <div class="row mb-4 filter d-flex align-items-center justify-content-between">
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label for="specificDate" class="form-label">Ngày cụ thể</label>
                <input type="date" id="specificDate" class="form-control" @bind="filterModel.SpecificDate" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label for="startDate" class="form-label">Ngày bắt đầu</label>
                <input type="date" id="startDate" class="form-control" @bind="filterModel.StartDate" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label for="endDate" class="form-label">Ngày kết thúc</label>
                <input type="date" id="endDate" class="form-control" @bind="filterModel.EndDate" />
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label for="filterTime" class="form-label">Lọc theo</label>
                <select id="filterTime" class="form-control" @bind="filterTime">
                    <option value="">-- Bộ lọc --</option>
                    <option value="Today">Hôm nay</option>
                    <option value="Month">Tháng này</option>
                    <option value="PreviousMonth">Tháng trước</option>
                    <option value="Year">Năm này</option>
                </select>
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6 d-flex align-items-end">
                <button class="btn btn-primary w-100" @onclick="FetchStatistics">Xác nhận</button>
            </div>
        </div>

        <!-- Biểu đồ doanh thu -->
        <div class="row chart-section">
            <div class="col-md-12">
                <h5 class="text-center">Biểu đồ doanh thu</h5>
                <div class="chart-container">
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Biểu đồ doanh thu theo phim -->
        <div class="row mt-5 chart-section">
            <div class="col-md-12">
                <h5 class="text-center">Biểu đồ doanh thu theo phim</h5>
                <div class="chart-container">
                    <canvas id="movieChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Thống kê doanh thu theo phim bằng bảng -->
        <div class="row mt-5 chart-section">
            <div class="col-md-12">
                <h5 class="text-center">Doanh thu theo phim</h5>
                <input type="text" @oninput="OnSearchInputChanged" placeholder="Nhập tên phim" class="form-control mb-3 search-input" />
                <table class="table table-hover movie-table">
                    <thead>
                        <tr>
                            <th>Phim</th>
                            <th>Vé bán ra</th>
                            <th>Tổng tiền</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var movie in FilteredMovies)
                        {
                            <tr>
                                <td>@movie.MovieName</td>
                                <td>@movie.TicketsSold</td>
                                <td>@movie.Revenue.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Biểu đồ doanh thu theo combo -->
        <div class="row mt-5 chart-section">
            <div class="col-md-12">
                <h5 class="text-center">Biểu đồ doanh thu theo combo</h5>
                <div class="chart-container">
                    <canvas id="comboChart"></canvas>
                </div>
            </div>
        </div>

    </div>
}




@code {
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now;

    private FilterModel filterModel = new FilterModel();
    private RevenueStatisticsDTO statistics;
    private List<MovieStatisticsDTO> movieStatistics = new();
    private List<MovieStatisticsDTO> allMovieStatistics = new();
    private List<ComboStatisticsDTO> comboStatistics = new();
    private string filterTime = "Year";
    private decimal currentDayRevenue = 0;
    private string searchMovie = "";
    private decimal growthPercentage = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true; StateHasChanged(); // Cập nhật giao diện để hiển thị loading

        await FetchStatistics();
        await CalculateGrowthPercentage();
        await Task.Delay(2000); // Tạm dừng trong 2 giây
        isLoading = false; // Kết thúc trạng thái đang tải
    }

    private async Task FetchStatistics()
    {
        try
        {
            if (filterModel.SpecificDate.HasValue)
            {
                statistics = await StatisticsService.GetRevenueStatisticsAsync(filterModel.SpecificDate, null, null);
            }
            else if (filterModel.StartDate.HasValue && filterModel.EndDate.HasValue)
            {
                statistics = await StatisticsService.GetRevenueStatisticsAsync(null, filterModel.StartDate, filterModel.EndDate);
            }
            else
            {
                switch (filterTime)
                {
                    case "Year":
                        startDate = new DateTime(DateTime.Now.Year, 1, 1);
                        endDate = new DateTime(DateTime.Now.Year, 12, 31);
                        break;
                    case "Today":
                        startDate = DateTime.Now.Date;
                        endDate = DateTime.Now.Date;
                        break;
                    case "Month":
                        startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                        endDate = startDate.AddMonths(1).AddDays(-1);
                        break;
                    case "PreviousMonth":
                        startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-1);
                        endDate = startDate.AddMonths(1).AddDays(-1);
                        break;
                }

                statistics = await StatisticsService.GetRevenueStatisticsAsync(null, startDate, endDate);
            }

            allMovieStatistics = await StatisticsService.GetMovieStatisticsAsync(startDate, endDate);
            movieStatistics = allMovieStatistics;
            comboStatistics = await StatisticsService.GetComboStatisticsAsync(startDate, endDate);

            if (statistics != null)
            {
                currentDayRevenue = statistics.RevenueChart
                    .FirstOrDefault(x => x.Date.Date == DateTime.Now.Date)?.Revenue ?? 0;

                await JSRuntime.InvokeVoidAsync("renderRevenueChart", statistics.RevenueChart);
            }

            await JSRuntime.InvokeVoidAsync("renderMovieChart", movieStatistics);
            await JSRuntime.InvokeVoidAsync("renderComboChart", comboStatistics);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task CalculateGrowthPercentage()
    {
        try
        {
            var today = DateTime.Now.Date;
            var yesterday = today.AddDays(-1);

            var todayRevenue = statistics.RevenueChart
                .FirstOrDefault(x => x.Date.Date == today)?.Revenue ?? 0;
            var yesterdayRevenue = statistics.RevenueChart
                .FirstOrDefault(x => x.Date.Date == yesterday)?.Revenue ?? 0;

            if (yesterdayRevenue > 0)
            {
                growthPercentage = ((todayRevenue - yesterdayRevenue) / yesterdayRevenue) * 100;
            }
            else
            {
                growthPercentage = todayRevenue > 0 ? 100 : 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calculating growth percentage: {ex.Message}");
        }
    }

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        searchMovie = e.Value?.ToString() ?? string.Empty;
        movieStatistics = allMovieStatistics
            .Where(m => string.IsNullOrEmpty(searchMovie) || m.MovieName.Contains(searchMovie, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private IEnumerable<MovieStatisticsDTO> FilteredMovies => movieStatistics;

    public class FilterModel
    {
        public DateTime? SpecificDate { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .container-fluid {
        margin-top: 20px;
    }

    .card {
        border: 1px solid #ddd;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .filter {
        gap: 10px; /* Khoảng cách giữa các phần tử */
        padding: 15px; /* Thêm padding bên trong */
        background-color: white; /* Màu nền trắng */
        border-radius: 8px; /* Bo góc các trường */
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Hiệu ứng bóng nổi */
    }

        .filter .form-label {
            font-size: 14px; /* Giảm kích thước font cho nhãn */
            margin-bottom: 5px; /* Khoảng cách giữa nhãn và input */
        }

        .filter .form-control {
            font-size: 14px; /* Giảm kích thước input */
            height: 38px; /* Chiều cao tiêu chuẩn */
            border: 1px solid #ddd; /* Viền nhẹ */
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1); /* Bóng nhẹ bên trong */
            border-radius: 5px; /* Bo góc input */
        }

        .filter button {
            height: 38px; /* Đồng bộ chiều cao với các input */
            border-radius: 5px; /* Bo góc nút */
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Hiệu ứng nổi cho nút */
        }

    .card-body h5 {
        font-weight: revert;
        font-size: 1.2rem;
        margin-bottom: 10px;
    }

    .card-body h3 {
        font-size: 1.5rem;
        font-weight: bold;
        color: #007bff;
    }

    .chart-section {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        background-color: white;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        margin-left: 1px;
        margin-right: 1px;
    }

    .chart-container {
        position: relative;
        height: 400px;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
    }

    .movie-table {
        margin-top: 15px;
    }

    .search-input {
        max-width: 300px;
        margin-bottom: 15px;
    }

    #comboChart {
        width: 100%;
        height: auto;
        max-height: 400px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
