@page "/admin-dashboard"
@inherits LayoutComponentBase
@inject ILocalStorageService _localstorage
@using Blazored.LocalStorage
@inject HttpClient _http
@using MudBlazor
@inject NavigationManager _navi
@using NeonCinema_API.Controllers.Service

    <MudThemeProvider />
<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">
            NEON CINEMA
        </MudText>
        <MudSpacer />
        <MudBadge Color="Color.Success" Overlap="true" Bordered="true">
            <div style="display: flex; align-items: center; gap: 16px;">
                <!-- Hiển thị ảnh người dùng -->
                <MudText Typo="Typo.h6">
                    @user?.FullName
                </MudText>
                <MudAvatar Size="Size.Large">
                    @if (user != null && !string.IsNullOrEmpty(previewImage))
                    {
                        <img src="@previewImage" alt="Hình ảnh vừa chọn" style="width: 100%; height: 100%; border-radius: 50%;" />
                    }
                    else if (user != null && !string.IsNullOrEmpty(user.Images))
                    {
                        <img src="@user.Images" alt="Hình ảnh đã tải lên" style="width: 100%; height: 100%; border-radius: 50%;" />
                    }
                </MudAvatar>

                <!-- Hiển thị tên người dùng -->
                
            </div>
        </MudBadge>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NeonCinema_Client.Pages.Admin.Users.NavMenuAdmin />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private UserProfile user;
    private string previewImage;
    bool _drawerOpen = true;
    protected override async Task OnInitializedAsync(){
        var token = await _localstorage.GetItemAsync<string>("authToken");
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7211/api/User/getfrofile");
        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await _http.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            user = await response.Content.ReadFromJsonAsync<UserProfile>();
        }
      
    }
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);
                var buffer = memoryStream.ToArray();
                previewImage = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                user.Images = previewImage;
            }
            catch (Exception ex)
            {
                
            }
        }
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}