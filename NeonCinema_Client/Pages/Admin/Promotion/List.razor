@page "/list-promotion-admin"
@using Microsoft.AspNetCore.SignalR.Client
@using NeonCinema_Application.DataTransferObject.Promotions
@using NeonCinema_Application.DataTransferObject.User
@using NeonCinema_Client.Data.IServices.Promotion
@using NeonCinema_Client.DataTransferObject.Users
@using NeonCinema_Domain.Database.Entities
@using NeonCinema_Domain.Enum
@using NeonCinema_Infrastructure.Extention.Utili
@using System.Transactions

@layout LayoutAdmin
@inject NavigationManager _nav
@inject IPromotionServices _prosv
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

@if (IsLoading == true)
{
	<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="height: 100px; width: 100px" Loop="true" /></p>
}
else
{
	<div>
		<div class="col-12 p-5">
			@* <button class="btn" style="display: inline;"><i class="fa-solid fa-arrow-left"></i></button> *@
			<h6 style="display: inline;">Danh sách khuyến mại</h6>
			<hr>
			<div class="row boxfilter p-2">
				<div class="col-6">
					<div class="form-group">
						<label for="Search">Tìm kiếm</label>
						<InputText class="form-control" style="width: 500px;" @bind-Value="inputSearchPromotion" placeholder="Search by name" @oninput="OnInputSearchProChanged" />
					</div>
					<div class="form-check">
						<div class="row mt-3">
							<InputRadioGroup @bind-Value="selectedStatus">
								<div class="col">
									<InputRadio class="form-check-input" Value="0" @oninput="OnInputStatusChanged" />
									<label class="form-check-label">
										Tất cả
									</label>
								</div>
								<div class="col-2">
									<InputRadio class="form-check-input" Value="1" @oninput="OnInputStatusChanged" />
									<label class="form-check-label">
										Không hoạt động
									</label>
								</div>
								<div class="col-2">
									<InputRadio class="form-check-input" Value="2" @oninput="OnInputStatusChanged" />
									<label class="form-check-label">
										Hoạt động
									</label>
								</div>
								<div class="col-2">
									<InputRadio class="form-check-input" Value="3" @oninput="OnInputStatusChanged" />
									<label class="form-check-label">
										Hết hạn
									</label>
								</div>
							</InputRadioGroup>
						</div>
					</div>
				</div>
				<div class="col-3">
					<label for="StartDate">Ngày bắt đầu</label>
					<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="startDate" @oninput="OnInputStartDateChanged" />

				</div>
				<div class="col-3">
					<label for="EndDate">Ngày kết thúc</label>
					<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="endDate" @oninput="OnInputEndDateChanged" />
				</div>
			</div>
			<div class="row mt-5">
				<div class="col-11"></div>
				<div class="col-1">
					<button @onclick="OpenModal1" class="btn"><i class="fa-solid fa-square-plus fa-2xl" style="color: #00ff88;"></i></button>


					<!-- Modal-->
					<!--Create Promotion-->
					@if (isModalVisible == 1)
					{
						<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
							<div class="modal-dialog" role="document">
								<div class="modal-content" style="width: 1230px; right: 50%;">
									@* //style="width: 1650px; right: 90%;" *@
									<div class="modal-header">
										<div class="col-12">
											<div class="row">
												<div class="col-1">
													<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
														<span aria-hidden="true">&times;</span>
													</button>
												</div>
												<div class="col-5">
													<h6>Tạo mã khuyến mại</h6>
												</div>
											</div>

										</div>
									</div>
									<div class="modal-body">
										<div class="col-12 p-3">
											<div class="row">
												<div class="col-5">
													<EditForm Model="@input" OnValidSubmit="OpenModalConfirm1">
														<ChildContent Context="addContext">
															<DataAnnotationsValidator />
															<div class="mb-3">
																<label for="" class="form-label">Tên khuyến mại</label>
																<InputText @bind-Value="input.Name" class="form-control" />
																<ValidationMessage For="@(() => input.Name)" />
															</div>
															<div class="mb-3">
																<label for="" class="form-label">Mã khuyến mại</label>
																<InputText @bind-Value="codegen" class="form-control" readonly />
															</div>

															@if (discountAmount == true)
															{
																<div class="mb-3">
																	<label for="" class="form-label">Số tiền giảm</label>
																	<InputNumber @bind-Value="input.DiscountAmount" class="form-control" />
																	<ValidationMessage For="@(() => input.DiscountAmount)" />
																</div>

															}
															else if (discountPercentage == true)
															{
																<div class="mb-3">
																	<label for="" class="form-label">Phần trăm giảm giá</label>
																	<InputNumber @bind-Value="input.DiscountPercentage" class="form-control" />
																	<ValidationMessage For="@(() => input.DiscountPercentage)" />
																</div>
																<div class="mb-3">
																	<label for="" class="form-label">Số tiền giảm tối đa</label>
																	<InputNumber @bind-Value="input.AmountMax" class="form-control" />
																	<ValidationMessage For="@(() => input.AmountMax)" />
																</div>
															}

															<div class="mb-3">
																<label for="" class="form-label">Ngày bắt đầu</label>
																<input type="datetime-local" @bind="input.StartDate" class="form-control" @oninput="OnInputStartDateProChanged"/>
																<ValidationMessage For="@(() => input.StartDate)" />
																@if (!checkStartDate)
																{
																	<p style="color: red; font-size:14px; font-style: italic">Ngày bắt đầu không được là quá khứ (tính từng giây)</p>
																}
															</div>
															<div class="mb-3">
																<label for="" class="form-label">Ngày kết thúc</label>
																<input type="datetime-local" @bind="input.EndDate" class="form-control" @oninput="OnInputEndDateProChanged" />
																<ValidationMessage For="@(() => input.EndDate)" />
																@if(!checkEndDate)
																{
																	<p style="color: red; font-size:14px; font-style: italic">Ngày kết thúc phải lớn hơn ngày bắt đầu 1 ngày (tính từng giây)</p>
																}
															</div>
															<div class="mb-3">
																<label for="" class="form-label">Mô tả</label>
																<InputText @bind-Value="input.Description" class="form-control" />
															</div>
															<div class="mb-4">
																<InputRadioGroup @bind-Value="IsPercentage">
																	<label class="form-label">Theo % </label>
																	<InputRadio Value="true" class="form-check-input"></InputRadio>
																	@* <label class="form-label">Theo tiền </label>
																	<InputRadio Value="false" class="form-check-input"></InputRadio> *@
																</InputRadioGroup>
															</div>
															<button type="submit" class="btn btn-primary">Thêm khuyến mại</button>
														</ChildContent>
													</EditForm>
												</div>
												<div class="col-6 offset-1">
													<div class="row">
														<h6>Danh sách khách hàng</h6>
													</div>
													<div class="row">
														<InputText @bind-Value="inputSearchUser" @oninput="OnInputSearchUserChanged" class="form-control" Placeholder="Tìm kiếm theo tên" />
													</div>
													<div class="row p-1 rounded border mt-2 " style="height:300px; overflow-y: auto;">
														<table class="table">
															<thead style="position: sticky; top: 0; background-color: white;">
																<tr>
																	<th><InputCheckbox @bind-Value="selectAll" @oninput="ToggleSelectAll" /> Tất cả</th>
																	<th>Tên đầy đủ</th>
																	<th>Số điện thoại</th>
																	<th>Email</th>
																</tr>
															</thead>
															<tbody>
																@foreach (var item in _lstuser)
																{
																	<tr>
																		<td>
																			<InputCheckbox @bind-Value="item.IsSelected" @onchange="UpdateSelectAll" />
																		</td>
																		<td>@item.FullName</td>
																		<td>@item.PhoneNumber</td>
																		<td>@item.Email</td>
																	</tr>
																}
															</tbody>
														</table>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>

						if (isModalVisibleConfirm == 1)
						{
							<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
								<div class="modal-dialog" role="document">
									<div class="modal-content">
										<div class="modal-header">
											<div class="col-12">
												<div class="row">
													<div class="col-1">
														<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
															<span aria-hidden="true">&times;</span>
														</button>
													</div>
													<div class="col-5">
														<h6>Xác nhận</h6>
													</div>
												</div>

											</div>
										</div>
										<div class="modal-body">
											<div class="col-12">
												<div class="row">
													@if (IsLoadingAct == true)
													{
														<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="height:200px; width:200px" Loop="true" /></p>
													}
													else
													{
														<div class="col-3 offset-3">
															<button style="width: 100px" @onclick="AddPromotion" class="btn btn-primary">Đồng ý</button>
														</div>
														<div class="col-6">
															<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-danger">Hủy</button>
														</div>
													}
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						}
					}
					else if (isModalVisible == 2)
					{
						<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
							<div class="modal-dialog" role="document">
								<div class="modal-content" style="width: 1000px; right: 30%;">
									<div class="modal-header">
										<div class="col-12">
											<div class="row">
												<div class="col-1">
													<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
														<span aria-hidden="true">&times;</span>
													</button>
												</div>
												<div class="col-5">
													<h6>Danh sách khách hàng được áp dụng mã</h6>
												</div>
											</div>

										</div>
									</div>
									<div class="modal-body">
										<div class="col-12 p-3">
											<div class="row">
												<div>
													@* <div class="row">
											<InputText @bind-Value="inputSearchUser" @oninput="OnInputChanged" class="form-control" Placeholder="Tìm kiếm theo tên" />
											</div> *@
													<div class="row rounded border mt-2 " style="height:300px; overflow-y: auto;">
														<table class="table">
															<thead style="position: sticky; top: 0; background-color: white;">
																<tr>
																	<th>Tên đầy đủ</th>
																	<th>Số điện thoại</th>
																	<th>Email</th>
																</tr>
															</thead>
															<tbody>
																@foreach (var item in _lstUser)
																{
																	<tr>
																		<td>@item.FullName</td>
																		<td>@item.PhoneNumber</td>
																		<td>@item.Email</td>
																	</tr>
																}
															</tbody>
														</table>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					}
					//Comfirm delete
					else if (isModalVisible == 3)
					{
						<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="modal-header">
										<div class="col-12">
											<div class="row">
												<div class="col-1">
													<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
														<span aria-hidden="true">&times;</span>
													</button>
												</div>
												<div class="col-5">
													<h6>Xác nhận</h6>
												</div>
											</div>

										</div>
									</div>
									<div class="modal-body">
										<div class="col-12">
											<div class="row">
												@if (IsLoadingAct == true)
												{
													<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="height:200px; width:200px" Loop="true" /></p>
												}
												else
												{
													<div class="col-3 offset-3">
														<button style="width: 100px" @onclick=" async () => await DeletePromotion(idActive)" class="btn btn-primary">Đồng ý</button>
													</div>
													<div class="col-6">
														<button style="width: 100px" @onclick="BackList" class="btn btn-danger">Hủy</button>
													</div>
												}
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					}

					else if (isModalVisible == 4)
					{
						<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="modal-header">
										<div class="col-12">
											<div class="row">
												<div class="col-1">
													<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
														<span aria-hidden="true">&times;</span>
													</button>
												</div>
												<div class="col-5">
													<h6>Sửa mã khuyến mại</h6>
												</div>
											</div>

										</div>
									</div>
									<div class="modal-body">
										<EditForm Model="@inputUpdate" OnValidSubmit="OpenModalConfirm2">
											<ChildContent Context="editContext">
												<DataAnnotationsValidator />
												<div class="mb-3">
													<label for="" class="form-label">Tên khuyến mại</label>
													<InputText @bind-Value="inputUpdate.Name" class="form-control" />
													<ValidationMessage For="@(() => input.Name)" />
												</div>
												@if (discountAmount == true)
												{
													<div class="mb-3">
														<label for="" class="form-label">Số tiền giảm</label>
														<InputNumber @bind-Value="inputUpdate.DiscountAmount" class="form-control" />
														<ValidationMessage For="@(() => input.DiscountAmount)" />
													</div>
												}
												else if (discountPercentage == true)
												{
													<div class="mb-3">
														<label for="" class="form-label">Phần trăm giảm giá</label>
														<InputNumber @bind-Value="inputUpdate.DiscountPercentage" class="form-control" />
														<ValidationMessage For="@(() => input.DiscountPercentage)" />
													</div>
													<div class="mb-3">
														<label for="" class="form-label">Số tiền giảm tối đa</label>
														<InputNumber @bind-Value="inputUpdate.AmountMax" class="form-control" />
														<ValidationMessage For="@(() => input.AmountMax)" />
													</div>
												}
												<div class="mb-3">
													<label for="" class="form-label">Ngày bắt đầu</label>
													<InputDate @bind-Value="inputUpdate.StartDate" class="form-control" @oninput="OnInputStartDateChanged" />
													<ValidationMessage For="@(() => inputUpdate.StartDate)" />
													@if (!checkStartDate)
													{
														<p style="color: red; font-size:14px; font-style: italic">Ngày bắt đầu không được là quá khứ (tính từng giây)</p>
													}
												</div>
												<div class="mb-3">
													<label for="" class="form-label">Ngày kết thúc</label>
													<InputDate @bind-Value="inputUpdate.EndDate" class="form-control" @oninput="OnInputEndDateChanged" />
													<ValidationMessage For="@(() => inputUpdate.EndDate)" />
													@if (!checkEndDate)
													{
														<p style="color: red; font-size:14px; font-style: italic">Ngày kết thúc phải lớn hơn ngày bắt đầu 1 ngày (tính từng giây)</p>
													}
												</div>
												<div class="mb-3">
													<label for="" class="form-label">Mô tả</label>
													<InputText @bind-Value="inputUpdate.Description" class="form-control" />
												</div>
												<div class="mb-4">
													<InputRadioGroup @bind-Value="IsPercentage">
														<label class="form-label">Theo % </label>
														<InputRadio Value="true" class="form-check-input"></InputRadio>
														@* <label class="form-label">Theo tiền </label>
														<InputRadio Value="false" class="form-check-input"></InputRadio> *@
													</InputRadioGroup>
												</div>
												<button type="submit" class="btn btn-primary">Lưu</button>
											</ChildContent>
										</EditForm>
									</div>
								</div>
							</div>
						</div>
						if (isModalVisibleConfirm == 3)
						{
							<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
								<div class="modal-dialog" role="document">
									<div class="modal-content">
										<div class="modal-header">
											<div class="col-12">
												<div class="row">
													<div class="col-1">
														<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
															<span aria-hidden="true">&times;</span>
														</button>
													</div>
													<div class="col-5">
														<h6>Xác nhận</h6>
													</div>
												</div>

											</div>
										</div>
										<div class="modal-body">
											<div class="col-12">
												<div class="row">
													@if (IsLoadingAct == true)
													{
														<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="height:200px; width:200px" Loop="true" /></p>
													}
													else
													{
														<div class="col-3 offset-3">
															<button style="width: 100px" @onclick="async () => await UpdatePromotion()" class="btn btn-primary">Đồng ý</button>
														</div>
														<div class="col-6">
															<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-danger">Hủy</button>
														</div>
													}
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						}
					}

					@if (isModalVisibleConfirm == 2)
					{
						<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="p-3">
										<div class="col-12">
											<div class="row">
												<div class="col-1">
													<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
														<span aria-hidden="true">&times;</span>
													</button>
												</div>
											</div>
											<div class="row">
												<div align="center">
													@if (messageString == "Success")
													{
														<div style="width:200px; height:200px">
															<LottieAnimation Path="/json/Ok_Animation.json" Loop="false" />
														</div>
													}

													@if (messageString == "Faild")
													{
														<div style="width:200px; height:200px">
															<LottieAnimation Path="/json/Cancel_Animation.json" Loop="false" />
														</div>
													}
												</div>
											</div>
										</div>
									</div>
									<div class="mb-2">
										<div align="center">
											<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-primary">Đồng ý</button>
										</div>
									</div>
								</div>
							</div>
						</div>
					}
					<!--End modal-->



				</div>
			</div>
			<div class="row mt-2 table-promotion">
				<table class="table">
					<thead>
						<tr>
							<th>#</th>
							<th>Tên KM</th>
							<th>Mã</th>
							<th>Phần trăm giảm</th>
							<th>Số tiền giảm</th>
							<th>Ngày bắt đầu</th>
							<th>Ngày kết thúc</th>
							<th>Mô tả</th>
							<th>Trạng thái</th>
							<th>Hành động</th>
						</tr>
					</thead>
					<tbody>
						@if (filteredPromotions.Any())
						{
							foreach (var item in _lstpro.OrderByDescending(x => x.CreatedTime).Select((value, index) => new { value, index }))
							{
								<tr>
									<td>@(item.index + 1)</td>
									<td>@item.value.Name</td>
									<td>@item.value.Code</td>
									@if (item.value.DiscountPercentage == null)
									{
										<td>Không có</td>
									}
									else
									{
										<td><mark class="p-1">@item.value.DiscountPercentage%</mark></td>
									}
									@if (item.value.DiscountAmount == null)
									{
										<td>Không có</td>
									}
									else
									{
										<td><mark class="p-1">@item.value.DiscountAmount<text><u>đ</u></text></mark></td>
									}
									<td>@item.value.StartDate</td>
									<td>@item.value.EndDate</td>
									<td>@item.value.Description</td>
									<td><span class="@GetStatusClass(item.value.Status) text-white rounded">@item.value.Status</span></td>
									<td>
										<button @onclick="async () => await OpenModal2(item.value.ID)" class="btn"><i class="fa-solid fa-eye" style="color: #74C0FC;"></i></button>
										<button @onclick="async () => await OpenModal4(item.value.ID)" class="btn"><i class="fa-solid fa-pen"></i></button>
										<button @onclick="async () => await OpenModal3(item.value.ID)" class="btn"><i class="fa-solid fa-trash-can" style="color: #ff0000;"></i></button>
									</td>
								</tr>
							}
						}
						else
						{
							<tr>
								<td colspan="8" class="text-center">Không có bản ghi nào phù hợp.</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
}


<style>
	td {
		text-align: center
	}

	th {
		text-align: center
	}

	.modal {
		top: 4.5%;
	}

	.modalConfirm {
		top: 30%;
	}
</style>

@code {
	//chờ  load
	private bool IsLoading = true;
	private bool IsLoadingAct = false;
	//
	int stt = 1;
	//
	private string inputSearchUser = ""; //tim kiem theo ten user
	private List<PromotionDTO> _lstpro = new List<PromotionDTO>();
	private List<MailPromotionRequest> _lstMail = new List<MailPromotionRequest>();
	private List<CustomerViewModel_Promotion> _lstuser = new List<CustomerViewModel_Promotion>();
	private List<UserDTO> _lstUser = new List<UserDTO>();
	private PromotionCreateRequest input = new PromotionCreateRequest();
	private PromotionDTO inputUpdate = new PromotionDTO();
	private string messageString = null; //thong bao confirm
	private Guid idActive; //id update/delete promotion
	private bool selectAll = false; //chon tat ca user

	//Chọn loại giảm giá
	private bool discountPercentage = true;
	private bool discountAmount = false;

	public bool IsPercentage
	{
		get => discountPercentage;
		set
		{
			if (!discountPercentage)
			{
				input.DiscountPercentage = null;
				inputUpdate.DiscountPercentage = null;
			}
			else
			{
				input.DiscountAmount = null;
				inputUpdate.DiscountAmount = null;
			}

			discountPercentage = value;
			discountAmount = !value; // Ngược lại với discountPercentage

		}
	}

	//filter
	private int? selectedStatus = 0; // Mặc định trạng thái "Tất cả"
	private string inputSearchPromotion = ""; //tim kiem theo ten pro
	private DateTime? startDate;
	private DateTime? endDate;
	private List<PromotionDTO> filteredPromotions = new List<PromotionDTO>();



	//Gen code
	private string codegen = Uliti.GenerateCode();



	//Modal
	private int isModalVisible = 0;
	private int isModalVisibleConfirm = 0;

	//Màu trạng thái
	private string GetStatusClass(PromotionStatus status)
	{
		return status switch
		{
			PromotionStatus.Active => "bg-success",    // Màu xanh khi trạng thái là "Active"
			PromotionStatus.InActive => "bg-warning",  // Màu vàng khi trạng thái là "InActive"
			PromotionStatus.Expired => "bg-danger",    // Màu đỏ khi trạng thái là "Expired"
		};
	}
	private HubConnection? hubConnection;


	protected override async Task OnInitializedAsync()
	{
		await LoadPromotion();
		await FilterRecords();
		await LoadUser();

		await ConnectToSignalRHub();
	}

	private async Task ConnectToSignalRHub()
	{
		// Tạo kết nối với SignalR Hub
		hubConnection = new HubConnectionBuilder()
			.WithUrl(_nav.ToAbsoluteUri("/promohub"))
			.Build();

		// Đăng ký sự kiện nhận thông báo
		hubConnection.On<string>("ReceivePromotionUpdate", async (message) =>
		{
			// Cập nhật trạng thái khi nhận được thông báo
			await InvokeAsync(async () =>
			{
				// Tải lại danh sách mã khuyến mại hoặc cập nhật trực tiếp
				await LoadPromotion();
				StateHasChanged(); // Cập nhật lại UI
			});
		});

		// Bắt đầu kết nối SignalR
		await hubConnection.StartAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}

	//Get All promotion
	private async Task LoadPromotion()
	{
		_lstpro = await _prosv.GetPromotionListAsync();
		await Task.Delay(2000);
		IsLoading = false;
	}

	//Get all user
	private async Task LoadUser()
	{
		var lstus = await _prosv.GetAllUserAsync(inputSearchUser);

		_lstuser = lstus.Select(customer => new CustomerViewModel_Promotion
			{
				ID = customer.ID,
				FullName = customer.FullName,
				PassWord = customer.PassWord,
				PhoneNumber = customer.PhoneNumber,
				Email = customer.Email,
				Gender = customer.Gender,
				Images = customer.Images,
				DateOrBriht = customer.DateOrBriht,
				Adderss = customer.Adderss,
				Status = customer.Status,
				RoleID = customer.RoleID,
				IsSelected = false
			}).ToList();
	}

	private async Task OnInputSearchUserChanged(ChangeEventArgs e)
	{
		inputSearchUser = e.Value.ToString(); // Cập nhật giá trị tìm kiếm
		await LoadUser();
	}





	private void OpenModal1()
	{
		isModalVisible = 1;

		selectAll = false;
		foreach (var user in _lstuser)
		{
			user.IsSelected = false;
		}
	}

	private void CloseModal()
	{
		isModalVisible = 0;
		messageString = null;
		inputUpdate = new PromotionDTO();
	}

	private void CloseModalConfirm()
	{
		isModalVisibleConfirm = 0;
	}

	private async Task OpenModal2(Guid id)
	{
		isModalVisible = 2;
		_lstUser = await _prosv.GetPUbyProID(id);
	}


	private async Task OpenModal3(Guid id)
	{
		idActive = id;
		isModalVisible = 3;
	}

	private async Task OpenModal4(Guid id)
	{
		idActive = id;
		inputUpdate = await _prosv.GetPromotionByIdAsync(id);
		isModalVisible = 4;

		ValidateTime(input.StartDate, input.EndDate);
	}

	//Modal confirm
	private async Task OpenModalConfirm1()
	{
		isModalVisibleConfirm = 1;
	}

	private async Task OpenModalConfirm2()
	{
		isModalVisibleConfirm = 3;
	}


	//Add
	public async Task AddPromotion()
	{
		ValidateTime(input.StartDate, input.EndDate);
		IsLoadingAct = true;
		using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
		{
			try
			{
				input.ID = Guid.NewGuid();
				input.Code = codegen;
				var check = await _prosv.CreatePromotionAsync(input);

				if (check && checkStartDate && checkEndDate)
				{
					List<PromotionUserDTO> lstPU = new List<PromotionUserDTO>();

					foreach (var item in GetSelectedUser())
					{
						PromotionUserDTO x = new PromotionUserDTO
							{
								PromotionID = input.ID,
								UserID = item.ID
							};

						lstPU.Add(x);

						MailPromotionRequest mailitem = new MailPromotionRequest
							{
								FullName = item.FullName,
								NamePromotion = input.Name,
								ToEmail = item.Email,
								Code = input.Code,
								StartDate = input.StartDate,
								EndDate = input.EndDate,
								DiscountPercentage = input.DiscountPercentage,
								DiscountAmount = input.DiscountAmount

							};
						_lstMail.Add(mailitem);
					}

					if (lstPU.Count == 0)
					{
						messageString = "Faild";
						return;
					}

					if (await _prosv.CreatePromotionUserAsync(lstPU))
					{
						await _prosv.SendMailWithTemplateAsync(_lstMail);
						scope.Complete();
						messageString = "Success";


						//Reset input và list
						input = new PromotionCreateRequest();
						await LoadPromotion();
					}
					else
					{
						messageString = "Faild";
						return;
					}
				}
				else
				{
					messageString = "Faild";
					return;
				}
			}
			catch
			{
				return;
			}
			finally
			{
				//Mở modal thông báo
				isModalVisibleConfirm = 2;
			}

		}
		IsLoading = false;
	}

	//back
	public void BackList()
	{
		_nav.NavigateTo("/list-promotion-admin");
		CloseModal();
	}


	//Delete
	public async Task DeletePromotion(Guid id)
	{
		IsLoadingAct = true;
		var check = await _prosv.DeletePromotionAsync(id);

		if (check)
		{
			_nav.NavigateTo("/list-promotion-admin");
			idActive = Guid.Empty;
			messageString = "Thêm thành công";
		}
		else
		{
			messageString = "Thêm thất bại"; //chỉ là một từ khóa để thông báo
		}

		isModalVisibleConfirm = 2;

		await LoadPromotion();
		IsLoadingAct = false;
	}

	//Update
	public async Task UpdatePromotion()
	{
		IsLoadingAct = true;
		try
		{
			if(checkStartDate && checkEndDate)
			{
				var check = await _prosv.UpdatePromotionAsync(inputUpdate);

				if (check)
				{
					messageString = "Success";
					await LoadPromotion();

				}
				else
				{
					messageString = "Faild";
				}
			}
			else
			{
				messageString = "Faild";
			}
		}
		catch (Exception ex)
		{
			messageString = "Faild";
		}
		finally
		{
			//Mở modal thông báo
			isModalVisibleConfirm = 2;
			IsLoadingAct = false;
		}
	}

	//Select
	// Cập nhật tất cả checkbox trong danh sách khi selectAll thay đổi
	private void ToggleSelectAll()
	{
		foreach (var user in _lstuser)
		{
			user.IsSelected = !selectAll;
		}
	}

	// Cập nhật trạng thái selectAll dựa trên trạng thái của các checkbox trong danh sách
	private void UpdateSelectAll()
	{
		selectAll = _lstuser.All(u => u.IsSelected);
	}

	//Hàm trả về danh sách Id của các mục được chọn
	private List<CustomerViewModel_Promotion> GetSelectedUser()
	{
		return _lstuser.Where(u => u.IsSelected).ToList();
	}

	//Code lọc nè

	private async Task OnInputSearchProChanged(ChangeEventArgs e)
	{
		inputSearchPromotion = e.Value.ToString();

		await FilterRecords();
	}

	private async Task OnInputStartDateChanged(ChangeEventArgs e)
	{
		startDate = DateTime.Parse(e.Value.ToString());

		await FilterRecords();
	}

	private async Task OnInputEndDateChanged(ChangeEventArgs e)
	{
		endDate = DateTime.Parse(e.Value.ToString());

		await FilterRecords();
	}

	private async Task OnInputStatusChanged(ChangeEventArgs e)
	{
		if (Convert.ToInt32(e.Value.ToString()) == 0)
		{
			selectedStatus = 0;
		}
		else
		{
			selectedStatus = Convert.ToInt32(e.Value.ToString());
		}


		await FilterRecords();
	}

	//
	private bool checkStartDate = true;
	private async Task OnInputStartDateProChanged(ChangeEventArgs e)
	{
		ValidateTime(DateTime.Parse(e.Value.ToString()), input.EndDate);
	}

	private bool checkEndDate = true;
	private async Task OnInputEndDateProChanged(ChangeEventArgs e)
	{
		ValidateTime(input.StartDate, DateTime.Parse(e.Value.ToString()));
	}

	private void ValidateTime(DateTime startDate, DateTime endDate)
	{
		if (startDate < DateTime.Now)
		{
			checkStartDate = false;
		}
		else checkStartDate = true;


		if ((endDate - startDate).TotalDays < 1)
		{
			checkEndDate = false;
		}
		else checkEndDate = true;

	}
	

	private async Task FilterRecords()
	{
		filteredPromotions = _lstpro.Where(promo =>
			(string.IsNullOrWhiteSpace(inputSearchPromotion) || promo.Name.Contains(inputSearchPromotion, StringComparison.OrdinalIgnoreCase)) &&
			(selectedStatus == 0 || promo.Status == (PromotionStatus)selectedStatus.Value) &&
			(!startDate.HasValue || promo.StartDate >= startDate.Value) &&
			(!endDate.HasValue || promo.EndDate <= endDate.Value)
		).ToList();

		// Đảm bảo UI được cập nhật
		await InvokeAsync(StateHasChanged);
	}

}

