@page "/screenings"
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Application.DataTransferObject.Screening
@using NeonCinema_Application.DataTransferObject.ShowTime
@using NeonCinema_Application.Pagination
@using NeonCinema_Client.Data.IServices.Screenning
@inject IScreeningService ScreeningService
@inject NavigationManager navi

<h3 class="text-center mt-4">Danh sách lịch chiếu</h3>

<div class="d-flex justify-content-center mb-4">
    <button class="btn btn-success" @onclick="ToggleCreateForm">Thêm mới</button>
</div>

@if (isCreating)
{
    <div class="form-container mx-auto p-4 rounded shadow">
        <h4 class="text-center">Create New Screening</h4>
        <EditForm Model="newScreening" OnValidSubmit="CreateScreening">
            <div class="form-group">
                <InputSelect @bind-Value="newScreening.ShowTimeID" class="form-control">
                        <option value="" disabled selected>Chọn thời gian</option>
                    @foreach (var showTime in showTime)
                        {
                        <option value="@showTime.ID">@showTime.StartTime</option>
                        }
                </InputSelect>
            </div>
@*             <div class="form-group">
                <InputSelect @bind-Value="newScreening.ShowDate" class="form-control">
                    <option value="" disabled selected>Chọn quốc gia</option>
                    @foreach (var showTime in showTime)
                    {
                        <option value="@showTime.ID">@showTime.StartTime</option>
                    }
                </InputSelect>
            </div> *@
            <div class="form-group">
                <InputSelect @bind-Value="newScreening.MovieID" class="form-control">
                    <option value="" disabled selected>Chọn phim</option>
                    @foreach (var movies in movies.Data)
                    {
                        <option value="@movies.ID">@movies.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <InputSelect @bind-Value="newScreening.RoomID" class="form-control">
                    <option value="" disabled selected>Chọn phòng</option>
                    @foreach (var rooms in rooms)
                    {
                        <option value="@rooms.ID">@rooms.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label>Status</label>
                <InputSelect @bind-Value="newScreening.Status" class="form-control">
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                </InputSelect>
            </div>
            <div class="d-flex justify-content-center mt-3">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </EditForm>
        <hr />
    </div>
}

											<div class="mb-3">
												<label for="" class="form-label">Giờ kết thúc</label>
												<input type="time" @bind="endTime" class="form-control" readonly />
											</div>
											@if (!ValidateST(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))))
											{
												<p style="color: red; font-size:14px; font-style: italic">Lịch chiếu bị chồng lấn lên lịch khác</p>
											}

											<button type="submit" class="btn btn-primary">Tạo lịch</button>
										</ChildContent>
									</EditForm>
								</div>
								<div class="col-6 offset-1">
									<div class="row">
										<h6>Danh sách lịch chiếu <b>@roomName</b> ngày <b>@date.ToString("dd/MM/yyyy")</b></h6>
									</div>
									<div class="row p-1 rounded border mt-2 " style="height:300px; overflow-y: auto;">
										<table class="table">
											<thead style="position: sticky; top: 0; background-color: white;">
												<tr>
													<th>#</th>
													<th>Thời gian bắt đầu</th>
													<th>Thời gian kết thúc</th>
												</tr>
											</thead>
											<tbody>
												@foreach (var item in _lstSTFil.Select((value, index) => new { value, index }))
												{
													<tr>
														<td>@(item.index + 1)</td>
														<td>@item.value.StartTime</td>
														<td>@item.value.EndTime</td>
													</tr>
												}
											</tbody>
										</table>
									</div>
								</div>
							</div>
						</div>
						
					</div>
				</div>
			</div>
		</div>

		if (isModalVisibleConfirm == 1)
		{
			<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<div class="col-12">
								<div class="row">
									<div class="col-1">
										<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
											<span aria-hidden="true">&times;</span>
										</button>
									</div>
									<div class="col-5">
										<h6>Xác nhận</h6>
									</div>
								</div>

							</div>
						</div>
						<div class="modal-body">
							<div class="col-12">
								<div class="row">
									@if(IsLoadingAct == true)
									{
										<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 200px; height: 200px" Loop="true" /></p>
									}
									else
									{
										<div class="col-3 offset-3">
											<button style="width: 100px" @onclick="async() => await AddScreening()" class="btn btn-primary">Đồng ý</button>
										</div>
										<div class="col-6">
											<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-danger">Hủy</button>
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	}

	@if (isModalVisibleConfirm == 2)
	{
		<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="p-3">
						<div class="col-12">
							<div class="row">
								<div class="col-1">
									<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
							</div>
							<div class="row">
								<div align="center">
									@if (messageString == "Success")
									{
										<div style="width:200px; height:200px">
											<LottieAnimation Path="/json/Ok_Animation.json" Loop="false" />
										</div>
									}

									@if (messageString == "Faild")
									{
										<div style="width:200px; height:200px">
											<LottieAnimation Path="/json/Cancel_Animation.json" Loop="false" />
										</div>
									}
								</div>
							</div>
						</div>
					</div>
					<div class="mb-2">
						<div align="center">
							<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-primary">Đồng ý</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
    private List<ScreeningDTO> screenings;
    private ScreeningCreateRequest newScreening = new ScreeningCreateRequest();
    private List<ShowTimeDTO> showTime = new List<ShowTimeDTO>();
    private PaginationResponse<MovieDTO> movies = new PaginationResponse<MovieDTO>();
    private List<RoomDTO> rooms = new List<RoomDTO>();
    private bool isCreating = false;

    protected override async Task OnInitializedAsync()
    {
        screenings = await ScreeningService.GetAllScreeningsAsync();
        movies = await ScreeningService.GetAllMoviesAsync();
        showTime = await ScreeningService.GetAllShowTimesAsync();
        rooms = await ScreeningService.GetAllRoomsAsync();
    }

    private void ToggleCreateForm()
    {
        isCreating = !isCreating;
    }

    private async Task CreateScreening()
    {
                
    }

    private void AddScreening()
    {
        navi.NavigateTo("/create-screening");
    }

    private async Task EditScreening(Guid id)
    {
        navi.NavigateTo($"/edit-screening/{id}");
    }

    private async Task DeleteScreening(Guid id)
    {
        await ScreeningService.DeleteScreeningAsync(id);
        screenings = await ScreeningService.GetAllScreeningsAsync();
    }
}
<style>
    .form-container {
        max-width: 600px;
        background-color: #f8f9fa;
    }

    .table-responsive {
        margin-top: 20px;
    }

    .table thead {
        background-color: #343a40;
        color: white;
    }

    .text-center {
        text-align: center;
    }

</style>