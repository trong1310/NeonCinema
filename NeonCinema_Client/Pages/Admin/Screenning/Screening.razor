@page "/screenings"
@using NeonCinema_Application.DataTransferObject.Movie
@using NeonCinema_Application.DataTransferObject.Room
@using NeonCinema_Application.DataTransferObject.Screening
@using NeonCinema_Application.DataTransferObject.Seats
@using NeonCinema_Application.DataTransferObject.ShowTime
@using NeonCinema_Application.Pagination
@using NeonCinema_Client.Data.IServices.IRoom
@using NeonCinema_Client.Data.IServices.Screenning
@using System.Transactions
@using NeonCinema_Domain.Enum
@using NeonCinema_Domain.Database;
@inject IScreeningService _scrSv
@inject IShowTimeService _stSv
@inject IRoomService _roSv
@layout LayoutAdmin
@inject NavigationManager navi
@attribute [Authorize(Roles = "Admin")]

@if (IsLoading == true)
{
	<p class="mt-5" align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 100px; height: 100px;" Loop="true" /></p>
}
else
{
	<div>
		<div class="col-12 p-5">
			<h6 style="display: inline;">Danh sách lịch chiếu</h6>
			<hr>
			<div class="row boxfilter p-2">
				<div class="col-6">
					<div class="form-group">
						<label for="Search">Tìm kiếm</label>
						<InputText class="form-control" style="width: 500px;" @bind-Value="nameMovie" placeholder="Tìm kiếm theo tên phim" @oninput="OnInputSearchScrChanged" />
					</div>
					<div class="form-check">
						<div class="row mt-3">
							
						</div>
					</div>
				</div>
				<div class="col-2">
					<label for="StartDate">Từ ngày</label>
					<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="fromDate" @oninput="OnInputFromDateChanged" />

				</div>
				<div class="col-2">
					<label for="EndDate">Đến ngày</label>
					<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="toDate" @oninput="OnInputToDateChanged" />
				</div>
				<div class="col-2">
					<button class="btn btn-primary" style="margin-top: 23px" @onclick="ResetFilter">Đặt lại</button>
				</div>


			</div>
			<div class="row mt-5">
				<div class="col-11"></div>
				<div class="col-1">
					<button @onclick="async () => await ToggleCreateForm()" class="btn"><i class="fa-solid fa-square-plus fa-2xl" style="color: #00ff88;"></i></button>
				</div>
			</div>
			<div class="row mt-2 table-promotion">
				<table class="table">
					<thead>
						<tr>
							<th>#</th>
							<th>Phim</th>
							<th>Ngày chiếu</th>
							<th>Giờ chiếu</th>
							<th>Phòng</th>
							<th>Trạng thái</th>
							<th>Hành động</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var item in lstFilScreening.OrderByDescending(x => x.CreatedTime).Select((value, index) => new { value, index }))
						{
							if (item.value.Status != ScreeningStatus.Ended)
							{
								<tr>
									<td>@(item.index + 1)</td>
									<td>@item.value.FlimsName</td>
									<td>@item.value.ShowDate?.ToString("dd/MM/yyyy")</td>
									<td>@item.value.ShowTime?.ToString()</td>
									<td>@item.value.RoomName</td>
									<td>
										<span class="@GetStatusClass(item.value.Status) text-white rounded">
											@if (item.value.Status == ScreeningStatus.InActive)
											{
												<text>Chưa chiếu</text>
											}
											else if (item.value.Status == ScreeningStatus.Showing)
											{
												<text>Đang chiếu</text>
											}
											else if (item.value.Status == ScreeningStatus.Ended)
											{
												<text>Đã kết thúc</text>
											}
											else if (item.value.Status == ScreeningStatus.Cancelled)
											{
												<text>Bị hủy</text>
											}
										</span>
									</td>
									<td>
										@if (item.value.Status == ScreeningStatus.InActive)
										{
											<button @onclick="() => ToggleEditForm(item.value.ID)" class="btn"><i class="fa-solid fa-pen"></i></button>
											<button @onclick="() => OpenModalConfirm2(item.value.ID)" class="btn"><i class="fa-solid fa-trash-can" style="color: #ff0000;"></i></button>
										}
									</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>

	@if (isModalVisible == 1)
	{
		<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
			<div class="modal-dialog" role="document">
				<div class="modal-content" style="width: 1230px; right: 50%; height: auto">
					<div class="modal-header">
						<div class="col-12">
							<div class="row">
								<div class="col-1">
									<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="col-5">
									<h6>Tạo lịch chiếu</h6>
								</div>
							</div>

						</div>
					</div>
					<div class="modal-body">
						<div class="col-12 p-3">
							<div class="row">
								<div class="col-5">
									<EditForm Model="newScreening" OnValidSubmit="OpenModalConfirm1">
										<ChildContent Context="createContext">
											<DataAnnotationsValidator />

											<div class="mb-3">
												<label for="" class="form-label">Phim</label>
												<InputSelect @bind-Value="newScreening.MovieID" @oninput="OnInputChangedMovie" class="form-control">
													<option value="" disabled selected>Chọn phim</option>
													@foreach (var movies in movies.Data)
													{
														<option value="@movies.ID">@movies.Name</option>
													}
												</InputSelect>
												<ValidationMessage For="@(() => newScreening.MovieID)" />
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Phòng chiếu</label>
												<InputSelect @bind-Value="newScreening.RoomID" @oninput="OnInputChangedRoom" class="form-control">
													<option value="" disabled selected>Chọn phòng</option>
													@foreach (var rooms in rooms)
													{
														<option value="@rooms.ID">@rooms.Name</option>
													}
												</InputSelect>
												<ValidationMessage For="@(() => newScreening.RoomID)" />
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Ngày chiếu</label>
												<InputDate @bind-Value="date" @oninput="OnInputChangedDate" class="form-control"></InputDate>
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Giờ chiếu</label>
												<input type="time" @bind="startTime" @oninput="OnInputChangedStartTime" class="form-control" />
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Giờ kết thúc</label>
												<input type="time" @bind="endTime" class="form-control" readonly />
											</div>
											@if (!ValidateST(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))))
											{
												<p style="color: red; font-size:14px; font-style: italic">Lịch chiếu bị trùng với lịch khác. Vui lòng kiểm tra lại</p>
											}
											@if (!checkCDate)
											{
												<p style="color: red; font-size:14px; font-style: italic">Lịch chiếu phải lớn hơn ngày hiện tại <br /> và nhỏ hơn ngày khởi chiếu @comingDate</p>
											}
											@if (!ValidateST2(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))))
											{
												<p style="color: red; font-size:14px; font-style: italic">Thời gian bắt đầu chỉ từ 8h30 đến 23h45</p>
											}

											<button type="submit" class="btn btn-primary">Tạo lịch</button>
										</ChildContent>
									</EditForm>
								</div>
								<div class="col-6 offset-1">
									<div class="row">
										<h6>Danh sách lịch chiếu <b>@roomName</b> ngày <b>@date.ToShortDateString()</b></h6>
									</div>
									<div class="row p-1 rounded border mt-2 " style="height:300px; overflow-y: auto;">
										<table class="table">
											<thead style="position: sticky; top: 0; background-color: white;">
												<tr>
													<th>#</th>
													<th>Thời gian bắt đầu</th>
													<th>Thời gian kết thúc</th>
												</tr>
											</thead>
											<tbody>
												@foreach (var item in _lstSTFil.Select((value, index) => new { value, index }))
												{
													<tr>
														<td>@(item.index + 1)</td>
														<td>@item.value.StartTime</td>
														<td>@item.value.EndTime</td>
													</tr>
												}
											</tbody>
										</table>
									</div>
								</div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>

		if (isModalVisibleConfirm == 1)
		{
			<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<div class="col-12">
								<div class="row">
									<div class="col-1">
										<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
											<span aria-hidden="true">&times;</span>
										</button>
									</div>
									<div class="col-5">
										<h6>Xác nhận</h6>
									</div>
								</div>

							</div>
						</div>
						<div class="modal-body">
							<div class="col-12">
								<div class="row">
									@if (IsLoadingAct == true)
									{
										<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 200px; height: 200px" Loop="true" /></p>
									}
									else
									{
										<div class="col-3 offset-3">
											<button style="width: 100px" @onclick="async() => await AddScreening()" class="btn btn-primary">Đồng ý</button>
										</div>
										<div class="col-6">
											<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-danger">Hủy</button>
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	}

	if (isModalVisible == 2)
	{
		<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
			<div class="modal-dialog" role="document">
				<div class="modal-content" style="width: 1230px; right: 50%; height: auto; top: 100px">
					<div class="modal-header">
						<div class="col-12">
							<div class="row">
								<div class="col-1">
									<button type="button" class="close" @onclick="CloseModal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="col-5">
									<h6>Sửa lịch chiếu</h6>
								</div>
							</div>

						</div>
					</div>
					<div class="modal-body">
						<div class="col-12 p-3">
							<div class="row">
								<div class="col-5">
									<EditForm Model="updateScr" OnValidSubmit="OpenModalConfirm3">
										<ChildContent Context="createContext">
											<DataAnnotationsValidator />
											<div class="mb-3">
												<label for="" class="form-label">Phim</label>
												<InputSelect @bind-Value="updateScr.MovieID" @oninput="OnInputChangedMovie" class="form-control">
													<option value="" disabled selected>Chọn phim</option>
													@foreach (var movies in movies.Data)
													{
														<option value="@movies.ID">@movies.Name</option>
													}
												</InputSelect>
												<ValidationMessage For="@(() => updateScr.MovieID)" />
											</div>
											<div class="mb-3">
												<label for="" class="form-label">Phòng chiếu</label>
												<InputSelect @bind-Value="updateScr.RoomID" @oninput="OnInputChangedRoom" class="form-control" disabled="@isDisabled">
													<option value="" disabled selected>Chọn phòng</option>
													@foreach (var rooms in rooms)
													{
														<option value="@rooms.ID">@rooms.Name</option>
													}
												</InputSelect>
												<ValidationMessage For="@(() => updateScr.RoomID)" />
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Ngày chiếu</label>
												<InputDate @bind-Value="date"
														   @oninput="OnInputChangedDate"
														   class="form-control"
														   disabled="@isDisabled">
												</InputDate>
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Giờ chiếu</label>
												<input type="time" @bind="startTime" @oninput="OnInputChangedStartTimeEdit" class="form-control" readonly />
											</div>

											<div class="mb-3">
												<label for="" class="form-label">Giờ kết thúc</label>
												<input type="time" @bind="endTime" class="form-control" readonly />
											</div>
											@* 	@if (!ValidateST(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))))
											{
												<p style="color: red; font-size:14px; font-style: italic">Lịch chiếu bị trùng với lịch khác. Vui lòng kiểm tra lại</p>
											}
											@if (!checkCDate)
											{
												<p style="color: red; font-size:14px; font-style: italic">Lịch chiếu phải lớn hơn ngày hiện tại <br /> và nhỏ hơn ngày khởi chiếu @comingDate</p>
											}
											@if (!ValidateST2(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))))
											{
												<p style="color: red; font-size:14px; font-style: italic">Thời gian bắt đầu chỉ từ 8h30 đến 23h45</p>
											}
 *@
											<button type="submit" class="btn btn-primary">Lưu thay đổi</button>
										</ChildContent>
									</EditForm>
								</div>
								<div class="col-6 offset-1">
									<div class="row">
										<h6>Danh sách lịch chiếu <b>@roomName</b> ngày <b>@date.ToShortDateString()</b></h6>
									</div>
									<div class="row p-1 rounded border mt-2 " style="height:300px; overflow-y: auto;">
										<table class="table">
											<thead style="position: sticky; top: 0; background-color: white;">
												<tr>
													<th>#</th>
													<th>Thời gian bắt đầu</th>
													<th>Thời gian kết thúc</th>
												</tr>
											</thead>
											<tbody>
												@foreach (var item in _lstSTFil.Select((value, index) => new { value, index }))
												{
													<tr>
														<td>@(item.index + 1)</td>
														<td>@item.value.StartTime</td>
														<td>@item.value.EndTime</td>
													</tr>
												}
											</tbody>
										</table>
									</div>
								</div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>
	}

	if (isModalVisibleConfirm == 3)
	{
		<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<div class="col-12">
							<div class="row">
								<div class="col-1">
									<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="col-3 text-center">
									<h6>Bạn chắc chắn muốn xóa ?</h6>
								</div>
							</div>

						</div>
					</div>
					<div class="modal-body">
						<div class="col-12">
							<div class="row">
								@if (IsLoadingAct == true)
								{
									<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 200px; height: 200px" Loop="true" /></p>
								}
								else
								{
									<div class="col-3 offset-3">
										<button style="width: 100px" @onclick="async() => await DeleteScreening(delScrId)" class="btn btn-primary">Đồng ý</button>
									</div>
									<div class="col-6">
										<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-danger">Hủy</button>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}


	@if (isModalVisibleConfirm == 2)
	{
		<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="p-3">
						<div class="col-12">
							<div class="row">
								<div class="col-1">
									<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
							</div>
							<div class="row">
								<div align="center">
									@if (messageString == "Success")
									{
										<div style="width:200px; height:200px">
											<LottieAnimation Path="/json/Ok_Animation.json" Loop="false" />
										</div>
									}

									@if (messageString == "Faild")
									{
										<div style="width:200px; height:200px">
											<LottieAnimation Path="/json/Cancel_Animation.json" Loop="false" />
										</div>
									}
								</div>
							</div>
							@if (messageStringDel != null)
							{
								<div class="row">
									<p align="center" style="color: red">@messageStringDel</p>
								</div>
							}
							@if (messageUpdate != null)
							{
								<div class="row">
									<p align="center" style="color: red">@messageUpdate</p>
								</div>
							}
						</div>
					</div>
					<div class="mb-2">
						<div align="center">
							<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-primary">Đồng ý</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	}

	@if (isModalVisibleConfirm == 4)
	{
		<div class="modal fade show modalConfirm" tabindex="-1" role="dialog" style="display: block;">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<div class="col-12">
							<div class="row">
								<div class="col-1">
									<button type="button" class="close" @onclick="CloseModalConfirm" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="col-5">
									<h6>Xác nhận</h6>
								</div>
							</div>

						</div>
					</div>
					<div class="modal-body">
						<div class="col-12">
							<div class="row">
								@if (IsLoadingAct == true)
								{
									<p align="center"><LottieAnimation Path="/json/Loading_Animation.json" Style="width: 200px; height: 200px" Loop="true" /></p>
								}
								else
								{
									<div class="col-3 offset-3">
										<button style="width: 100px" @onclick="async() => await EditScreening()" class="btn btn-primary">Đồng ý</button>
									</div>
									<div class="col-6">
										<button style="width: 100px" @onclick="CloseModalConfirm" class="btn btn-danger">Hủy</button>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	private bool IsLoading = true;
	private bool IsLoadingAct = false;
	private int isModalVisible = 0;
	private int isModalVisibleConfirm = 0;
	private string messageString = "";
	private List<ScreeningDTO> screenings = new List<ScreeningDTO>();
	private List<ScreeningDTO> lstFilScreening = new List<ScreeningDTO>();
	private ScreeningCreateRequest newScreening = new ScreeningCreateRequest();
	private NeonCinema_Domain.Database.Entities.Screening updateScr = new NeonCinema_Domain.Database.Entities.Screening();
	private ShowTimeCreateRequest newShowTime = new ShowTimeCreateRequest();
	private List<ShowTimeDTO> _lstSTFil = new List<ShowTimeDTO>();
	private PaginationResponse<MovieDTO> movies = new PaginationResponse<MovieDTO>();
	private List<RoomDTO> rooms = new List<RoomDTO>();
	private bool isDisabled = true;
	private bool checkCDate = true;


	//input của Scr
	private Guid roomId;
	private DateTime date = DateTime.Now;
	private DateTime startTime = DateTime.Parse("8:30");
	private DateTime endTime = DateTime.Parse("8:30");
	//
	private string roomName = "";
	private string moviesName = "";

	private int? duration = null;
	//
	private string comingDate = "";

	//id delete
	private Guid delScrId = Guid.Empty;

	protected override async Task OnInitializedAsync()
	{
		await LoadScreening();
		movies = await _scrSv.GetAllMoviesAsync();

		//lọc trạng thái trước khi load
		movies.Data = movies.Data.Where(x => x.Status == MovieStatus.isreleasing || x.Status == MovieStatus.upcomingkrelease).ToList();

		rooms = await _scrSv.GetAllRoomsAsync();
		await LoadShowTimeFil();
		await LoadFilScreenings();
	}

	private async Task LoadScreening()
	{
		try
		{
			screenings = await _scrSv.GetAllScreeningsAsync();
			await Task.Delay(2000);
			IsLoading = false;
		}
		catch (Exception ex)
		{
			throw new Exception(ex.Message);
		}
		finally
		{
			await LoadFilScreenings();
		}

	}

	private async Task LoadShowTimeFil()
	{
		_lstSTFil = await _scrSv.GetShowTimebyRoomAndDate(roomId, date);
	}

	private async Task ToggleCreateForm() // modal create
	{
		isModalVisible = 1;
		await LoadShowTimeFil();
	}

	private async Task ToggleEditForm(Guid id)
	{
		updateScr = await _scrSv.GetScreeningById(id);


		date = updateScr.ShowDate;
		startTime = DateTime.Parse(updateScr.ShowTime.StartTime.ToString());
		endTime = DateTime.Parse(updateScr.ShowTime.EndTime.ToString());


		isModalVisible = 2;
		await LoadShowTimeFil();
	}

	private void OpenModalConfirm1() //confirm create
	{
		isModalVisibleConfirm = 1;
	}

	private void OpenModalConfirm2(Guid id) //confirm delete
	{
		delScrId = id;
		isModalVisibleConfirm = 3;
	}

	private void OpenModalConfirm3() //confirm edit
	{
		isModalVisibleConfirm = 4;
	}

	private async Task AddScreening()
	{
		IsLoadingAct = true; //animation loading
		using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
		{
			try
			{
				if (!ValidateST(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))) || !checkCDate || !ValidateST2(TimeSpan.Parse(startTime.ToString("HH:mm")), TimeSpan.Parse(endTime.ToString("HH:mm"))))
				{
					messageString = "Faild";
					return;
				}
				else
				{
					List<SeatDTO> lstSeatInRoom = await _roSv.GetSeatsByRoomId(newScreening.RoomID);
					newShowTime.StartTime = TimeSpan.Parse(startTime.ToString("HH:mm"));
					newShowTime.EndTime = TimeSpan.Parse(endTime.ToString("HH:mm"));
					newShowTime.Status = NeonCinema_Domain.Enum.EntityStatus.Inactive;

					if (await _stSv.CreateShowTime(newShowTime, CancellationToken.None))
					{
						var lstSt = await _stSv.GetAllShowTimes(CancellationToken.None);

						var showtime = lstSt.FirstOrDefault(x => x.StartTime == newShowTime.StartTime && x.EndTime == newShowTime.EndTime);

						//thêm các trường còn thiếu screening
						newScreening.ShowDate = DateTime.Parse(date.ToShortDateString());
						newScreening.ShowTimeID = showtime.ID;
						newScreening.Status = ScreeningStatus.InActive;
						//


						if (await _scrSv.CreateScreeningAsync(newScreening))
						{
							//tạo seatshowtimestatus ứng với các ghế trong phòng
							foreach (var item in lstSeatInRoom)
							{
								SeatShowTimeStatusDTO input = new SeatShowTimeStatusDTO
									{
										ID = Guid.NewGuid(),
										ShowtimeId = showtime.ID,
										RoomID = newScreening.RoomID,
										SeatID = item.ID,
										ShowDate = newScreening.ShowDate,
										seatEnum = NeonCinema_Domain.Enum.seatEnum.Available
									};
								if (!await _scrSv.CreateSSS(input))
								{
									return;
								}
							}
							//
							scope.Complete(); //hoan thanh se luu vao DB\

							//reset cac truong
							messageString = "Success"; //dữ liệu để hiển thị animation success
							newScreening = new ScreeningCreateRequest();
							newShowTime = new ShowTimeCreateRequest();
							date = DateTime.Now.Date;
							startTime = DateTime.Parse("8:30");
							endTime = DateTime.Parse("8:30");
							//

							await LoadShowTimeFil(); //load lịch validate luôn tránh trường hợp tạo 2 lần liên tiếp
							await LoadScreening(); //load tất cả lịch
						}
						else
						{
							messageString = "Faild"; // dữ liệu để hiển thị animation faild
							return;
						}
					}
					else
					{
						messageString = "Faild";
						return;
					}
				}

			}
			catch (Exception ex)
			{
				messageString = "Faild";
				return;
			}
			finally
			{
				isModalVisibleConfirm = 2;
				IsLoadingAct = false; //huy animation
			}
		}
	}


	//Edit
	private string messageUpdate = null;
	private async Task EditScreening()
	{
		messageUpdate = null;
		IsLoadingAct = true; //animation loading
		try
		{
			if (await _scrSv.UpdateScreeningAsync(updateScr))
			{
				CloseModal();
				date = DateTime.Now;
				startTime = DateTime.Parse("8:30");
				endTime = DateTime.Parse("8:30");
				messageString = "Success";

				await LoadShowTimeFil();
			}
			else
			{
				messageString = "Faild";
				messageUpdate = "Lịch chiếu này đã có người đặt vé, không thể sửa";
			}
		}
		catch (Exception ex)
		{
			throw new Exception(ex.Message);
			messageString = "Faild";

		}
		finally
		{
			isModalVisibleConfirm = 2;
			IsLoadingAct = false;
			await LoadScreening();
		}

	}

	private string messageStringDel = null;
	private async Task DeleteScreening(Guid id)
	{
		messageStringDel = null;
		IsLoadingAct = true; //animation loading
		try
		{
			if (await _scrSv.DeleteScreeningAsync(id))
			{
				messageString = "Success";
				delScrId = Guid.Empty;
			}
			else
			{
				messageString = "Faild";
				messageStringDel = "Lịch chiếu này đã có người đặt không thể xóa";
				delScrId = Guid.Empty;
			}
		}
		catch
		{
			messageStringDel = "Lịch chiếu này đã có người đặt không thể xóa";
			messageString = "Faild";
		}
		finally
		{
			isModalVisibleConfirm = 2;
			IsLoadingAct = false; //huy animation sau khi hoan thanh
		}


		await LoadScreening();
	}

	//
	#region Oninput

	private async Task OnInputChangedMovie(ChangeEventArgs e)
	{
		Guid idmovie = Guid.Parse(e.Value.ToString());

		MovieDTO movie = movies.Data.FirstOrDefault(x => x.ID == idmovie);

		duration = movie.Duration;

		endTime = startTime + TimeSpan.FromMinutes(Convert.ToDouble(duration)) + TimeSpan.FromMinutes(15);
		ValidateComingDate(movie.StarTime);
	}

	private async Task OnInputChangedStartTime(ChangeEventArgs e)
	{
		DateTime starttime = DateTime.Parse(e.Value.ToString());

		if (duration != null)
		{
			TimeSpan x = TimeSpan.FromMinutes(Convert.ToDouble(duration));

			TimeSpan thoigianbu = TimeSpan.FromMinutes(15);

			endTime = starttime + x + thoigianbu;
		}

	}

	private async Task OnInputChangedStartTimeEdit(ChangeEventArgs e)
	{
		DateTime starttime = DateTime.Parse(e.Value.ToString());

		if (updateScr.Movies != null)
		{
			TimeSpan x = TimeSpan.FromMinutes(Convert.ToDouble(updateScr.Movies.Duration));

			TimeSpan thoigianbu = TimeSpan.FromMinutes(15);

			endTime = starttime + x + thoigianbu;
		}

	}

	private async Task OnInputChangedRoom(ChangeEventArgs e)
	{
		roomId = Guid.Parse(e.Value.ToString());

		foreach (var item in rooms)
		{
			if (item.ID == roomId)
			{
				roomName = item.Name;
			}
		}
		await LoadShowTimeFil();
	}
	Guid moviesId;
	private async Task MovieUpdate(ChangeEventArgs e)
	{
		moviesId = Guid.Parse(e.Value.ToString());

		foreach (var item in movies.Data)
		{
			if (item.ID == moviesId)
			{
				moviesName = item.Name;
			}
		}
		await LoadShowTimeFil();
	}
	private async Task OnInputChangedDate(ChangeEventArgs e)
	{
		date = DateTime.Parse(e.Value.ToString());
		MovieDTO movie = movies.Data.FirstOrDefault(x => x.ID == newScreening.MovieID);
		await LoadShowTimeFil();
		if (movie != null)
		{
			ValidateComingDate(movie.StarTime);
		}
	}


	private DateTime? fromDate;
	private DateTime? toDate;

	private async Task OnInputFromDateChanged(ChangeEventArgs e)
	{
		fromDate = DateTime.Parse(e.Value.ToString());

		if (toDate < fromDate)
		{
			toDate = fromDate;
		}

		await LoadFilScreenings();
	}


	private async Task OnInputToDateChanged(ChangeEventArgs e)
	{
		toDate = DateTime.Parse(e.Value.ToString());

		if(toDate < fromDate)
		{
			toDate = fromDate;
		}


		await LoadFilScreenings();
	}

	//
	private string nameMovie = ""; // cái này dùng để lọc thôi khác với moviesName nha

	private async Task OnInputSearchScrChanged(ChangeEventArgs e)
	{
		nameMovie = e.Value.ToString();

		await LoadFilScreenings();
	}

	#endregion

	private async Task LoadFilScreenings()
	{
		// Khởi tạo truy vấn cơ bản từ danh sách screenings
		var query = screenings.AsQueryable();

		// Áp dụng điều kiện lọc theo ngày, nếu fromDate và toDate không null
		if (fromDate != null && toDate != null)
		{
			query = query.Where(x => x.ShowDate >= fromDate && x.ShowDate < toDate);
		}

		// Áp dụng điều kiện lọc theo tên phim, nếu nameMovie không null
		if (!string.IsNullOrEmpty(nameMovie))
		{
			query = query.Where(x => x.FlimsName.Contains(nameMovie, StringComparison.OrdinalIgnoreCase));
		}

		// Thực hiện truy vấn và chuyển sang danh sách
		lstFilScreening = query.ToList();
	}

	//btn reset filter
	private async Task ResetFilter()
	{
		fromDate = null;
		toDate = null;
		nameMovie = "";

		await LoadFilScreenings();

	}




	//Màu trạng thái
	private string GetStatusClass(ScreeningStatus status)
	{
		return status switch
		{
			ScreeningStatus.Showing => "bg-primary",
			ScreeningStatus.InActive => "bg-warning",
			ScreeningStatus.Ended => "bg-danger",
			ScreeningStatus.Cancelled => "bg-dark"
		};
	}

	//validate st
	private bool ValidateST(TimeSpan startTime, TimeSpan endTime)
	{
		foreach (var item in _lstSTFil)
		{
			// Kiểm tra các trường hợp chồng lấn
			if ((startTime >= item.StartTime && startTime < item.EndTime) ||  // startTime nằm trong khoảng
				(endTime > item.StartTime && endTime <= item.EndTime) ||    // endTime nằm trong khoảng
				(startTime <= item.StartTime && endTime >= item.EndTime))   // Bao phủ toàn bộ khoảng
			{
				return false; // Có chồng lấn
			}
		}
		return true; // Không có chồng lấn
	}

	private bool ValidateST2(TimeSpan startTime, TimeSpan endTime)
	{
		if (startTime < TimeSpan.Parse("8:30") || startTime > TimeSpan.Parse("23:45"))
		{
			return false;
		}
		return true;
	}

	//validate ngày phát hành
	private void ValidateComingDate(DateTime comingdate) //cần sửa vì dữ liệu chưa kịp cập nhật đã validate
	{
		if (date < comingdate || date < DateTime.Now)
		{
			checkCDate = false;
			comingDate = comingdate.ToShortDateString();
		}
		else
		{
			checkCDate = true;
		}

	}


	private void CloseModal()
	{
		isModalVisible = 0;
	}

	private void CloseModalConfirm()
	{
		isModalVisibleConfirm = 0;
	}
}
<style>
	td {
		text-align: center
	}

	th {
		text-align: center
	}

	.modal {
		top: 10%;
	}

	.modalConfirm {
		top: 30%;
	}
</style>