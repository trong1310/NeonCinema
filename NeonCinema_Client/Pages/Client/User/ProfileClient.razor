@page "/profile-client/{id:guid}"
@using NeonCinema_API.Controllers.Service
@using NeonCinema_Application.DataTransferObject.BookingHistory
@using NeonCinema_Application.DataTransferObject.User
@layout LayoutClient
@using NeonCinema_Application.DataTransferObject.User.Request
@using NeonCinema_Client.Data.IServices.User
@using System.Globalization
@using System.Text.Json
@using NeonCinema_Client.Pages.Staff
@using NeonCinema_Domain.Database.Entities
@using NeonCinema_Infrastructure.Database.AppDbContext
@using System.Text.RegularExpressions
@using System.Text
@inject IUserServices _service
@inject HttpClient _http
@inject NavigationManager _navigation
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject ISV isv
@inject ISnackbar Snackbar
@inject HttpClient _HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager _navi

<MudSnackbarProvider MaxSnackbars="3" Position="SnackbarPosition.TopRight" PreventDuplicates="true" />
<div class="container-fluid mt-2">
	<h2 class="text-center mb-2 font-weight-bold" style="margin-top:30px;">Thông tin cá nhân</h2>
	<div class="row justify-content-center">
		<div class="col-md-4 text-center">
			<img src="@profileFilmsImage" alt="Profile" class="rounded-circle img-fluid profile-pic"> <br />
			<label class="custom-file-upload">
				<span style="margin-left:-5px">
					<i class="material-icons">cloud_upload</i>
				</span>
				<InputFile OnChange="HandleSelected" class="d-none" style="width: 200px" />
				<span>Chọn ảnh</span>
			</label>
			<div class="card custom-card">
				<p><b>Điểm tích lũy:</b>  @TotalPoints điểm</p>
				<p><b>Tổng chi tiêu:</b>  @totalMoney.ToString("N0") VND</p>
				<p><b>Hạng thành viên:</b>  @Rank</p>
				<p><b>Ngày đăng ký:</b> @users.CreatedTime.Value.ToString("dd/MM/yyyy")</p>
			</div>

		</div>
		<div class="col-md-8" style="margin-top:10px;">
			<form>
				<div class="row">
					<div class="col-md-6">
						<div class="form-group">
							<label for="fullname" class="font-weight-bold">Họ và tên</label>
							<input type="text" class="form-control" id="fullname" @bind-value="@user.FullName">
							@if (!string.IsNullOrEmpty(errorName))
							{
								<span class="text-danger">@errorName</span>
							}
						</div>
					</div>
					<div class="col-md-6">
						<div class="form-group">
							<label for="phone" class="font-weight-bold">Số điện thoại</label>
							<input type="text" class="form-control" id="phone" @bind-value="@user.PhoneNumber">
							@if (!string.IsNullOrEmpty(errorPhone))
							{
								<span class="text-danger">@errorPhone</span>
							}
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-6">
						<div class="form-group">
							<label for="email" class="font-weight-bold">Email</label>
							<input type="email" class="form-control" id="email" @bind-value="@user.Email">
							@if (!string.IsNullOrEmpty(errorEmail))
							{
								<span class="text-danger">@errorEmail</span>
							}
						</div>
					</div>
					<div class="col-md-6">
						<div class="form-group">
							<label for="dob" class="font-weight-bold">Ngày sinh</label>
							<input type="date" class="form-control" @bind-value="@user.DateOrBriht" />
							@if (!string.IsNullOrEmpty(errorYear))
							{
								<span class="text-danger">@errorYear</span>
							}
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-6">
						<div class="col-md-6">
							<div class="form-group">
								<label for="gender" class="font-weight-bold">Giới tính</label>
								<div style="margin-left: -20px; margin-top: 5px">
									<div class="form-check form-check-inline">
										<input class="form-check-input" type="radio" id="genderMale" name="gender"
										checked="@user.Gender" @onclick="@(() => user.Gender = true)" />
										<label class="form-check-label" for="genderMale" style="margin-left: 0.5rem; margin-top: 5px">Nam</label>
									</div>
									<div class="form-check form-check-inline">
										<input class="form-check-input" type="radio" id="genderFemale" name="gender"
										checked="@(user.Gender == false)" @onclick="@(() => user.Gender = false)" />
										<label class="form-check-label" for="genderFemale" style="margin-left: 0.5rem; margin-top: 5px">Nữ</label>
									</div>
								</div>
							</div>
						</div>

					</div>
				</div>

				<div class="form-group">
					<label for="address" class="font-weight-bold">Địa chỉ</label>
					<textarea class="form-control" id="address" rows="3" @bind="@user.Adderss"></textarea>
					@if (!string.IsNullOrEmpty(errorAdress))
					{
						<span class="text-danger">@errorAdress</span>
					}
				</div>

				<div class="text-center">
					<button type="button" @onclick="OnChangePasswordClick" class="btn btn-warning btn-lg">Đổi mật khẩu</button>
					<button type="button" @onclick="ShowConfirmEditModal" class="btn btn-primary btn-lg">Cập nhật</button>
					@if (showConfirmModal)
					{
						<div class="modal fade show custom-modal" style="display:block; margin-top: 50px" tabindex="-1" role="dialog" aria-hidden="false">
							<div class="modal-dialog" role="document">
								<div class="modal-content">
									<div class="modal-header">
										<button type="button" @onclick="CloseModal" aria-label="Close" class="close-btn">
											<span class="material-icons" aria-hidden="true">close</span>
										</button>
									</div>
									<div class="modal-body">
										<h5 class="text-center">Bạn chắn chắn muốn cập nhật thông tin cá nhân ?</h5>
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
										<button type="button" @onclick="UpdateAccout" class="btn btn-success" disabled="@isSubmitting">
											<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"
											style="display: @(isSubmitting ? "inline-block" : "none")"></span>
											<span>@(isSubmitting ? "Đang xử lý..." : "Xác nhận")</span>
										</button>
									</div>
								</div>
							</div>
						</div>

					}

				</div>
			</form>
		</div>
	</div>
	@if (showPasswordModal)
	{
		<div class="modal fade show" style="display: block; margin-top: 100px" tabindex="-1" role="dialog" aria-hidden="false">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h1 class="modal-title fs-5" id="exampleModalLabel">Đổi mật khẩu</h1>
						<button type="button" class="btn-close" @onclick="OnClosePasswordModal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<form>
							<div class="mb-3">
								<label for="recipient-name" class="col-form-label" style="margin-left: 5px">Mật khẩu hiện tại:</label>
								<input type="text" class="form-control" style="margin-left: 1px" @bind="currentPassword" id="currentPassword" placeholder="Nhập mật khẩu hiện tại">
							</div>
							<div class="mb-3">
								<label for="recipient-name" class="col-form-label" style="margin-left: 5px">Mật khẩu mới:</label>
								<input type="text" class="form-control" style="margin-left: 1px" @bind="newPassword" id="newPassword" placeholder="Nhập mật khẩu mới">
							</div>
							<div class="mb-3">
								<label for="message-text" class="col-form-label" style="margin-left: 5px">Xác nhận mật khẩu mới:</label>
								<textarea class="form-control" style="margin-left: 1px" @bind="confirmPassword" id="confirmPassword" placeholder="Nhập lại mật khẩu mới"></textarea>
							</div>
						</form>
					</div>
					@if (successMessage != null)
					{
						<div class="alert alert-success" role="alert">
							@successMessage
						</div>
					}

					@if (errorMessage != null)
					{
						<div class="alert alert-danger" role="alert">
							@errorMessage
						</div>
					}
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" @onclick="OnClosePasswordModal">Hủy</button>
						<button type="button" class="btn btn-success" @onclick="OnSubmitChangePassword">Xác nhận</button>
					</div>
				</div>
			</div>
		</div>
	}
</div>

<div class="row p-5">
	<div class="row align-items-center bg-secondary rounded">
		<div class="col-md-6 d-flex align-items-center">
			<span class="text-white font-weight-bold" style="font-size: 30px; padding-left: 20px;">Lịch sử giao dịch</span>
		</div>
		<div class="col-md-3">
			<label for="StartDate" class="text-white">Từ ngày</label>
			<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="fromDate" @oninput="OnInputChangedFromDate" />
		</div>
		<div class="col-md-3">
			<label for="EndDate" class="text-white">Đến ngày</label>
			<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" @bind-Value="toDate" @oninput="OnInputChangedToDate" />
		</div>
	</div>
	<div class="row border rounded">
		<table class="table">
			<thead>
				<tr>
					<th scope="col">STT</th>
					<th scope="col">Thời gian giao dịch</th>
					<th scope="col">Mã hóa đơn</th>
					<th scope="col">Tên phim</th>
					<th scope="col">Tổng tiền</th>
					<th scope="col">Số ghế</th>
					<th scope="col">Phòng</th>
					<th scope="col">Tổng điểm tích lũy</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@if (_lstBill == null || !_lstBill.Any() || _lstBill.Count == 0)
				{
					<tr>
						<td colspan="8" class="text-center text-muted">
							Bạn chưa có giao dịch nào.
						</td>
					</tr>
				}
				else
				{
					@foreach (var item in _lstBillFil.Select((value, index) => new { value, index }))
					{
						string seatNumber = ""; // Reset seatNumber cho mỗi item
						string roomName = ""; // Reset roomName cho mỗi item
						string nameMovie = ""; // Cần đảm bảo nameMovie được reset

						if (item.value.Ticket != null)
						{
							foreach (var x in item.value.Ticket)
							{
								nameMovie = x.Movies.Name;
								if (x.Seat.SeatNumber.ToString() != null)
								{
									seatNumber = seatNumber + "," + x.Seat.SeatNumber.ToString();
								}

								roomName = x.Screenings.Rooms.Name;
							}
						}

						// Loại bỏ dấu "," đầu tiên nếu có
						if (seatNumber.StartsWith(","))
						{
							seatNumber = seatNumber.Substring(1);
						}

						<tr>
							<th scope="row">@(item.index + 1)</th>
							<td>@item.value.CreatedTime</td>
							<td>@item.value.BillCode</td>
							<td>@nameMovie</td>
							<td>@item.value.TotalPrice.ToString("N0") VND</td>
							<td>@seatNumber</td>
							<td>@roomName</td>
							@if (item.value.PendingPoint != null)
							{
								<td>@item.value.PendingPoint.Point điểm</td>
							}
							else
							{
								<td>0 điểm</td>
							}
							<td><i class="fa-solid fa-eye" style="color: #74C0FC;" @onclick="(() => ShowDetail(item.value))"></i></td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>

<!--Modal Details-->
@if (selectedBill != null)
{
	<div class="modal show fade"
		 tabindex="-1"
		 style="display: block; margin-top: 20px; height: 850px; position: fixed"
		 aria-hidden="false">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header" style="position: sticky">
					<h5 class="modal-title">Chi Tiết Hóa Đơn</h5>
					<button type="button"
							class="btn-close"
							@onclick="CloseDetail"></button>
				</div>
				<div class="modal-body">
					<h4>Thông Tin Hóa Đơn</h4>
					<p><b>Mã Hóa Đơn:</b> @selectedBill.BillCode</p>
					<p><b>Khách Hàng:</b> @users.FullName</p>
					<p><b>Nhân viên xử lý:</b>@selectedBill.CreatedBy</p>
					<p><b>Tên Rạp:</b> @TheaterName</p>
					<p><b>Địa Chỉ Rạp:</b> @TheaterAddress</p>

					<h4 class="mt-4">Thông Tin Vé</h4>
					@if (selectedBill.Ticket != null)
					{
						@foreach (var ticket in selectedBill.Ticket)
						{
							<div class="ticket-info mb-3 border rounded p-3">
								<p><b>Phim:</b> @ticket.Screenings?.Movies?.Name</p>
								<p><b>Ngày Chiếu:</b> @ticket.Screenings?.ShowDate.ToString("dd/MM/yyyy")</p>
								<p><b>Giờ Chiếu:</b> @ticket.Screenings?.ShowTime?.StartTime.ToString(@"hh\:mm") - @ticket.Screenings?.ShowTime?.EndTime.ToString(@"hh\:mm")</p>
								<p><b>Ghế:</b> @ticket.Seat?.SeatNumber</p>
								<p><b>Phòng:</b> @ticket.Screenings?.Rooms?.Name</p>
								<p><b>Giá Vé:</b> @ticket.Price.ToString("C0")</p>
							</div>
						}
					}
					else
					{
						<p>Không có thông tin vé.</p>
					}

					<h4 class="mt-4">Thông Tin Combo</h4>
					@if (selectedBill.BillCombos != null)
					{
						@foreach (var combo in selectedBill.BillCombos)
						{
							<p>@combo.FoodCombo?.Content - Số Lượng: @combo.Quantity - Giá: @combo.FoodCombo?.TotalPrice.ToString("C0")</p>
						}
					}
					else
					{
						<p>Không có combo.</p>
					}

					<div class="mt-4 text-center">
						<h4>Quét Barcode Để Xem Chi Tiết</h4>
						<img src="https://bwipjs-api.metafloor.com/?bcid=code128&text=@GenerateBarcodeData(selectedBill)&scale=2&includetext=true"
							 alt="Barcode">
					</div>
				</div>
				<div class="modal-footer">
					<button class="btn btn-primary" @onclick="DownloadInvoice">
						Tải Hóa Đơn PDF
					</button>
					<button class="btn btn-secondary" @onclick="CloseDetail">
						Đóng
					</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}
@code {
	[Parameter]
	public Guid id { get; set; }
	private UserDTO user = new UserDTO();
	UserUpdateRequest updateRequest = new UserUpdateRequest();
	private IBrowserFile selectedFile;
	private string profileFilmsImage = "/images/Client/avt-default.jpg";
	private int TotalPoints = 0;
	private decimal TotalSpent = 0;
	private string Rank;

	[Parameter]
	public EventCallback OnUserUpdated { get; set; }

	protected override async Task OnInitializedAsync()
	{
		user = await _service.GetByIDUser(id, CancellationToken.None);
		var userStats = await isv.GetUserStatsAsync(id);
		TotalPoints = userStats.TotalPoints;
		TotalSpent = userStats.TotalSpent;
		Rank = userStats.ranks;
		profileFilmsImage = GetImageUrl(user.Images);
		originalEmail = user.Email;
		if (user.Gender == null)
		{
			user.Gender = true; // Mặc định là Nam
		}
		StateHasChanged();
		await LoadUserDetails();
		await TotalMoneyUser();
		await TotalPointUser();
		await FilterDate();

	}

	private void ShowSnackbar(string message, Severity severity)
	{
		Snackbar.Add(message, severity, options =>
		{
			options.RequireInteraction = false; // Không bắt buộc người dùng tắt
			options.VisibleStateDuration = 3000; // Thời gian hiển thị (3 giây)
		});
		isSubmitting = false;
	}
	#region Cập nhật thông tin
	private async Task HandleSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
		var imageUrl = await GetImageUrlUpdate(selectedFile);
		if (imageUrl != null)
		{
			profileFilmsImage = imageUrl;
			StateHasChanged();
		}

	}
	private async Task<string> GetImageUrlUpdate(IBrowserFile file)
	{
		if (file.ContentType.StartsWith("image/"))
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 20);
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
			return $"data:{file.ContentType};base64,{imageBase64}";
		}
		return null;
	}
	private string GetImageUrl(string imageUrl)
	{
		return $"https://localhost:7211/api/Resources/{imageUrl}";
	}

	private NeonCinemasContext _context = new NeonCinemasContext();
	private string? errorName = null;
	private string? errorPhone = null;
	private string? errorEmail = null;
	private string? errorAdress = null;
	private string? errorYear = null;
	private bool isSubmitting = false;
	private bool showConfirmModal = false;
	private string? originalEmail;
	private void CloseModal()
	{
		showConfirmModal = false;
		StateHasChanged();
	}
	private void ShowConfirmEditModal()
	{
		bool isValid = true;
		// Kiểm tra và hiển thị thông báo lỗi cho các trường
		var phoneExists = _context.Users.Any(x => x.PhoneNumber == user.PhoneNumber && x.ID != user.ID);
		var emailExists = _context.Users.Any(x => x.Email == user.Email && x.ID != user.ID);

		//Ngày sinh
		if (user.DateOrBriht == null ||
			user.DateOrBriht.Year < 1900 ||
			user.DateOrBriht > DateTime.Now.AddYears(-14))
		{
			errorYear = "Bạn phải từ 14 trở lên.";
			isValid = false;
			isSubmitting = false;
		}
		else
		{
			errorYear = null;
		}
		// Kiểm tra họ và tên
		if (string.IsNullOrWhiteSpace(user.FullName))
		{
			errorName = "Họ và tên không được để trống.";
			isValid = false;
			isSubmitting = false;
		}
		else if (!Regex.IsMatch(user.FullName ?? string.Empty, @"^[\p{L}\s]+$"))
		{
			errorName = "Họ và tên không được chứa số và kí tự đặc biệt.";
			isValid = false;
			isSubmitting = false;
		}
		else
		{
			errorName = null;
		}

		// Kiểm tra email (chỉ khi thay đổi)
		if (!string.IsNullOrWhiteSpace(user.Email) && user.Email != originalEmail)
		{
			if (!Regex.IsMatch(user.Email, @"^[^\s@]+@[^\s@]+\.[^\s@]+$"))
			{
				errorEmail = "Email không hợp lệ. Vui lòng nhập đúng định dạng.";
				isValid = false;
			}
			else if (string.IsNullOrWhiteSpace(user.Email))
			{
				errorEmail = "Email không được để trống.";
				isValid = false;
				isSubmitting = false;
			}
			else if (_context.Users.Any(x => x.Email == user.Email && x.ID != user.ID))
			{
				errorEmail = "Email này đã tồn tại. Vui lòng chọn email khác.";
				isValid = false;
			}
			else
			{
				errorEmail = null;
			}
		}
		else
		{
			errorEmail = null;
		}


		// SDT
		if (string.IsNullOrWhiteSpace(user.PhoneNumber))
		{
			errorPhone = "Số điện thoại không được để trống.";
			isValid = false;
			isSubmitting = false;
		}
		else if (!Regex.IsMatch(user.PhoneNumber, @"^(03|08|09)\d{8}$"))
		{
			errorPhone = "Số điện thoại phải bắt đầu bằng 03, 08, 09 và có 10 chữ số.";
			isValid = false;
			isSubmitting = false;
		}
		else if (phoneExists)
		{
			errorPhone = "Số điện thoại này đã tồn tại. Vui lòng chọn số khác.";
			isValid = false;
			isSubmitting = false;
		}
		else
		{
			errorPhone = null;
		}

		// Nếu tất cả hợp lệ, hiển thị modal xác nhận
		if (isValid)
		{
			showConfirmModal = true;
		}
		StateHasChanged();
	}


	private async Task UpdateAccout()
	{
		isSubmitting = true;
		errorName = "";
		errorPhone = "";
		errorEmail = "";
		errorAdress = "";
		errorYear = "";
		try
		{
			string fileName = user.Images; // Dùng ảnh hiện tại nếu không chọn ảnh mới

			if (selectedFile != null)
			{
				// Logic upload ảnh
				var content = new MultipartFormDataContent();
				var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 30));
				fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);

				content.Add(fileContent, "file", selectedFile.Name);
				var response = await _http.PostAsync("https://localhost:7211/api/UploadImages/upload-image", content);

				if (response.IsSuccessStatusCode)
				{
					var jsonResponse = await response.Content.ReadAsStringAsync();
					var jsonDoc = JsonDocument.Parse(jsonResponse);
					var fileUrl = jsonDoc.RootElement.GetProperty("fileUrl").GetString();
					fileName = Path.GetFileName(fileUrl);
				}
				else
				{
					Console.WriteLine($"Lỗi upload ảnh. Status code: {response.StatusCode}");
				}
			}
			updateRequest = new UserUpdateRequest()
				{
					Id = user.ID,
					FullName = user.FullName,
					Email = user.Email,
					Adderss = user.Adderss,
					DateOrBriht = user.DateOrBriht,
					Gender = user.Gender,
					PhoneNumber = user.PhoneNumber,
					Images = fileName
				};

			var updateResponse = await _service.UpdateUser(updateRequest, CancellationToken.None);
			if (updateResponse.IsSuccessStatusCode)
			{
				if (OnUserUpdated.HasDelegate)
				{
					await OnUserUpdated.InvokeAsync();
				}
				ShowSnackbar("Cập nhật thông tin cá nhân thành công.", Severity.Success);
				await Task.Delay(2000);
				isSubmitting = false;
				

				CloseModal();
				_navi.NavigateTo(_navi.Uri, forceLoad: true);
			}
			else
			{
				Console.WriteLine($"Chỉnh sửa thất bại: {await updateResponse.Content.ReadAsStringAsync()}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Lỗi: {ex.Message}");
			Console.WriteLine($"Chi tiết ngoại lệ: {ex.StackTrace}");
		}
		finally
		{
			isSubmitting = false;
		}
	}
	#endregion

	#region Lịch sử giao dịch
	private Users users = new Users();
	private List<Bill> _lstBill = new List<Bill>();
	private List<Bill> _lstBillFil = new List<Bill>();
	private double totalMoney = 0;
	private string nameMovie = "";
	private string seatNumber = "";
	private string roomName = "";
	private int totalPoint = 0;
	private async Task LoadUserDetails()
	{
		var token = await _localStorage.GetItemAsync<string>("authToken");
		var requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7211/api/User/get-user-by-id");
		requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
		var response = await _http.SendAsync(requestMessage);
		if (response.IsSuccessStatusCode)
		{
			users = await response.Content.ReadFromJsonAsync<Users>();
		}


		if (users.Bills != null)
		{
			_lstBill = users.Bills.ToList();
		}
	}


	private async Task<double> TotalMoneyUser()
	{
		foreach (var item in _lstBill)
		{
			totalMoney = totalMoney + Convert.ToDouble(item.TotalPrice);
		}

		return totalMoney;
	}

	private async Task TotalPointUser()
	{
		if(users.RankMembers != null)
		{
			if (users.RankMembers.Count != 0)
			{
				foreach (var item in users.RankMembers)
				{
					totalPoint = totalPoint + Convert.ToInt32(item.MinPoint);
				}
			}
		}	
	}
	#endregion

	#region Đổi mật khẩu
	private string currentPassword;
	private string newPassword;
	private string confirmPassword;
	private string errorMessage;
	private string? successMessage;
	private string? successMessages;
	private string errorMessages;
	private bool showPasswordModal = false;
	private void OnChangePasswordClick()
	{
		showPasswordModal = true;
	}
	private void OnClosePasswordModal()
	{
		showPasswordModal = false;
	}
	private async Task OnSubmitChangePassword()
	{
		if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
		{
			ShowErrorMessage("Vui lòng điền đầy đủ các trường mật khẩu.");
			return;
		}
		if (newPassword != confirmPassword)
		{
			ShowErrorMessage("Mật khẩu mới và mật khẩu xác nhận không khớp.");
			return;
		}
		var token = await _localStorage.GetItemAsync<string>("authToken");
		if (string.IsNullOrEmpty(token))
		{
			_navi.NavigateTo("/login");
			return;
		}
		var checkPasswordRequest = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7211/api/User/Check-Current-Password");
		checkPasswordRequest.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
		checkPasswordRequest.Content = new StringContent(JsonSerializer.Serialize(new { password = currentPassword }), Encoding.UTF8, "application/json");

		var checkPasswordResponse = await _http.SendAsync(checkPasswordRequest);
		if (!checkPasswordResponse.IsSuccessStatusCode)
		{
			var errorResponse = await checkPasswordResponse.Content.ReadAsStringAsync();
			ShowErrorMessage($"Lỗi Mật khẩu hiện tại không đúng: {errorResponse}");
			return;
		}


		var check = new ClientChangerPass { Currenpassword = currentPassword, Newpassword = newPassword, Confirmpasss = confirmPassword };
		var requestMessage = new HttpRequestMessage(HttpMethod.Put, "https://localhost:7211/api/User/Changer-Password");
		requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
		requestMessage.Content = new StringContent(JsonSerializer.Serialize(check), Encoding.UTF8, "application/json");
		var response = await _http.SendAsync(requestMessage);
		if (response.IsSuccessStatusCode)
		{
			ShowSuccessMessage("Đổi mật khẩu thành công.");
		}
		else
		{
			var errorResponse = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Lỗi HTTP: {response.StatusCode}");
			Console.WriteLine($"Thông báo lỗi từ server: {errorResponse}");
			ShowErrorMessage($"Đổi mật khẩu thất bại: {errorResponse}");
			return;
		}
	}
	private void ShowErrorMessage(string message)
	{
		errorMessage = message;
		successMessage = null;
	}
	private void ShowSuccessMessage(string message)
	{
		successMessage = message;
		errorMessage = null;
	}
	private void ShowErrorMessageUpdate(string message)
	{
		errorMessage = message;
		successMessage = null;
	}
	private void ShowMessageUpdate(string message)
	{
		errorMessages = message;
		successMessages = null;
	}
	#endregion


	#region Filter
	private DateTime? fromDate;
	private DateTime? toDate;

	private async Task OnInputChangedFromDate(ChangeEventArgs e)
	{
		fromDate = DateTime.Parse(e.Value.ToString());
		if (toDate < fromDate)
		{
			toDate = fromDate;
		}
		await FilterDate();
	}

	private async Task OnInputChangedToDate(ChangeEventArgs e)
	{
		toDate = DateTime.Parse(e.Value.ToString());

		if(toDate < fromDate)
		{
			toDate = fromDate;
		}
		await FilterDate();
	}

	private async Task FilterDate()
	{
		if(fromDate != null && toDate != null)
		{
			_lstBillFil = _lstBill.Where(x => x.CreatedTime >= fromDate && x.CreatedTime < toDate).ToList();
		}
		else
		{
			_lstBillFil = _lstBill;
		}
	}
	#endregion

	#region Bill Details
	private Bill? selectedBill = null;

	// Thông tin bổ sung
	public string TheaterName = "NeonCinemas";
	public string TheaterAddress = "Số 1 - Phúc diễn - Bắc từ liêm - Hà nội";


	private void CloseDetail() => selectedBill = null;

	private async Task<string> GetNameStaff()
	{
		if(selectedBill != null)
		{
			using(NeonCinemasContext context = new NeonCinemasContext())
			{
				var staff = await context.Users.FindAsync(selectedBill.CreatedBy);

				if(staff != null)
				{
					return staff.FullName;
				}
				else
				{
					return "";
				}
			}
		}
		else
		{
			return "";
		}
	}

	private async Task DownloadInvoice()
	{
		if (selectedBill != null)
		{
			try
			{
				var response = await _HttpClient.GetAsync($"api/Resources/generate-invoice-pdf?billId={selectedBill.ID}");
				if (response.IsSuccessStatusCode)
				{
					var fileBytes = await response.Content.ReadAsByteArrayAsync();
					await JSRuntime.InvokeVoidAsync("downloadFile",
						$"Invoice_{selectedBill.BillCode}.zip",
						fileBytes,
						"application/zip");
				}
				else
				{
					await JSRuntime.InvokeVoidAsync("alert", $"Lỗi tải hoá đơn: {response.ReasonPhrase}");
				}
			}
			catch (Exception ex)
			{
				await JSRuntime.InvokeVoidAsync("alert", $"Có lỗi khi tải hoá đơn: {ex.Message}");
			}
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("alert", "Không có hoá đơn để tải.");
		}
	}

	private string GenerateBarcodeData(Bill bill)
				=> bill.BillCode.ToString();


	private void ShowDetail(Bill bill) => selectedBill = bill;
	#endregion
}

<style>
	body {
		background-color: #f4f4f9;
	}

	.card {
		border-radius: 10px;
		background-color: white;
		max-width: 1000px;
		margin: auto;
	}

	h2 {
		font-family: 'Arial', sans-serif;
		color: #333;
	}

	.profile-pic {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border: 3px solid #eaeaea;
		display: block;
		margin-left: auto;
		margin-right: auto;
	}


	label {
		font-size: 14px;
		color: #555;
	}

	.custom-file-upload {
		display: flex;
		align-items: center; /* Căn giữa theo chiều dọc */
		justify-content: center; /* Căn giữa theo chiều ngang */
		padding: 10px 20px;
		cursor: pointer;
		border-radius: 10px;
		background-color: #a9a9a9; /* Màu nền của nút */
		color: white; /* Màu chữ */
		border: none; /* Bỏ viền */
		text-align: center;
		width: 150px;
		margin-left: auto; /* Thêm */
		margin-right: auto;
		margin-top: -15px;
	}

		.custom-file-upload span {
			margin-left: 8px; /* Khoảng cách giữa biểu tượng và văn bản */
		}

		.custom-file-upload:hover {
			background-color: #8f8f8f; /* Màu nền khi hover */
		}

	input, select, textarea {
		border-radius: 5px;
		border: 1px solid #ccc;
		padding: 10px;
		margin-left: -20px; /* Shift input fields slightly left */
	}

	.form-control:focus {
		border-color: #007bff;
		box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
	}

	textarea {
		resize: none;
	}

	.btn-primary {
		background-color: #007bff;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}

	.btn-warning {
		color: white;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		font-size: 16px;
	}
		.btn-primary:hover {
			background-color: #0056b3;
		}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-check {
		margin-right: 15px; /* Adjust spacing between radio buttons */
	}

	label {
		margin-left: -17px;
	}

	.close-btn {
		position: absolute;
		top: 10px;
		right: 10px;
		background: none; /* Loại bỏ màu nền */
		border: none; /* Loại bỏ viền */
		font-size: 24px; /* Kích thước biểu tượng */
		cursor: pointer;
		color: #333; /* Màu sắc biểu tượng */
	}

	.custom-card {
		border: 1px solid #28a745; /* Đường viền xanh lá */
		border-radius: 10px;
		padding: 5px;
		margin-top: 10px;
		background-color: #ffffff;
		width: 60%;
	}

	.text-danger {
		cursor: pointer;
		text-decoration: none;
		font-size: 16px;
	}

		.text-danger:hover {
			text-decoration: underline;
		}

</style>
